{
  "abortMasteryTowerSession": "mutation abortMasteryTowerSession($classDescriptor: String!) {\n  abortMasteryTowerSession(classDescriptor: $classDescriptor) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "acceptCoachRequestFromNotifMutation": "mutation acceptCoachRequestFromNotifMutation($coachKaid: String!) {\n  acceptCoachRequest(coachKaid: $coachKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "acceptCoachRequestMutation": "mutation acceptCoachRequestMutation($coachKaid: String!, $studentKaid: String) {\n  acceptCoachRequest(coachKaid: $coachKaid, studentKaid: $studentKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "AcceptTOS": "mutation AcceptTOS {\n  acceptTos {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "accountTransitionMutation": "mutation accountTransitionMutation($targetKaid: String!, $childOrAdult: String!) {\n  accountTransition(targetKaid: $targetKaid, childOrAdult: $childOrAdult) {\n    user {\n      id\n      isChild\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addCoach": "mutation addCoach($studentKaid: String!, $coachEmail: String!) {\n  addCoach(studentKaid: $studentKaid, coachEmail: $coachEmail) {\n    coach {\n      id\n      kaid\n      username\n      nickname\n      email\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addCoachAsAdminMutation": "mutation addCoachAsAdminMutation($studentKaid: String!, $coachKaid: String!) {\n  addCoachAsAdmin(studentKaid: $studentKaid, coachKaid: $coachKaid) {\n    coach {\n      id\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addContentPermissionMutation": "mutation addContentPermissionMutation($userEmail: String!, $contentPermissions: [AddContentPermissionInput!]!) {\n  addContentPermissions(\n    kaid: \"\"\n    userEmail: $userEmail\n    contentPermissions: $contentPermissions\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "AddFeedbackToDiscussion": "mutation AddFeedbackToDiscussion($focusKind: String, $focusId: String, $parentKey: String, $textContent: String!, $feedbackType: FeedbackType!, $fromVideoAuthor: Boolean, $shownLowQualityNotice: Boolean) {\n  addFeedbackToDiscussion(\n    focusKind: $focusKind\n    focusId: $focusId\n    parentKey: $parentKey\n    textContent: $textContent\n    feedbackType: $feedbackType\n    fromVideoAuthor: $fromVideoAuthor\n    shownLowQualityNotice: $shownLowQualityNotice\n  ) {\n    feedback {\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      fromVideoAuthor\n      key\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      sumVotesIncremented\n      upVoted\n      __typename\n    }\n    lowQualityResponse {\n      feedbackCode\n      feedbackChar\n      feedbackType\n      showLowQualityNotice\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "AddFlagMutation": "mutation AddFlagMutation($flagName: String!, $description: String!, $team: String!, $rules: [RuleInput!]!) {\n  addFlag(name: $flagName, description: $description, team: $team, rules: $rules) {\n    flag {\n      id\n      name\n      description\n      team\n      created\n      expires\n      rules {\n        name\n        isAllowRule\n        context {\n          name\n          value\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "AddMappersSuggestions": "mutation AddMappersSuggestions($kaid: String!, $categories: [AddMappersCategoryInput]!) {\n  addMappersCategories(studentKaid: $kaid, categories: $categories) {\n    mappersSuggestions {\n      unit {\n        id\n        title: translatedTitle\n        relativeUrl\n        __typename\n      }\n      progress {\n        completed\n        total\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addParent": "mutation addParent($childKaid: String!, $parentKaid: String!) {\n  setParentAsAdmin(childKaid: $childKaid, parentKaid: $parentKaid) {\n    user {\n      id\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addParents": "mutation addParents($parentEmail: String!) {\n  addParents(parentEmail: $parentEmail) {\n    parent {\n      id\n      kaid\n      nickname\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addStudentsToClassrooms": "mutation addStudentsToClassrooms($kaids: [ID!]!, $classroomIds: [ID!]!) {\n  addStudentsToClassrooms(kaids: $kaids, classroomIds: $classroomIds) {\n    coach {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "AddUserNote": "mutation AddUserNote($kaid: String!, $text: String!) {\n  addUserNote(kaid: $kaid, text: $text) {\n    error\n    note {\n      text\n      date\n      author {\n        id\n        email\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideEnrollViaInvitation": "mutation aiGuideEnrollViaInvitation($input: AIGuideEnrollViaInvitationInput!) {\n  aiGuideEnrollViaInvitation(input: $input) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "archiveContentAssignments": "mutation archiveContentAssignments($assignmentIds: [ID]!) {\n  archiveAssignments(ids: $assignmentIds) {\n    assignments {\n      ...AssignmentInfoFragment\n      __typename\n    }\n    __typename\n  }\n}",
  "archiveSubjectMasteryAssignment": "mutation archiveSubjectMasteryAssignment($assignmentId: ID!) {\n  archiveSubjectMasteryAssignments(ids: [$assignmentId]) {\n    assignments {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "attemptProblem": "mutation attemptProblem($input: AttemptProblemInput!) {\n  attemptProblem(attempt: $input) {\n    result {\n      userExercise {\n        ...userExerciseFields\n        __typename\n      }\n      newTask {\n        cards {\n          done\n          cardType\n          ... on ProblemCard {\n            exerciseName\n            problemType\n            __typename\n          }\n          __typename\n        }\n        includeSkipButton\n        task {\n          id\n          key\n          pointBounty\n          pointsEarned\n          taskType\n          completionCriteria {\n            name\n            __typename\n          }\n          ... on PracticeTask {\n            promotionCriteria {\n              name\n              value\n              __typename\n            }\n            reservedItems\n            reservedItemsCompleted\n            taskAttemptHistory {\n              correct\n              timeDone\n              seenHint\n              itemId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        userExercises {\n          ...userExerciseFields\n          __typename\n        }\n        __typename\n      }\n      actionResults {\n        attemptCorrect\n        notificationsAdded {\n          avatarParts\n          badges\n          readable\n          toast\n          urgent\n          continueUrl\n          __typename\n        }\n        pointsEarned {\n          points\n          __typename\n        }\n        updatedStpStreakLength\n        updatedCourseProficiencyLevel\n        __typename\n      }\n      attemptPromotions {\n        fpmPromotions {\n          progressKey\n          level\n          __typename\n        }\n        __typename\n      }\n      updatedRecommendations {\n        contentId\n        kind\n        sourceId\n        __typename\n      }\n      error {\n        code\n        debugMessage\n        uuid\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment userExerciseFields on UserExercise {\n  exerciseModel: exercise {\n    id\n    assessmentItemCount: numAssessmentItems\n    displayName\n    isQuiz\n    isSkillCheck\n    name\n    nodeSlug\n    progressKey\n    translatedDisplayName\n    relatedContent {\n      id\n      contentKind\n      kind\n      thumbnailUrl\n      translatedTitle\n      topicPaths {\n        path {\n          id\n          kind\n          slug\n          __typename\n        }\n        __typename\n      }\n      ... on Article {\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        __typename\n      }\n      ... on Video {\n        duration\n        imageUrl\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        translatedYoutubeId\n        __typename\n      }\n      __typename\n    }\n    relatedVideos {\n      contentKind\n      duration\n      id\n      imageUrl\n      kaUrl\n      kind\n      nodeSlug\n      progressKey\n      relativeUrl\n      slug\n      thumbnailUrl\n      translatedDescription\n      translatedTitle\n      translatedYoutubeId\n      __typename\n    }\n    problemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    translatedProblemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    __typename\n  }\n  exercise: exerciseName\n  fpmMasteryLevel\n  lastAttemptNumber\n  lastCountHints\n  lastDone\n  lastMasteryUpdate\n  longestStreak\n  maximumExerciseProgressDt: maximumExerciseProgressDate\n  streak\n  totalCorrect\n  totalDone\n  __typename\n}",
  "AuthCookieMutation": "mutation AuthCookieMutation {\n  refreshAuthCookies {\n    error\n    __typename\n  }\n}",
  "awardBadgesToUser": "mutation awardBadgesToUser($kaid: String!, $badges: [String]!, $fromDevAdmin: Boolean) {\n  forceAwardBadges(\n    awardeeKaid: $kaid\n    badgeNames: $badges\n    fromDevAdmin: $fromDevAdmin\n  ) {\n    errors {\n      code\n      badgeName\n      __typename\n    }\n    __typename\n  }\n}",
  "BanUserMutation": "mutation BanUserMutation($targetKaid: String!, $banReason: String!) {\n  hellbanUser(targetKaid: $targetKaid, hellbanReason: $banReason) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "BulkInsertOrUpdateDub": "mutation BulkInsertOrUpdateDub($input: [DubInsertOrUpdateInputEntry!]!) {\n  bulkInsertOrUpdateDub(dubInputEntryList: $input) {\n    errors {\n      code\n      debugMessage\n      dubInsertOrUpdateEntry {\n        sourceYouTubeId\n        dubYouTubeId\n        contentId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "BulkPerformModAction": "mutation BulkPerformModAction($bulkModAction: BulkModAction!, $entityKeys: [String!]) {\n  bulkPerformModAction(modAction: $bulkModAction, entityKeys: $entityKeys) {\n    error {\n      code\n      erroredKeys\n      __typename\n    }\n    __typename\n  }\n}",
  "cancelPayPalRecurringDonation": "mutation cancelPayPalRecurringDonation($paypalProfileID: String!) {\n  cancelPayPalRecurringDonation(paypalProfileID: $paypalProfileID) {\n    success\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "cancelStripeSubscription": "mutation cancelStripeSubscription($customerId: String!, $subscriptionId: String!) {\n  cancelStripeSubscription(customerId: $customerId, subscriptionId: $subscriptionId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n",
  "changeBio": "mutation changeBio($bio: String!, $kaid: String!) {\n  setSettings(bio: $bio, kaid: $kaid) {\n    user {\n      id\n      bio\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "changeNickname": "mutation changeNickname($nickname: String!, $kaid: String!) {\n  setSettings(nickname: $nickname, kaid: $kaid) {\n    user {\n      id\n      nickname\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "changeUsername": "mutation changeUsername($username: String!, $kaid: String!) {\n  setSettings(username: $username, kaid: $kaid) {\n    user {\n      id\n      username\n      __typename\n    }\n    errors {\n      code\n      usernameOwnedBy {\n        id\n        email\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "changeVerificationEmailMutation": "mutation changeVerificationEmailMutation($email: String!) {\n  changeVerificationEmail(email: $email) {\n    email\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "classroomProgressReset": "mutation classroomProgressReset($classroomDescriptor: String!) {\n  classroomProgressReset(classroomDescriptor: $classroomDescriptor) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "classroomProgressUpdate": "mutation classroomProgressUpdate($classroomDescriptor: String!) {\n  classroomProgressUpdate(classroomDescriptor: $classroomDescriptor) {\n    error {\n      code\n      __typename\n    }\n    classroomProgress {\n      id\n      earnedLevel\n      currentLevelProgress\n      __typename\n    }\n    __typename\n  }\n}",
  "clearBrandNewNotifications": "mutation clearBrandNewNotifications {\n  clearBrandNewNotifications {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "clearRecommendationFor321ContentItem": "mutation clearRecommendationFor321ContentItem($contentDescriptor: String!, $unitId: String!) {\n  clearRecommendation(contentDescriptor: $contentDescriptor, unitId: $unitId) {\n    wasSuccessful\n    __typename\n  }\n}",
  "clearRecommendationForContentItemWeb": "mutation clearRecommendationForContentItemWeb($contentDescriptor: String!, $unitId: String!) {\n  clearRecommendation(contentDescriptor: $contentDescriptor, unitId: $unitId) {\n    wasSuccessful\n    __typename\n  }\n}",
  "cleverCreateAccountWithEmailV2Mutation": "mutation cleverCreateAccountWithEmailV2Mutation($transferToken: String!, $email: String!, $birthdate: Date) {\n  cleverCreateAccountWithEmailV2(\n    transferToken: $transferToken\n    email: $email\n    birthdate: $birthdate\n  ) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "cleverDistrictsSignupV2Mutation": "mutation cleverDistrictsSignupV2Mutation($udiUuid: String!, $cleverId: String!) {\n  cleverDistrictsSignupV2(udiUuid: $udiUuid, cleverId: $cleverId) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "completeInfoStep": "mutation completeInfoStep($stepId: ID!) {\n  teacherCampaignInfoStepMarkComplete(stepId: $stepId) {\n    progress {\n      id\n      completedSteps\n      __typename\n    }\n    __typename\n  }\n}",
  "completeSignupMutation": "mutation completeSignupMutation($nickname: String!, $password: String!, $username: String!, $birthdate: Date, $inviteId: String, $isParent: Boolean, $isTeacher: Boolean, $token: String, $continueUrl: String) {\n  completeSignup(\n    nickname: $nickname\n    password: $password\n    username: $username\n    birthdate: $birthdate\n    inviteId: $inviteId\n    isParent: $isParent\n    isTeacher: $isTeacher\n    token: $token\n    continueUrl: $continueUrl\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    continueUrl\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorCreateArticle": "mutation contentEditorCreateArticle($input: NewArticleInput!) {\n  createArticle(input: $input) {\n    article {\n      ...ArticleRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ArticleRevision on ArticleRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailData\n  thumbnailCache\n  alternateSlugs\n  assessmentItemTags\n  authorNames\n  clarificationsEnabled\n  perseusContent\n  listed\n  __typename\n}",
  "contentEditorCreateExercise": "mutation contentEditorCreateExercise($input: NewExerciseInput!) {\n  createExercise(input: $input) {\n    exercise {\n      ...ExerciseRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "contentEditorCreateVideo": "mutation contentEditorCreateVideo($input: NewVideoInput!) {\n  createVideo(input: $input) {\n    video {\n      ...VideoRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment VideoRevision on VideoRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailCache\n  thumbnailData\n  alternateSlugs\n  assessmentItemTags\n  augmentedTranscript\n  authorNames\n  clarificationsEnabled\n  duration\n  kaUserLicense\n  keywords\n  youtubeId\n  listed\n  __typename\n}",
  "contentEditorEditArticle": "mutation contentEditorEditArticle($sha: String!, $input: EditArticleInput!) {\n  editArticle(sha: $sha, input: $input) {\n    article {\n      ...ArticleRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ArticleRevision on ArticleRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailData\n  thumbnailCache\n  alternateSlugs\n  assessmentItemTags\n  authorNames\n  clarificationsEnabled\n  perseusContent\n  listed\n  __typename\n}",
  "contentEditorEditExerciseProblems": "mutation contentEditorEditExerciseProblems($sha: String!, $input: EditExerciseProblemsInput!, $exerciseHasLintErrors: Boolean!) {\n  editExerciseProblems(\n    sha: $sha\n    input: $input\n    exerciseHasLintErrors: $exerciseHasLintErrors\n  ) {\n    exercise {\n      ...ExerciseRevision\n      __typename\n    }\n    createdItems {\n      ...AssessmentItemRevision\n      __typename\n    }\n    updatedItems {\n      ...AssessmentItemRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "contentEditorEditExerciseProperties": "mutation contentEditorEditExerciseProperties($sha: String!, $input: EditExercisePropertiesInput!) {\n  editExerciseProperties(sha: $sha, input: $input) {\n    exercise {\n      ...ExerciseRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "contentEditorEditProject": "mutation contentEditorEditProject($sha: String!, $input: EditProjectInput!) {\n  editProject(sha: $sha, input: $input) {\n    project {\n      ...ProjectRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ProjectRevision on ProjectRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  projectEval\n  authorName\n  code\n  codeFormat\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "contentEditorEditTalkthrough": "mutation contentEditorEditTalkthrough($sha: String!, $input: EditTalkthroughInput!) {\n  editTalkthrough(sha: $sha, input: $input) {\n    talkthrough {\n      ...TalkthroughRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TalkthroughRevision on TalkthroughRevision {\n  id\n  contentId\n  contentKind\n  slug\n  sha\n  listed\n  __typename\n}",
  "contentEditorEditVideo": "mutation contentEditorEditVideo($sha: String!, $input: EditVideoInput!) {\n  editVideo(sha: $sha, input: $input) {\n    video {\n      ...VideoRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment VideoRevision on VideoRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailCache\n  thumbnailData\n  alternateSlugs\n  assessmentItemTags\n  augmentedTranscript\n  authorNames\n  clarificationsEnabled\n  duration\n  kaUserLicense\n  keywords\n  youtubeId\n  listed\n  __typename\n}",
  "contentEditorMoveExerciseProblemType": "mutation contentEditorMoveExerciseProblemType($sourceContentId: String!, $targetContentId: String!, $problemTypeName: String!) {\n  moveExerciseProblemType(\n    sourceContentId: $sourceContentId\n    targetContentId: $targetContentId\n    problemTypeName: $problemTypeName\n  ) {\n    exercise {\n      ...ExerciseRevision\n      __typename\n    }\n    other {\n      ...ExerciseRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "contentEditorPreviewYouTubeThumbnail": "mutation contentEditorPreviewYouTubeThumbnail($objectName: String!, $titleText: String!) {\n  previewYouTubeThumbnail(\n    objectName: $objectName\n    titleText: $titleText\n    width: 160\n    height: 90\n  ) {\n    src\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorProcessThumbnailUpload": "mutation contentEditorProcessThumbnailUpload($objectName: String!) {\n  processThumbnailUpload(objectName: $objectName) {\n    gcsName\n    publicURL\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorSignURLForThumbnailUpload": "mutation contentEditorSignURLForThumbnailUpload($contentType: ThumbnailContentType!) {\n  signURLForThumbnailUpload(contentType: $contentType) {\n    result {\n      gcsName\n      objectName\n      publicURL\n      uploadURL\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorStartPublish": "mutation contentEditorStartPublish($title: String, $contentDescriptors: [String!]!) {\n  startPublishForContentDescriptors(\n    title: $title\n    contentDescriptors: $contentDescriptors\n  ) {\n    publishStatus {\n      id\n      queued\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorUploadContentImage": "mutation contentEditorUploadContentImage($imageBase64: String!) {\n  uploadContentImage(imageBase64: $imageBase64) {\n    url\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorUploadContentImageFromURL": "mutation contentEditorUploadContentImageFromURL($imageURL: String!) {\n  uploadContentImageFromURL(imageURL: $imageURL) {\n    url\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "CourseEditorAddContent": "mutation CourseEditorAddContent($input: AddContent!) {\n  mutated: addContent(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorAddLesson": "mutation CourseEditorAddLesson($input: AddLesson!) {\n  mutated: addLesson(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorAddQuiz": "mutation CourseEditorAddQuiz($input: AddQuiz!) {\n  mutated: addQuiz(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorAddUnit": "mutation CourseEditorAddUnit($input: AddUnit!) {\n  mutated: addUnit(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorAddUnitTest": "mutation CourseEditorAddUnitTest($input: AddUnitTest!) {\n  mutated: addUnitTest(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorDeleteItem": "mutation CourseEditorDeleteItem($input: DeleteItem!) {\n  mutated: deleteItem(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorDeleteUnitTest": "mutation CourseEditorDeleteUnitTest($input: DeleteUnitTest!) {\n  mutated: deleteUnitTest(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEditChangeLog": "mutation CourseEditorEditChangeLog($input: EditItemChangeLog!) {\n  mutated: editChangeLog(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEditCourseIntro": "mutation CourseEditorEditCourseIntro($input: EditCourseIntro!) {\n  mutated: editCourseIntro(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEditCourseSponsor": "mutation CourseEditorEditCourseSponsor($input: EditCourseSponsor!) {\n  mutated: editCourseSponsor(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEditIntent": "mutation CourseEditorEditIntent($input: EditItemIntent!) {\n  mutated: editIntent(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEditResources": "mutation CourseEditorEditResources($input: EditItemResources!) {\n  mutated: editResources(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorEnableMastery": "mutation CourseEditorEnableMastery($input: EnableMastery!) {\n  mutated: enableMastery(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorMoveItem": "mutation CourseEditorMoveItem($input: MoveItem!) {\n  mutated: moveItem(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorPublish": "mutation CourseEditorPublish($input: PublishCourse!) {\n  publishResult: publishCourse(inputData: $input) {\n    snapshotId\n    __typename\n  }\n}",
  "CourseEditorQueueCoursePublish": "mutation CourseEditorQueueCoursePublish($courseId: String!, $snapshotId: String!, $contentDescriptors: [String!]!, $title: String!) {\n  startPublishForCourse(\n    courseId: $courseId\n    snapshotId: $snapshotId\n    contentDescriptors: $contentDescriptors\n    title: $title\n  ) {\n    success\n    publishStatus {\n      id\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "CourseEditorSetProperty": "mutation CourseEditorSetProperty($input: EditProperty!) {\n  mutated: editProperty(inputData: $input) {\n    course {\n      ...CourseStructure\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseEditorSyncLinkedCourse": "mutation CourseEditorSyncLinkedCourse($input: SyncCourse!) {\n  course: syncLinkedCourse(inputData: $input) {\n    ...CourseStructure\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseMenuEditor_CreateCourseMenuRevision": "mutation CourseMenuEditor_CreateCourseMenuRevision($newCourseMenu: NewCourseMenuInput!) {\n  createCourseMenu(input: $newCourseMenu) {\n    courseMenu {\n      ...CourseMenuRevisionFields\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseMenuRevisionFields on CourseMenuRevision {\n  id\n  sha\n  groups {\n    identifier\n    translatedTitle\n    href\n    isNew\n    children {\n      identifier\n      translatedTitle\n      href\n      isNew\n      nonContentLink\n      loggedOutHref\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseMenuEditor_EditCourseMenuRevision": "mutation CourseMenuEditor_EditCourseMenuRevision($sha: String!, $updatedCourseMenu: EditCourseMenuInput!) {\n  editCourseMenu(sha: $sha, input: $updatedCourseMenu) {\n    courseMenu {\n      ...CourseMenuRevisionFields\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseMenuRevisionFields on CourseMenuRevision {\n  id\n  sha\n  groups {\n    identifier\n    translatedTitle\n    href\n    isNew\n    children {\n      identifier\n      translatedTitle\n      href\n      isNew\n      nonContentLink\n      loggedOutHref\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CreateAssessmentItemTag": "mutation CreateAssessmentItemTag($displayName: String!, $description: String!, $lessonId: String!) {\n  createAssessmentItemTag(\n    displayName: $displayName\n    description: $description\n    lessonId: $lessonId\n  ) {\n    assessmentItemTag {\n      ...AssessmentItemTagFields\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemTagFields on AssessmentItemTag {\n  editId: id\n  id: urlsafeTag\n  displayName\n  description\n  relatedContentId: lessonId\n  __typename\n}",
  "createAssignments": "mutation createAssignments($classDescriptors: [String!]!, $qualifiedContentDescriptorsList: [String!], $startDate: DateTime!, $dueDate: DateTime, $isDraft: Boolean, $studentKaids: [ID], $subjectSlug: String!, $questionSetType: ExerciseItemPickerStrategy, $title: String, $instructions: String, $configuredActivityInputs: String) {\n  createAssignments(\n    assignment: {classroomDescriptors: $classDescriptors, qualifiedContentDescriptorsList: $qualifiedContentDescriptorsList, startDate: $startDate, dueDate: $dueDate, isDraft: $isDraft, studentKaids: $studentKaids, subjectSlug: $subjectSlug, exerciseItemPickerStrategy: $questionSetType, title: $title, instructions: $instructions, configuredActivityInputs: $configuredActivityInputs}\n  ) {\n    assignments {\n      ...AssignmentInfoFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentInfoFragment on Assignment {\n  id\n  contents {\n    id\n    title\n    kind\n    __typename\n  }\n  studentList {\n    id\n    cacheId\n    name\n    __typename\n  }\n  students {\n    id\n    kaid\n    __typename\n  }\n  coach {\n    id\n    kaid\n    __typename\n  }\n  startDate\n  dueDate\n  isDraft\n  subjectSlug\n  title\n  instructions\n  __typename\n}",
  "createChildMutation": "mutation createChildMutation($birthdate: Date!, $username: String!, $password: String!, $nickname: String) {\n  createChild(\n    birthdate: $birthdate\n    username: $username\n    password: $password\n    nickname: $nickname\n  ) {\n    child {\n      id\n      nickname\n      __typename\n    }\n    error {\n      code\n      field\n      __typename\n    }\n    __typename\n  }\n}",
  "createClassroomMutation": "mutation createClassroomMutation($classroomName: String!, $subscribeToUpdates: Boolean) {\n  createClassroom(\n    classroomName: $classroomName\n    subscribeToUpdates: $subscribeToUpdates\n  ) {\n    classroom {\n      id\n      cacheId\n      descriptor\n      key\n      name\n      signupCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "CreateCourseMasteryAssignmentsMutation": "mutation CreateCourseMasteryAssignmentsMutation($classDescriptors: [String!]!, $studentKaids: [ID!]!, $topicId: String!, $dueDate: DateTime!) {\n  createCourseMasteryAssignments(\n    assignments: {classroomDescriptors: $classDescriptors, studentKaids: $studentKaids, courseId: $topicId, dueDate: $dueDate}\n  ) {\n    assignments {\n      id\n      createdDate\n      dueDate\n      __typename\n    }\n    __typename\n  }\n}",
  "createCurationPageRevisionMutation": "mutation createCurationPageRevisionMutation($input: NewCurationPageInput!) {\n  createCurationPage(input: $input) {\n    curationPage {\n      contentKind\n      id\n      title\n      slug\n      alternateSlugs\n      description\n      listed\n      sponsored\n      showCurationModule\n      lowerToc\n      customDescriptionTag\n      customTitleTag\n      curationData\n      sha\n      hasUnpublishedChanges\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createCustomBadge": "mutation createCustomBadge($input: CreateCustomBadgeInput) {\n  createCustomBadge(input: $input) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createDistrict": "mutation createDistrict($name: String!, $offerings: [Offering!]!, $rosterSource: RosterSource!, $isTest: Boolean!, $rosterID: String!, $nweaID: String!, $ncesID: String, $sendEmails: Boolean!, $goLiveDate: Date!, $schoolYearDates: DistrictSchoolYearInput!, $region: String) {\n  createDistrict(\n    name: $name\n    offerings: $offerings\n    isTest: $isTest\n    rosterID: $rosterID\n    rosterSource: $rosterSource\n    nweaID: $nweaID\n    ncesID: $ncesID\n    sendTeacherActivationEmails: $sendEmails\n    goLiveDate: $goLiveDate\n    schoolYearDates: $schoolYearDates\n    region: $region\n  ) {\n    error {\n      code\n      __typename\n    }\n    district {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "createGoogleClassroom": "mutation createGoogleClassroom($googleClassId: String!, $googleClassName: String!, $googleClassUrl: String!, $googleClassStudents: [GoogleClassStudent]!, $khanClassName: String) {\n  createGoogleClassroom(\n    googleClassId: $googleClassId\n    googleClassName: $googleClassName\n    googleClassUrl: $googleClassUrl\n    googleClassStudents: $googleClassStudents\n    khanClassName: $khanClassName\n  ) {\n    classroom {\n      ...ClassroomData\n      __typename\n    }\n    linkedStudents {\n      ...LinkedStudentData\n      __typename\n    }\n    unsuccessfullyLinkedStudents {\n      ...UnlinkedStudentData\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ClassroomData on StudentList {\n  cacheId\n  id\n  descriptor\n  name\n  key\n  signupCode\n  googleClassId\n  googleClassName\n  googleClassUrl\n  __typename\n}\n\nfragment LinkedStudentData on LinkedGoogleClassStudent {\n  email\n  __typename\n}\n\nfragment UnlinkedStudentData on UnsuccessfullyLinkedGoogleClassStudent {\n  email\n  nickname\n  error {\n    code\n    __typename\n  }\n  __typename\n}",
  "createInitialClassroom": "mutation createInitialClassroom($classroomName: String!) {\n  createClassroom(classroomName: $classroomName, autoGenerated: true) {\n    classroom {\n      id\n      cacheId\n      descriptor\n      __typename\n    }\n    __typename\n  }\n}",
  "createOffensiveTerm": "mutation createOffensiveTerm($term: String!, $kaLocale: String, $isAiGuide: Boolean) {\n  createNewOffensiveTerm(term: $term, kaLocale: $kaLocale, isAiGuide: $isAiGuide) {\n    offensiveTerm {\n      id\n      term\n      __typename\n    }\n    __typename\n  }\n}",
  "createOfficialClarification": "mutation createOfficialClarification($clarification: CreateOfficialClarificationInput!) {\n  createOfficialClarification(clarification: $clarification) {\n    newClarification {\n      ...clarificationFragmentWithReporter\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createProgram": "mutation createProgram($title: String!, $userAuthoredContentType: UserAuthoredContentType!, $revision: ProgramRevisionInput!, $curationNodeSlug: String!) {\n  createProgram(\n    title: $title\n    userAuthoredContentType: $userAuthoredContentType\n    revision: $revision\n    curationNodeSlug: $curationNodeSlug\n  ) {\n    program {\n      ...Program\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createStudentAccounts": "mutation createStudentAccounts($studentListKey: String, $students: [CreateStudentsInput]!) {\n  createStudents(students: $students, studentListKey: $studentListKey) {\n    students {\n      id\n      username\n      __typename\n    }\n    errors {\n      code\n      username\n      __typename\n    }\n    __typename\n  }\n}",
  "CreateTeamPageEntryMutation": "mutation CreateTeamPageEntryMutation($content: TeamPageEntryInput!, $entryType: TeamPageEntryType!) {\n  createTeamPageEntry(content: $content, entryType: $entryType) {\n    entry {\n      ...entry\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment entry on TeamPageEntryForEditing {\n  id\n  isPet\n  isIntern\n  isAlum\n  hasPendingChanges\n  draftContent {\n    id\n    name\n    altNames\n    startDate\n    isAlum\n    mainPhotoURL\n    hoverPhotoURL\n    title\n    bio\n    contactLinks {\n      type\n      editValue\n      editPrefix\n      url\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "DeactivateUDIMutation": "mutation DeactivateUDIMutation($uuid: ID!) {\n  deactivateUserDistrictInfo: deactivateUserDistrictInfoV2(uuid: $uuid) {\n    exists\n    canDeactivate\n    wasDeactivated\n    kaid\n    __typename\n  }\n}",
  "deleteAllContentPermissions": "mutation deleteAllContentPermissions($kaid: String!) {\n  deleteAllContentPermissions(kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DeleteAssessmentItemTag": "mutation DeleteAssessmentItemTag($id: String!) {\n  deleteAssessmentItemTag(id: $id) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteClassroomMutation": "mutation deleteClassroomMutation($classroomId: String!) {\n  deleteClassroom(classroomId: $classroomId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteCleverTeacherRequest": "mutation deleteCleverTeacherRequest($studentIdentifier: ID!) {\n  deleteCleverTeacherRequest(studentIdentifier: $studentIdentifier) {\n    coach: user {\n      id\n      kaid\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteCoachMutation": "mutation deleteCoachMutation($coachKaid: ID!, $studentKaid: String) {\n  removeCoach(coachKaid: $coachKaid, studentKaid: $studentKaid) {\n    wasSuccessful\n    __typename\n  }\n}",
  "deleteCoachRequest": "mutation deleteCoachRequest($studentEmail: String!) {\n  deleteCoachRequest(studentEmail: $studentEmail) {\n    coach: user {\n      id\n      kaid\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteContentPermission": "mutation deleteContentPermission($userKaid: String!, $permissionId: String!) {\n  deleteContentPermission(userKaid: $userKaid, contentPermissionId: $permissionId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteCustomRedirect": "mutation deleteCustomRedirect($from: String!) {\n  deleteCustomRedirect(redirectFrom: $from) {\n    error {\n      code\n      __typename\n    }\n    deletedRedirect {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteDonationAsk": "mutation deleteDonationAsk($id: String!) {\n  deleteDonationAsk(id: $id) {\n    success\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DeleteDub": "mutation DeleteDub($input: String!) {\n  deleteDub(sourceYouTubeId: $input) {\n    error {\n      code\n      debugMessage\n      dubInsertOrUpdateEntry {\n        sourceYouTubeId\n        dubYouTubeId\n        contentId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteEmailInvitation": "mutation deleteEmailInvitation($studentEmail: String!) {\n  deleteEmailInvite(studentEmail: $studentEmail) {\n    coach: user {\n      id\n      kaid\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteEmailInvite": "mutation deleteEmailInvite($childEmail: String!) {\n  deleteEmailInvite(studentEmail: $childEmail) {\n    user {\n      id\n      childInvitations {\n        invitationType\n        email\n        requestKey\n        nickname\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DeleteFlagMutation": "mutation DeleteFlagMutation($flagName: String!) {\n  removeFlag(name: $flagName) {\n    wasSuccess\n    __typename\n  }\n}",
  "deleteOffensiveTerm": "mutation deleteOffensiveTerm($id: ID!) {\n  deleteOffensiveTerm(id: $id) {\n    success\n    __typename\n  }\n}",
  "deleteOfficialClarification": "mutation deleteOfficialClarification($id: ID!) {\n  deleteOfficialClarification(id: $id) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteParentRequest": "mutation deleteParentRequest($childEmail: String!) {\n  deleteCoachRequest(studentEmail: $childEmail) {\n    user {\n      id\n      childInvitations {\n        invitationType\n        email\n        requestKey\n        nickname\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DeletePostMutation": "mutation DeletePostMutation($postKey: String!) {\n  hideFeedback(feedbackKey: $postKey) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteProgram": "mutation deleteProgram($programID: ID!) {\n  deleteProgram(programID: $programID) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "DevadminCreateAuthor": "mutation DevadminCreateAuthor($name: String!) {\n  createAuthorOption(name: $name) {\n    author {\n      id\n      name\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DevadminDeleteAuthor": "mutation DevadminDeleteAuthor($id: ID!) {\n  deleteAuthorOption(id: $id) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminTriggerAlarm": "mutation devadminTriggerAlarm($level: AlarmLevel!, $subject: String!, $contents: String) {\n  devadminTriggerAlarmV2(\n    level: $level\n    subjectLine: $subject\n    contents: $contents\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "disableAIGuide": "mutation disableAIGuide($kaid: String!) {\n  disableAIGuide(kaid: $kaid, reason: MODERATION) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "disconnectClever": "mutation disconnectClever($kaid: String!) {\n  devadminDisconnectClever(kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DismissItemMutation": "mutation DismissItemMutation($itemName: String!, $expires: DateTime) {\n  dismissItem(itemName: $itemName, expires: $expires) {\n    error {\n      code\n      __typename\n    }\n    dismissedItem {\n      id\n      isDismissed\n      __typename\n    }\n    __typename\n  }\n}",
  "districtRoster": "mutation districtRoster($districtID: String!, $force: Boolean!) {\n  rosterDistrict(districtID: $districtID, force: $force) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DoGeneralAICompletion": "mutation DoGeneralAICompletion($prompt: String!, $model: String, $temperature: Float, $maxTokens: Int, $stop: [String!]) {\n  doGeneralAICompletion(\n    input: {prompt: $prompt, model: $model, temperature: $temperature, maxTokens: $maxTokens, stop: $stop}\n  ) {\n    completion {\n      text\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "editClassroomSatStatusMutation": "mutation editClassroomSatStatusMutation($classDescriptor: String!, $includeSat: Boolean!, $fromUpsell: Boolean) {\n  setClassroomSatStatus(\n    classroomDescriptor: $classDescriptor\n    includeSat: $includeSat\n    fromUpsell: $fromUpsell\n  ) {\n    classroom {\n      id\n      cacheId\n      includesSat\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "EditModifyCoachesCapability": "mutation EditModifyCoachesCapability($targetKaid: String!, $allow: Boolean!) {\n  setModifyCoachesCapability(targetKaid: $targetKaid, allow: $allow) {\n    target {\n      id\n      canModifyCoaches\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "EditNotationReadAloudsForAssessmentItem": "mutation EditNotationReadAloudsForAssessmentItem($assessmentItemID: ID!, $exerciseID: ID!, $notationMap: String!) {\n  editNotationReadAloudsForAssessmentItem(\n    assessmentItemID: $assessmentItemID\n    exerciseID: $exerciseID\n    notationMap: $notationMap\n  ) {\n    updatedNotations {\n      assessmentItemId\n      domainId\n      exerciseId\n      exerciseUrl\n      id\n      original\n      readable\n      __typename\n    }\n    deletedNotations\n    error {\n      code\n      message\n      __typename\n    }\n    __typename\n  }\n}",
  "EnableAIGuide": "mutation EnableAIGuide($kaid: String!) {\n  enableAIGuide(kaid: $kaid) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "encodeAppleLoginState": "mutation encodeAppleLoginState($action: Action!, $continueUrl: String!, $role: UserRole, $signupCodes: [String]) {\n  encodeAppleLoginState(\n    action: $action\n    continueUrl: $continueUrl\n    role: $role\n    signupCodes: $signupCodes\n  ) {\n    redirectUri\n    state\n    __typename\n  }\n}",
  "endMasteryTowerSession": "mutation endMasteryTowerSession($classDescriptor: String!) {\n  endMasteryTowerSession(classDescriptor: $classDescriptor) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "enrollInAIGuide": "mutation enrollInAIGuide($kaid: String!, $enrollmentGroup: AIGuideEnrollmentGroup!) {\n  enrollInAIGuide(kaid: $kaid, enrollmentGroup: $enrollmentGroup) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "enrollMultipleInAIGuide": "mutation enrollMultipleInAIGuide($kaids: [String!], $enrollmentGroup: AIGuideEnrollmentGroup!, $description: String!) {\n  enrollMultipleInAIGuide(\n    kaids: $kaids\n    enrollmentGroup: $enrollmentGroup\n    description: $description\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "exchangeGoogleCodeForIDTokenMutation": "mutation exchangeGoogleCodeForIDTokenMutation($code: String!, $redirectURI: String!) {\n  exchangeGoogleCodeForIDToken(code: $code, redirectURI: $redirectURI) {\n    idToken\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "FlagPostMutation": "mutation FlagPostMutation($flag: String!, $entityKey: String!, $justification: String) {\n  flagEntity(flag: $flag, entityKey: $entityKey, justification: $justification) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "forgotPassword": "mutation forgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    error {\n      code\n      __typename\n    }\n    devOnlyLink\n    __typename\n  }\n}",
  "ForgotPasswordMutation": "mutation ForgotPasswordMutation($email: String!) {\n  forgotPassword(email: $email) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "forgotPasswordSupport": "mutation forgotPasswordSupport($kaid: String!, $email: String!) {\n  forgotPasswordSupport(kaid: $kaid, email: $email) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "formalTeacherStatusMutation": "mutation formalTeacherStatusMutation($tosForFormalTeacherStatus: Boolean) {\n  setSettings(tosForFormalTeacherStatus: $tosForFormalTeacherStatus) {\n    user {\n      id\n      tosForFormalTeacherStatus\n      __typename\n    }\n    __typename\n  }\n}",
  "GetEmailFromToken": "mutation GetEmailFromToken($token: String!) {\n  getEmailFromLinkAccountToken(token: $token) {\n    email\n    isEmancipated\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "getOrCreateExerciseTask": "mutation getOrCreateExerciseTask($input: GetOrCreateExerciseTaskInput!) {\n  getOrCreateExerciseTask(input: $input) {\n    result {\n      error {\n        code\n        debugMessage\n        __typename\n      }\n      userTask {\n        cards {\n          done\n          cardType\n          ... on ProblemCard {\n            exerciseName\n            problemType\n            __typename\n          }\n          __typename\n        }\n        includeSkipButton\n        task {\n          id\n          key\n          pointBounty\n          pointsEarned\n          taskType\n          completionCriteria {\n            name\n            __typename\n          }\n          ... on MasteryChallengeTask {\n            expirationTime\n            promotionCriteria {\n              name\n              value\n              __typename\n            }\n            reservedItems\n            reservedItemsCompleted\n            taskAttemptHistory {\n              correct\n              timeDone\n              seenHint\n              itemId\n              __typename\n            }\n            __typename\n          }\n          ... on SubjectChallengeTask {\n            contentKey\n            promotionCriteria {\n              name\n              value\n              __typename\n            }\n            reservedItems\n            reservedItemsCompleted\n            taskAttemptHistory {\n              correct\n              timeDone\n              seenHint\n              itemId\n              __typename\n            }\n            __typename\n          }\n          ... on TopicQuizTask {\n            contentKey\n            promotionCriteria {\n              name\n              value\n              __typename\n            }\n            reservedItems\n            reservedItemsCompleted\n            taskAttemptHistory {\n              correct\n              timeDone\n              seenHint\n              itemId\n              __typename\n            }\n            __typename\n          }\n          ... on TopicUnitTestTask {\n            contentKey\n            promotionCriteria {\n              name\n              value\n              __typename\n            }\n            reservedItems\n            reservedItemsCompleted\n            taskAttemptHistory {\n              correct\n              timeDone\n              seenHint\n              itemId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        userExercises {\n          ...exerciseTaskUserExerciseFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment exerciseTaskUserExerciseFields on UserExercise {\n  exerciseModel: exercise {\n    id\n    assessmentItemCount: numAssessmentItems\n    displayName\n    isQuiz\n    isSkillCheck\n    name\n    nodeSlug\n    progressKey\n    translatedDisplayName\n    relatedContent {\n      id\n      contentKind\n      kind\n      thumbnailUrl\n      translatedTitle\n      topicPaths {\n        path {\n          id\n          kind\n          slug\n          __typename\n        }\n        __typename\n      }\n      ... on Article {\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        __typename\n      }\n      ... on Video {\n        duration\n        imageUrl\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        translatedYoutubeId\n        __typename\n      }\n      __typename\n    }\n    relatedVideos {\n      contentKind\n      duration\n      id\n      imageUrl\n      kaUrl\n      kind\n      nodeSlug\n      progressKey\n      relativeUrl\n      slug\n      thumbnailUrl\n      translatedDescription\n      translatedTitle\n      translatedYoutubeId\n      __typename\n    }\n    problemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    translatedProblemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    __typename\n  }\n  exercise: exerciseName\n  fpmMasteryLevel\n  lastAttemptNumber\n  lastCountHints\n  lastDone\n  lastMasteryUpdate\n  longestStreak\n  maximumExerciseProgressDt: maximumExerciseProgressDate\n  streak\n  totalCorrect\n  totalDone\n  __typename\n}",
  "getOrCreatePracticeTask": "mutation getOrCreatePracticeTask($input: GetOrCreatePracticeTaskInput!) {\n  getOrCreatePracticeTask(input: $input) {\n    result {\n      error {\n        code\n        debugMessage\n        __typename\n      }\n      userTask {\n        ...userTaskFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment userExerciseFields on UserExercise {\n  exerciseModel: exercise {\n    id\n    assessmentItemCount: numAssessmentItems\n    displayName\n    isQuiz\n    isSkillCheck\n    name\n    nodeSlug\n    progressKey\n    translatedDisplayName\n    relatedContent {\n      id\n      contentKind\n      kind\n      thumbnailUrl\n      translatedTitle\n      topicPaths {\n        path {\n          id\n          kind\n          slug\n          __typename\n        }\n        __typename\n      }\n      ... on Article {\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        __typename\n      }\n      ... on Video {\n        duration\n        imageUrl\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        translatedYoutubeId\n        __typename\n      }\n      __typename\n    }\n    relatedVideos {\n      contentKind\n      duration\n      id\n      imageUrl\n      kaUrl\n      kind\n      nodeSlug\n      progressKey\n      relativeUrl\n      slug\n      thumbnailUrl\n      translatedDescription\n      translatedTitle\n      translatedYoutubeId\n      __typename\n    }\n    problemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    translatedProblemTypes {\n      items {\n        id\n        live\n        sha\n        __typename\n      }\n      name\n      relatedVideos\n      __typename\n    }\n    __typename\n  }\n  exercise: exerciseName\n  fpmMasteryLevel\n  lastAttemptNumber\n  lastCountHints\n  lastDone\n  lastMasteryUpdate\n  longestStreak\n  maximumExerciseProgressDt: maximumExerciseProgressDate\n  streak\n  totalCorrect\n  totalDone\n  __typename\n}\n\nfragment userTaskFields on PracticeUserTask {\n  cards {\n    done\n    cardType\n    ... on ProblemCard {\n      exerciseName\n      problemType\n      __typename\n    }\n    __typename\n  }\n  includeSkipButton\n  task {\n    contentKey\n    exerciseLength\n    id\n    key\n    pointBounty\n    pointsEarned\n    slug\n    taskType\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    completionCriteria {\n      name\n      __typename\n    }\n    promotionCriteria {\n      name\n      value\n      __typename\n    }\n    reservedItems\n    reservedItemsCompleted\n    taskAttemptHistory {\n      correct\n      timeDone\n      seenHint\n      itemId\n      __typename\n    }\n    __typename\n  }\n  userExercises {\n    ...userExerciseFields\n    __typename\n  }\n  __typename\n}",
  "GetOrCreateReadAloud": "mutation GetOrCreateReadAloud($assessmentItemID: ID!, $exerciseID: ID!, $perseusSerializedState: String) {\n  getOrCreateReadAloud(\n    assessmentItemID: $assessmentItemID\n    exerciseID: $exerciseID\n    perseusSerializedState: $perseusSerializedState\n  ) {\n    readAloud\n    error {\n      code\n      message\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_completeOnboardingMutation": "mutation gtp_completeOnboardingMutation($examId: String!) {\n  completeOnboarding(examId: $examId) {\n    tpud {\n      id\n      onboardingState\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_createNewStageMutation": "mutation gtp_createNewStageMutation($examId: String!, $stageIndex: Int!) {\n  createNewStage(examId: $examId, stageIndex: $stageIndex) {\n    checkpoints {\n      ...gtp_checkpointFragment\n      __typename\n    }\n    tpud {\n      id\n      currentStage\n      currentCheckpoint\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_deleteDataMutation": "mutation gtp_deleteDataMutation($examGroupId: String!) {\n  deleteData(examGroupId: $examGroupId) {\n    success\n    __typename\n  }\n}",
  "gtp_getOrCreateTestPrepTaskByDescriptor": "mutation gtp_getOrCreateTestPrepTaskByDescriptor($examId: String!, $taskType: String!, $exerciseName: String!, $skillId: String, $level: String) {\n  getOrCreateTestPrepTaskByDescriptor(\n    examId: $examId\n    taskType: $taskType\n    exerciseName: $exerciseName\n    skillId: $skillId\n    level: $level\n  ) {\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    practiceTest {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_resetPracticeTestMutation": "mutation gtp_resetPracticeTestMutation($examId: String!, $taskId: String!) {\n  resetPracticeTest(examId: $examId, taskId: $taskId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    practiceTests {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    tpud {\n      ...gtp_tpudFragment\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_startExpressTask": "mutation gtp_startExpressTask($taskType: String!, $taskId: ID!) {\n  startTask(taskType: $taskType, taskId: $taskId) {\n    descriptorList {\n      id\n      checkpointStr\n      ...gtp_expressDescriptorsFragment\n      __typename\n    }\n    practiceTest {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    tpud {\n      id\n      diagnosticsStates {\n        type\n        state\n        __typename\n      }\n      hasSeededSkillLevels\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_startExtendedTimeMode": "mutation gtp_startExtendedTimeMode($taskType: String!, $taskId: ID!) {\n  startExtendedTimeMode(taskType: $taskType, taskId: $taskId) {\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_startStage": "mutation gtp_startStage($examId: String!) {\n  startStage(examId: $examId) {\n    checkpoints {\n      ...gtp_checkpointFragment\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_startTask": "mutation gtp_startTask($taskType: String!, $taskId: ID!) {\n  startTask(taskType: $taskType, taskId: $taskId) {\n    descriptorList {\n      id\n      checkpointStr\n      ...gtp_descriptorsFragment\n      __typename\n    }\n    practiceTest {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    tpud {\n      id\n      hasSeededSkillLevels\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_submitExpressTask": "mutation gtp_submitExpressTask($taskId: ID!, $taskType: String!, $newTaskState: JSONString!, $newTaskStateHash: ID!, $prevTaskStateHash: ID) {\n  submitTask(\n    taskId: $taskId\n    taskType: $taskType\n    newTaskState: $newTaskState\n    newTaskStateHash: $newTaskStateHash\n    prevTaskStateHash: $prevTaskStateHash\n  ) {\n    checkpoints {\n      ...gtp_checkpointFragment\n      __typename\n    }\n    descriptorList {\n      id\n      checkpointStr\n      ...gtp_expressDescriptorsFragment\n      __typename\n    }\n    practiceTest {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    tpud {\n      ...gtp_tpudFragment\n      __typename\n    }\n    egud {\n      ...gtp_egudFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_egudFragment on ExamGroupUserData {\n  id\n  practiceDaysInfo {\n    day\n    hour\n    length\n    minute\n    __typename\n  }\n  selectedCutoffIdentifiers\n  selectedExams\n  initialSelectedExams\n  dailyActivityHistory {\n    date\n    activityHistory {\n      examsCompleted\n      problemsDone\n      secondsSpent\n      status\n      cta {\n        type\n        minutes\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  extendedTimeMultiplier\n  __typename\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_submitTask": "mutation gtp_submitTask($taskId: ID!, $taskType: String!, $newTaskState: JSONString!, $newTaskStateHash: ID!, $prevTaskStateHash: ID) {\n  submitTask(\n    taskId: $taskId\n    taskType: $taskType\n    newTaskState: $newTaskState\n    newTaskStateHash: $newTaskStateHash\n    prevTaskStateHash: $prevTaskStateHash\n  ) {\n    checkpoints {\n      ...gtp_checkpointFragment\n      __typename\n    }\n    descriptorList {\n      id\n      checkpointStr\n      ...gtp_descriptorsFragment\n      __typename\n    }\n    practiceTest {\n      ...gtp_practiceTestFragment\n      __typename\n    }\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    tpud {\n      ...gtp_tpudFragment\n      __typename\n    }\n    egud {\n      ...gtp_egudFragment\n      __typename\n    }\n    essayScores {\n      ...gtp_essayScoresFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_egudFragment on ExamGroupUserData {\n  id\n  practiceDaysInfo {\n    day\n    hour\n    length\n    minute\n    __typename\n  }\n  selectedCutoffIdentifiers\n  selectedExams\n  initialSelectedExams\n  dailyActivityHistory {\n    date\n    activityHistory {\n      examsCompleted\n      problemsDone\n      secondsSpent\n      status\n      cta {\n        type\n        minutes\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  extendedTimeMultiplier\n  __typename\n}\n\nfragment gtp_essayScoresFragment on EssayScores {\n  areas {\n    translatedTitle\n    essays {\n      examCompletionDate\n      score\n      maxScore\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_updateExamGroupSettingsV2": "mutation gtp_updateExamGroupSettingsV2($examGroupId: String!, $practiceDaysInfo: [PracticeDaysInput!], $selectedCutoffs: [String!], $selectedExams: [String!], $extendedTimeMultiplier: Float, $exams: [ExamSettingsInput], $enableGtpSetupPage: Boolean) {\n  updateExamGroupSettings(\n    examGroupId: $examGroupId\n    practiceDaysInfo: $practiceDaysInfo\n    selectedCutoffs: $selectedCutoffs\n    selectedExams: $selectedExams\n    extendedTimeMultiplier: $extendedTimeMultiplier\n    exams: $exams\n    enableGtpSetupPage: $enableGtpSetupPage\n  ) {\n    egud {\n      ...gtp_egudFragment\n      __typename\n    }\n    exams {\n      id\n      examId\n      checkpoints {\n        ...gtp_checkpointFragment\n        __typename\n      }\n      drillStage {\n        id\n        numCreditedTasks\n        creditedTaskIds\n        __typename\n      }\n      tpud {\n        ...gtp_tpudFragment\n        __typename\n      }\n      practiceTests {\n        ...gtp_practiceTestFragment\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_egudFragment on ExamGroupUserData {\n  id\n  practiceDaysInfo {\n    day\n    hour\n    length\n    minute\n    __typename\n  }\n  selectedCutoffIdentifiers\n  selectedExams\n  initialSelectedExams\n  dailyActivityHistory {\n    date\n    activityHistory {\n      examsCompleted\n      problemsDone\n      secondsSpent\n      status\n      cta {\n        type\n        minutes\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  extendedTimeMultiplier\n  __typename\n}",
  "gtp_updateSubscriptionByToken": "mutation gtp_updateSubscriptionByToken($token: String!, $subscribe: Boolean!) {\n  updateSubscriptionByToken(token: $token, subscribe: $subscribe) {\n    success\n    __typename\n  }\n}",
  "gtp_updateTask": "mutation gtp_updateTask($taskId: ID!, $taskType: String!, $newTaskState: JSONString!, $newTaskStateHash: ID!, $prevTaskStateHash: ID) {\n  updateTask(\n    taskId: $taskId\n    taskType: $taskType\n    newTaskState: $newTaskState\n    newTaskStateHash: $newTaskStateHash\n    prevTaskStateHash: $prevTaskStateHash\n  ) {\n    task {\n      ...gtp_taskFragment\n      __typename\n    }\n    egud {\n      ...gtp_egudFragment\n      __typename\n    }\n    statusCode\n    tpud {\n      ...gtp_tpudFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment gtp_egudFragment on ExamGroupUserData {\n  id\n  practiceDaysInfo {\n    day\n    hour\n    length\n    minute\n    __typename\n  }\n  selectedCutoffIdentifiers\n  selectedExams\n  initialSelectedExams\n  dailyActivityHistory {\n    date\n    activityHistory {\n      examsCompleted\n      problemsDone\n      secondsSpent\n      status\n      cta {\n        type\n        minutes\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  extendedTimeMultiplier\n  __typename\n}\n\nfragment gtp_taskFragment on Task {\n  id\n  kaid\n  examId\n  taskType\n  secondsTaken\n  taskDurationSeconds\n  translatedTitle\n  creationDatetime\n  startDatetime\n  completed\n  receivedCredit\n  completionDatetime\n  stage\n  checkpoint\n  taskContent {\n    concepts {\n      item {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      questions {\n        conceptId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    id\n    itemData\n    itemShapeType\n    skills {\n      item {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      questions {\n        areaId\n        skillId\n        skillContentId\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    gradingMetadata {\n      instructions\n      promptTitle\n      responseTitle\n      minScore\n      maxScore\n      rubric {\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      scoreExamples {\n        score\n        article {\n          id\n          perseusContent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  taskState\n  taskStateHash\n  exerciseName\n  itemIds\n  areaId\n  areaTitle\n  ... on SkillTask {\n    skillId\n    skill {\n      description\n      __typename\n    }\n    level\n    incomingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    outgoingSkillLevelLabel {\n      label\n      skillLevel\n      __typename\n    }\n    __typename\n  }\n  ... on TmsTask {\n    directions\n    extendedTaskState\n    startExtendedTimeDt\n    __typename\n  }\n  ... on TestSectionTask {\n    directions\n    __typename\n  }\n  ... on ExpressDiagnosticTask {\n    directions\n    skillLevels {\n      skillName\n      minLevel\n      maxLevel\n      level\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "hideProgramEverywhere": "mutation hideProgramEverywhere($programID: ID!, $hide: Boolean!) {\n  hideProgramEverywhere(programID: $programID, hide: $hide) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "hideProgramFromHotlist": "mutation hideProgramFromHotlist($programID: ID!, $hide: Boolean!) {\n  hideProgramFromHotlist(programID: $programID, hide: $hide) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "impersonateUserMutation": "mutation impersonateUserMutation($kaid: String!, $reason: String!) {\n  impersonateUser(kaid: $kaid, reason: $reason) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "InsertOrUpdateDub": "mutation InsertOrUpdateDub($input: DubInsertOrUpdateInputEntry!) {\n  insertOrUpdateDub(dubInputEntry: $input) {\n    error {\n      code\n      debugMessage\n      dubInsertOrUpdateEntry {\n        sourceYouTubeId\n        dubYouTubeId\n        contentId\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "InviteChildToJoinKAMutation": "mutation InviteChildToJoinKAMutation($childEmail: String!) {\n  inviteChild(childEmail: $childEmail) {\n    childInvite {\n      invitationType\n      email\n      requestKey\n      nickname\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "joinAIGuideWaitlist": "mutation joinAIGuideWaitlist {\n  joinAIGuideWaitlist {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n",
  "joinGrassrootsClassMutation": "mutation joinGrassrootsClassMutation($classCode: String!) {\n  joinStudent(classCode: $classCode) {\n    isDistrictSynced\n    errors\n    __typename\n  }\n}",
  "joinStudentMutation": "mutation joinStudentMutation($classCode: String!) {\n  joinStudent(classCode: $classCode) {\n    errors\n    __typename\n  }\n}",
  "joinStudentMutationForModal": "mutation joinStudentMutationForModal($classCode: String!) {\n  joinStudent(classCode: $classCode) {\n    isDistrictSynced\n    __typename\n  }\n}\n",
  "khanLibraryAddCourseToFolder": "mutation khanLibraryAddCourseToFolder($folderId: String!, $courseId: String!) {\n  addCourseToFolder(folderId: $folderId, courseId: $courseId) {\n    folder {\n      ...Folder\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BaseFolder on Folder {\n  id\n  name\n  kaLocale\n  isEmpty\n  __typename\n}\n\nfragment Folder on Folder {\n  ...BaseFolder\n  courses {\n    ...PublishedCourseRevisionFragment\n    __typename\n  }\n  __typename\n}\n\nfragment PublishedCourseRevisionFragment on CourseRevision {\n  id\n  contentId\n  kaLocale\n  title\n  importable\n  allowedExerciseTypes\n  hasUnpublishedChanges\n  published {\n    id\n    slug\n    title\n    listed\n    masteryEnabled\n    domainSlug\n    domainId: parentTopicId\n    courseSnapshotId\n    __typename\n  }\n  __typename\n}",
  "khanLibraryCopyCourse": "mutation khanLibraryCopyCourse($input: CopyCourse!) {\n  course: copyCourse(inputData: $input) {\n    ...CourseRevisionStructure\n    __typename\n  }\n}\n\nfragment CourseRevisionStructure on CourseRevision {\n  id\n  contentId\n  operationId\n  title\n  allowedExerciseTypes\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          items {\n            cacheId\n            ... on CourseRevisionContent {\n              type\n              id\n              contentKind\n              contentId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "khanLibraryCreateCourse": "mutation khanLibraryCreateCourse($input: CreateDefaultCourse!) {\n  createDefaultCourse(inputData: $input) {\n    course: courseRevision {\n      ...CourseRevisionStructure\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseRevisionStructure on CourseRevision {\n  id\n  contentId\n  operationId\n  title\n  allowedExerciseTypes\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          items {\n            cacheId\n            ... on CourseRevisionContent {\n              type\n              id\n              contentKind\n              contentId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "khanLibraryEditDomain": "mutation khanLibraryEditDomain($sha: String!, $input: EditDomainInput!) {\n  editDomain(sha: $sha, input: $input) {\n    domain {\n      ...khanLibraryDomainRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment khanLibraryDomainRevision on DomainRevision {\n  id\n  sha\n  childrenDescriptors {\n    canonicalId\n    contentId\n    kind\n    __typename\n  }\n  __typename\n}",
  "khanLibraryLinkCourse": "mutation khanLibraryLinkCourse($input: CreateLinkedCourse!) {\n  course: createLinkedCourse(inputData: $input) {\n    ...CourseRevisionStructure\n    __typename\n  }\n}\n\nfragment CourseRevisionStructure on CourseRevision {\n  id\n  contentId\n  operationId\n  title\n  allowedExerciseTypes\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          items {\n            cacheId\n            ... on CourseRevisionContent {\n              type\n              id\n              contentKind\n              contentId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "learnStormCampaignEnroll": "mutation learnStormCampaignEnroll($campaignId: ID!) {\n  learnStormEnroll(campaignId: $campaignId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "learnStormCampaignUpdate": "mutation learnStormCampaignUpdate($id: ID!, $live: Boolean!, $eligibleLocale: String!, $eligibleCountryCodes: [String]!, $campaignName: String!, $promoSite: String!, $growthMindsetUrl: String!, $certificateUrl: String!, $signupStartDate: DateTime!, $startDate: DateTime!, $stopDate: DateTime!, $bannerEnrollmentHeader: String!, $bannerEnrollmentCopy: String!, $bannerBeforeHeader: String!, $bannerBeforeCopy: String!, $bannerDuringHeader: String!, $bannerDuringCopy: String!, $bannerAfterHeader: String!, $bannerAfterCopy: String!, $shutdownDate: DateTime!, $bannerVisible: Boolean!) {\n  learnStormCampaignUpdate(\n    campaign: {id: $id, live: $live, eligibleKALocale: $eligibleLocale, eligibleCountryCodes: $eligibleCountryCodes, campaignName: $campaignName, promoSite: $promoSite, growthMindsetURL: $growthMindsetUrl, certificateURL: $certificateUrl, signupStartDate: $signupStartDate, startDate: $startDate, stopDate: $stopDate, shutdownDate: $shutdownDate, bannerEnrollmentHeader: $bannerEnrollmentHeader, bannerEnrollmentCopy: $bannerEnrollmentCopy, bannerBeforeHeader: $bannerBeforeHeader, bannerBeforeCopy: $bannerBeforeCopy, bannerDuringHeader: $bannerDuringHeader, bannerDuringCopy: $bannerDuringCopy, bannerAfterHeader: $bannerAfterHeader, bannerAfterCopy: $bannerAfterCopy, bannerVisible: $bannerVisible}\n  ) {\n    campaign {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "learnStormEnroll": "mutation learnStormEnroll($campaignId: ID!) {\n  learnStormEnroll(campaignId: $campaignId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "linkAppleAccountMutation": "mutation linkAppleAccountMutation($authCode: String!, $state: String!) {\n  linkAppleAccount(authCode: $authCode, state: $state) {\n    error {\n      code\n      accessToken\n      __typename\n    }\n    user {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "linkCleverAccountV2Mutation": "mutation linkCleverAccountV2Mutation($transferToken: String!) {\n  linkCleverAccountV2(transferToken: $transferToken) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "linkCurrentUserToUDIByUUIDMutation": "mutation linkCurrentUserToUDIByUUIDMutation($uuid: ID!, $loginType: String!, $method: UserDistrictInfoActivationMethod) {\n  linkCurrentUserToUDIByUUID(uuid: $uuid, loginType: $loginType, method: $method) {\n    succeeded\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "LinkEmailByToken": "mutation LinkEmailByToken($token: String!) {\n  verifyLinkedEmail(token: $token) {\n    email\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "linkEmailToCurrentUserAccount": "mutation linkEmailToCurrentUserAccount($email: String!) {\n  linkEmailToCurrentUserAccount(email: $email) {\n    email\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "linkThirdPartyAccountMutation": "mutation linkThirdPartyAccountMutation($loginType: String!, $token: String!) {\n  linkThirdPartyAccount(loginType: $loginType, token: $token) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "linkThirdPartyOAuth": "mutation linkThirdPartyOAuth($oauthType: ThirdPartyOAuthType!, $password: String!, $accessToken: String!) {\n  linkThirdPartyAuth(\n    oauthType: $oauthType\n    password: $password\n    accessToken: $accessToken\n  ) {\n    user {\n      id\n      kaid\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "LinkUDIToUserMutation": "mutation LinkUDIToUserMutation($uuid: ID!, $kaid: ID!) {\n  linkUserDistrictInfoV2(uuid: $uuid, kaid: $kaid, method: DEVADMIN) {\n    succeeded\n    user {\n      id\n      userDistrictInfos {\n        id\n        district {\n          id\n          name\n          __typename\n        }\n        createdAt\n        updatedAt\n        uuid\n        kaid\n        activatedAt\n        activationMethod\n        activationEmailSentAt\n        districtProvidedFullName\n        districtProvidedEmail\n        primaryRole\n        isKmap\n        adminOfSchools {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "linkUserByClassCodeMutation": "mutation linkUserByClassCodeMutation($email: String!, $classCode: String!) {\n  linkUserByClassCodeV2(email: $email, classCode: $classCode) {\n    succeeded\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "linkUserByClassCodeV2": "mutation linkUserByClassCodeV2($email: String!, $classCode: String!) {\n  linkUserByClassCodeV2(email: $email, classCode: $classCode) {\n    succeeded\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "loginWithAppleAuthCodeAndState": "mutation loginWithAppleAuthCodeAndState($authCode: String!, $state: String!, $userData: AppleUserData, $role: UserRole) {\n  loginWithAppleAuthCodeAndState(\n    authCode: $authCode\n    state: $state\n    userData: $userData\n    role: $role\n  ) {\n    error {\n      code\n      accessToken\n      __typename\n    }\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    __typename\n  }\n}",
  "loginWithClasslink": "mutation loginWithClasslink($classlinkCode: String, $useDevClasslinkClient: Boolean) {\n  loginWithClasslink(\n    classlinkCode: $classlinkCode\n    useDevClasslinkClient: $useDevClasslinkClient\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    udiUUID\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "loginWithCleverMutation": "mutation loginWithCleverMutation($code: String!, $reauth: Boolean!, $fromDevApp: Boolean!, $isMap: Boolean!, $isLP: Boolean!, $isCanvas: Boolean, $referrerUrl: String!) {\n  loginWithClever(\n    code: $code\n    reauth: $reauth\n    fromDevApp: $fromDevApp\n    isMap: $isMap\n    isLP: $isLP\n    isCanvas: $isCanvas\n    referrerUrl: $referrerUrl\n  ) {\n    error {\n      code\n      cleverUserInfo {\n        cleverId\n        isTeacher\n        cleverEmail\n        __typename\n      }\n      transferToken\n      udiUuid\n      kaLocale\n      __typename\n    }\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      userDistrictInfos {\n        id\n        district {\n          id\n          kaLocale\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    isLibraryUser\n    isFirstLogin\n    transferToken\n    __typename\n  }\n}",
  "loginWithFacebookMutation": "mutation loginWithFacebookMutation($token: String!, $role: UserRole, $inviteId: String) {\n  loginWithFacebook(token: $token, role: $role, inviteId: $inviteId) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "loginWithGoogleMutation": "mutation loginWithGoogleMutation($token: String!, $birthdate: String, $linkClever: Boolean, $role: UserRole, $cleverTransferToken: String, $inviteId: String) {\n  loginWithGoogle(\n    token: $token\n    birthdate: $birthdate\n    linkClever: $linkClever\n    role: $role\n    cleverTransferToken: $cleverTransferToken\n    inviteId: $inviteId\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "loginWithPasswordMutation": "mutation loginWithPasswordMutation($identifier: String!, $password: String!) {\n  loginWithPassword(identifier: $identifier, password: $password) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    isFirstLogin\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "logoutMutation": "mutation logoutMutation($allowClever: Boolean!, $continueUrl: String!, $finish: Boolean!) {\n  logout(allowClever: $allowClever, continueUrl: $continueUrl, finish: $finish) {\n    continueUrl\n    __typename\n  }\n}",
  "mapContentToStandard": "mutation mapContentToStandard($setId: String!, $standardId: String!, $descriptor: String!, $secondary: String, $delete: Boolean!) {\n  mapContentToStandard(\n    setId: $setId\n    standardId: $standardId\n    contentDescriptor: $descriptor\n    secondaryDescriptor: $secondary\n    delete: $delete\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "markAIGuideWaitlistEntryEligible": "mutation markAIGuideWaitlistEntryEligible($kaid: String!) {\n  markAIGuideWaitlistEntryEligible(kaid: $kaid) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "markAIGuideWaitlistEntryIneligible": "mutation markAIGuideWaitlistEntryIneligible($kaid: String!) {\n  markAIGuideWaitlistEntryIneligible(kaid: $kaid) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "markPromoAsSeen": "mutation markPromoAsSeen($promoName: String!, $kaid: String!) {\n  recordPromo(promoName: $promoName, kaid: $kaid) {\n    registrationSuccess\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "modifyDistrict": "mutation modifyDistrict($existingDistrictID: ID!, $newName: String, $offerings: [Offering!], $rosterSyncingEnabled: Boolean, $rosterID: String, $rosterSource: RosterSource, $nweaID: String, $ncesID: String, $isTest: Boolean, $sendTeacherActivationEmails: Boolean, $goLiveDate: Date, $kaLocale: String, $schoolYearDates: DistrictSchoolYearInput, $region: String, $allOnGrades: [DistrictGradeLevel!], $allOffGrades: [DistrictGradeLevel!], $subsetGrades: [DistrictGradeLevel!], $schoolKhanmigoPreferences: [DistrictKhanmigoSchool!], $khanmigoPreference: KhanmigoEnrollment, $khanmigoAdmins: Int, $khanmigoTeachers: Int, $khanmigoStudents: Int, $khanmigoStartDate: Date, $khanmigoEndDate: Date, $khanmigoTokenCapacity: Int, $khanmigoIncludeUserEmails: [String!], $khanmigoExcludeUserEmails: [String!], $khanmigoIncludeNonStudents: Boolean, $khanmigoIncludeStudents: Boolean) {\n  modifyDistrict(\n    existingDistrictID: $existingDistrictID\n    newName: $newName\n    offerings: $offerings\n    rosterSyncingEnabled: $rosterSyncingEnabled\n    rosterID: $rosterID\n    rosterSource: $rosterSource\n    nweaID: $nweaID\n    ncesID: $ncesID\n    isTest: $isTest\n    sendTeacherActivationEmails: $sendTeacherActivationEmails\n    goLiveDate: $goLiveDate\n    kaLocale: $kaLocale\n    schoolYearDates: $schoolYearDates\n    region: $region\n    allOnGrades: $allOnGrades\n    allOffGrades: $allOffGrades\n    subsetGrades: $subsetGrades\n    schoolKhanmigoPreferences: $schoolKhanmigoPreferences\n    khanmigoPreference: $khanmigoPreference\n    khanmigoAdmins: $khanmigoAdmins\n    khanmigoTeachers: $khanmigoTeachers\n    khanmigoStudents: $khanmigoStudents\n    khanmigoStartDate: $khanmigoStartDate\n    khanmigoEndDate: $khanmigoEndDate\n    khanmigoTokenCapacity: $khanmigoTokenCapacity\n    khanmigoIncludeUserEmails: $khanmigoIncludeUserEmails\n    khanmigoExcludeUserEmails: $khanmigoExcludeUserEmails\n    khanmigoIncludeNonStudents: $khanmigoIncludeNonStudents\n    khanmigoIncludeStudents: $khanmigoIncludeStudents\n  ) {\n    district {\n      id\n      rosterID\n      name\n      isKmapDistrict\n      isK4dDistrict\n      rosterSource\n      nweaID\n      ncesID\n      isTest\n      sendActivationEmails\n      rosterSyncingEnabled\n      goLiveDate\n      kaLocale\n      schoolYearDates {\n        start {\n          nthWeek\n          dayOfWeek\n          month\n          __typename\n        }\n        end {\n          nthWeek\n          dayOfWeek\n          month\n          __typename\n        }\n        __typename\n      }\n      region\n      khanmigoPreference\n      khanmigoIncludeNonStudents\n      khanmigoIncludeStudents\n      khanmigoAdmins\n      khanmigoTeachers\n      khanmigoStudents\n      khanmigoStart\n      khanmigoEnd\n      khanmigoIncludedUsers {\n        id\n        districtProvidedEmail\n        __typename\n      }\n      khanmigoExcludedUsers {\n        id\n        districtProvidedEmail\n        __typename\n      }\n      khanmigoGradeEnrollment {\n        id\n        districtID\n        allOnGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        allOffGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        subsetGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    khanmigoIncludeUserMissingEmails\n    khanmigoExcludeUserMissingEmails\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "ModifyUserInFolder": "mutation ModifyUserInFolder($folderId: ID!, $userKaid: String!, $operation: FolderEditOperation!) {\n  updateTeamKaidsInFolder(\n    folderId: $folderId\n    kaid: $userKaid\n    operation: $operation\n  ) {\n    folder {\n      id\n      kaLocale\n      name\n      courseIds\n      teamKaids\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "mppDevadminSignURLForImageUpload": "mutation mppDevadminSignURLForImageUpload($contentType: ImageContentType!) {\n  signURLForImageUpload(contentType: $contentType) {\n    result {\n      publicURL\n      uploadURL\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "notifyAnswer": "mutation notifyAnswer($key: String!, $notifyOnAnswer: Boolean!) {\n  modifyNotifyOnAnswer(feedbackKey: $key, notifyOnAnswer: $notifyOnAnswer) {\n    feedback {\n      feedbackType\n      content\n      notifyOnAnswer\n      __typename\n    }\n    __typename\n  }\n}",
  "optOutOfTeacherCampaign": "mutation optOutOfTeacherCampaign($campaignId: ID!) {\n  teacherCampaignOptOut(campaignId: $campaignId) {\n    teacherCampaignProgress {\n      id\n      optedOutPreCampaign\n      optedOutOfCampaign\n      __typename\n    }\n    __typename\n  }\n}",
  "passwordChangeMutation": "mutation passwordChangeMutation($kaid: String!, $password: String!, $oldPassword: String) {\n  passwordChange(kaid: $kaid, password: $password, oldPassword: $oldPassword) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "passwordChangeSupportMutation": "mutation passwordChangeSupportMutation($kaid: String!, $password: String!) {\n  passwordChangeSupport(kaid: $kaid, password: $password) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "PerformModAction": "mutation PerformModAction($modAction: ModAction!, $entityKey: String!, $intoType: FeedbackType) {\n  performModAction(\n    modAction: $modAction\n    entityKey: $entityKey\n    intoType: $intoType\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "populateCompleteSignup": "mutation populateCompleteSignup($token: String, $inviteId: String, $parent: Boolean, $hCaptchaResponseToken: String) {\n  populateCompleteSignup(\n    token: $token\n    inviteId: $inviteId\n    parent: $parent\n    hCaptchaResponseToken: $hCaptchaResponseToken\n  ) {\n    token\n    inviteId\n    isParent\n    isTeacher\n    isStudentInvite\n    unverifiedUser {\n      email\n      nickname\n      username\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "postloginJoinStudentMutation": "mutation postloginJoinStudentMutation($classCode: String!) {\n  joinStudent(classCode: $classCode) {\n    error {\n      code\n      signupCode\n      classroomName\n      __typename\n    }\n    classroom {\n      id\n      cacheId\n      signupCode\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "PresignURLForTeamPageImageUpload": "mutation PresignURLForTeamPageImageUpload($filename: String!) {\n  presignURLForTeamPageImageUpload(filename: $filename) {\n    presignedPutURL\n    uploadedImageURL\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "publishAssignment": "mutation publishAssignment($assignmentId: ID!, $startDate: DateTime!) {\n  updateAssignment(\n    id: $assignmentId\n    assignment: {isDraft: false, startDate: $startDate}\n  ) {\n    assignment {\n      ...AssignmentInfoFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentInfoFragment on Assignment {\n  id\n  contents {\n    id\n    title\n    kind\n    __typename\n  }\n  studentList {\n    id\n    cacheId\n    name\n    __typename\n  }\n  students {\n    id\n    kaid\n    __typename\n  }\n  coach {\n    id\n    kaid\n    __typename\n  }\n  startDate\n  dueDate\n  isDraft\n  subjectSlug\n  title\n  instructions\n  __typename\n}",
  "publishStandardMappings": "mutation publishStandardMappings($set: String!, $content: String!) {\n  publishStandardMappings(setId: $set, contentDescriptor: $content) {\n    published {\n      id\n      setId\n      standardId\n      contentDescriptor\n      secondaryDescriptor\n      deletion: isDeletion\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "PublishTeamPageEntry": "mutation PublishTeamPageEntry($entryId: ID!) {\n  publishTeamPageEntry(entryId: $entryId) {\n    updatedEntry {\n      ...entry\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment entry on TeamPageEntryForEditing {\n  id\n  isPet\n  isIntern\n  isAlum\n  hasPendingChanges\n  draftContent {\n    id\n    name\n    altNames\n    startDate\n    isAlum\n    mainPhotoURL\n    hoverPhotoURL\n    title\n    bio\n    contactLinks {\n      type\n      editValue\n      editPrefix\n      url\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "PullTestResultForDistrict": "mutation PullTestResultForDistrict($districtID: String!, $force: Boolean!) {\n  pullTestResultForDistrict(districtID: $districtID, force: $force) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "readNotification": "mutation readNotification($key: String!) {\n  readNotification(key: $key) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "reauthWithAppleMutation": "mutation reauthWithAppleMutation($authCode: String!, $state: String!) {\n  reauthWithApple(authCode: $authCode, state: $state) {\n    error {\n      code\n      accessToken\n      __typename\n    }\n    user {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "reauthWithPasswordMutation": "mutation reauthWithPasswordMutation($password: String!) {\n  reauthWithPassword(password: $password) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "reauthWithThirdPartyMutation": "mutation reauthWithThirdPartyMutation($loginType: String!, $token: String!) {\n  reauthWithThirdParty(loginType: $loginType, token: $token) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "rejectCoachRequestFromNotifMutation": "mutation rejectCoachRequestFromNotifMutation($coachKaid: String!) {\n  deleteCoachRequestAsStudent(coachKaid: $coachKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "rejectCoachRequestMutation": "mutation rejectCoachRequestMutation($coachKaid: String!, $studentKaid: String) {\n  deleteCoachRequestAsStudent(coachKaid: $coachKaid, studentKaid: $studentKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeCoachees": "mutation removeCoachees($coachKaid: String!, $studentKaids: [String]!) {\n  removeCoachees(coachKaid: $coachKaid, studentKaids: $studentKaids) {\n    removedKaids\n    errors {\n      kaid\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeParents": "mutation removeParents($childKaid: String!, $parentKaid: String!) {\n  removeParents(childKaid: $childKaid, parentKaid: $parentKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeStudentsFromClassrooms": "mutation removeStudentsFromClassrooms($kaids: [ID!]!, $classroomIds: [ID!]!) {\n  removeStudentsFromClassrooms(kaids: $kaids, classroomIds: $classroomIds) {\n    coach {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "removeThirdPartyAuth": "mutation removeThirdPartyAuth($oauthType: ThirdPartyOAuthType!) {\n  removeThirdPartyAuth(oauthType: $oauthType) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeThirdPartyAuthDevadmin": "mutation removeThirdPartyAuthDevadmin($oauthType: ThirdPartyOAuthType!, $targetKaid: String) {\n  removeThirdPartyAuth(oauthType: $oauthType, targetKaid: $targetKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "renameStudentListMutation": "mutation renameStudentListMutation($listId: ID!, $name: String!) {\n  renameStudentList(listId: $listId, name: $name) {\n    studentList {\n      id\n      cacheId\n      name\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "requestAdminReportCSV": "mutation requestAdminReportCSV($kaid: ID!, $districtID: ID!, $reportType: AdminReportType!, $startDate: DateTime!, $endDate: DateTime!, $schools: [String!]!, $grades: [String!], $teacherKaids: [String!], $courseSISValues: [String!], $courseID: String, $strandKey: String, $bands: [String!], $notifyByEmail: Boolean!, $kaLocale: String) {\n  requestAdminReportCSV(\n    kaid: $kaid\n    districtID: $districtID\n    reportType: $reportType\n    startDate: $startDate\n    endDate: $endDate\n    schools: $schools\n    teacherKaids: $teacherKaids\n    grades: $grades\n    courseSISValues: $courseSISValues\n    courseID: $courseID\n    strandKey: $strandKey\n    bands: $bands\n    notifyByEmail: $notifyByEmail\n    kaLocale: $kaLocale\n  ) {\n    adminReport {\n      id\n      status\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "requestAuthEmail": "mutation requestAuthEmail($authEmail: String!) {\n  requestAuthEmail(authEmail: $authEmail) {\n    user {\n      id\n      pendingEmails\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "requestAuthEmailForDev": "mutation requestAuthEmailForDev($authEmail: String!) {\n  requestAuthEmail(authEmail: $authEmail) {\n    user {\n      id\n      pendingEmails\n      __typename\n    }\n    verificationUrl\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "RequestToBeParentMuation": "mutation RequestToBeParentMuation($childEmail: String!) {\n  requestChild(childEmail: $childEmail) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendInvitationMutation": "mutation resendInvitationMutation($coacheeEmail: String!) {\n  resendInvitation(coacheeEmail: $coacheeEmail) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendUnderAgeGateApprovalEmailForDevadmin": "mutation resendUnderAgeGateApprovalEmailForDevadmin($kaid: String!) {\n  resendUnderAgeGateApprovalEmail(kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendUnderAgeGateApprovalEmailForLogin": "mutation resendUnderAgeGateApprovalEmailForLogin {\n  resendUnderAgeGateApprovalEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendVerificationEmail": "mutation resendVerificationEmail($token: String!) {\n  resendVerificationEmail(token: $token) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resetPassword": "mutation resetPassword($token: String!, $password: String!) {\n  resetPassword(token: $token, password: $password) {\n    error {\n      code\n      __typename\n    }\n    identifier\n    __typename\n  }\n}",
  "RestartTask": "mutation RestartTask($key: String!) {\n  restartTask(input: {key: $key}) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    task {\n      id\n      ... on PracticeTask {\n        exerciseLength\n        taskAttemptHistory {\n          itemId\n          __typename\n        }\n        __typename\n      }\n      ... on TopicQuizTask {\n        taskAttemptHistory {\n          itemId\n          __typename\n        }\n        __typename\n      }\n      ... on TopicUnitTestTask {\n        taskAttemptHistory {\n          itemId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "scheduleUserDeletionMutation": "mutation scheduleUserDeletionMutation($targetKaid: String!, $keepActivityIfNecessary: Boolean) {\n  scheduleUserDeletion(\n    targetKaid: $targetKaid\n    keepActivityIfNecessary: $keepActivityIfNecessary\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendAgingParentTestEmail": "mutation sendAgingParentTestEmail {\n  sendAgingParentTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendAiGuideEnrolledTestEmail": "mutation sendAiGuideEnrolledTestEmail {\n  sendAiGuideEnrolledTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendAiGuideThreadFlaggedTestEmail": "mutation sendAiGuideThreadFlaggedTestEmail {\n  sendChildAiGuideThreadFlaggedTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendChildAddedCoachTestEmail": "mutation sendChildAddedCoachTestEmail {\n  sendChildAddedCoachTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendExistingParentClaimManagedStudentTestEmail": "mutation sendExistingParentClaimManagedStudentTestEmail {\n  sendExistingParentClaimManagedStudentTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendKmapActivationEmailForTeacherMutation": "mutation sendKmapActivationEmailForTeacherMutation($districtEmail: String!) {\n  sendKmapActivationEmailForTeacher(districtEmail: $districtEmail) {\n    emailSent\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendModMessageMutation": "mutation sendModMessageMutation($kaid: String!, $message: String!) {\n  sendModMessage(kaid: $kaid, message: $message) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendNewAssignmentTestEmail": "mutation sendNewAssignmentTestEmail {\n  sendNewAssignmentTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendParentChildInviteTestEmail": "mutation sendParentChildInviteTestEmail {\n  sendParentChildInviteTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendParentReportTestEmail": "mutation sendParentReportTestEmail {\n  sendParentReportTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendSampleTestEmail": "mutation sendSampleTestEmail {\n  sendSampleTestEmail {\n    emailsSent\n    errorMessages\n    __typename\n  }\n}",
  "sendTeacherReportTestEmail": "mutation sendTeacherReportTestEmail {\n  sendTeacherReportTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendTeacherStudentInviteTestEmail": "mutation sendTeacherStudentInviteTestEmail {\n  sendTeacherStudentInviteTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendUnderAgeGateParentApproveTestEmail": "mutation sendUnderAgeGateParentApproveTestEmail {\n  sendUnderAgeGateParentApproveTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendUnderAgeGateParentReminderTestEmail": "mutation sendUnderAgeGateParentReminderTestEmail {\n  sendUnderAgeGateParentReminderTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendUnregisteredParentClaimManagedStudentTestEmail": "mutation sendUnregisteredParentClaimManagedStudentTestEmail {\n  sendUnregisteredParentClaimManagedStudentTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendWaitlistAddedTestEmail": "mutation sendWaitlistAddedTestEmail {\n  sendWaitlistAddedTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendWaitlistApprovedReminderTestEmail": "mutation sendWaitlistApprovedReminderTestEmail {\n  sendWaitlistApprovedReminderTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendWaitlistApprovedTestEmail": "mutation sendWaitlistApprovedTestEmail {\n  sendWaitlistApprovedTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetAccessibility": "mutation SetAccessibility($kaid: String!, $hideVisual: Boolean!, $prefersReducedMotion: Boolean!, $noColorInVideos: Boolean!, $soundOn: Boolean) {\n  setSettings(\n    kaid: $kaid\n    hideVisual: $hideVisual\n    prefersReducedMotion: $prefersReducedMotion\n    noColorInVideos: $noColorInVideos\n    soundOn: $soundOn\n  ) {\n    user {\n      id\n      hideVisual\n      prefersReducedMotion\n      noColorInVideos\n      soundOn\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setAdminReportCancelled": "mutation setAdminReportCancelled($reportID: ID!) {\n  setAdminReportCancelled(reportID: $reportID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setAffiliataionCountryCode": "mutation setAffiliataionCountryCode($countryCode: String!) {\n  userSettingsSetAffiliationCountryCode(countryCode: $countryCode) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetAIGuideInteractionReaction": "mutation SetAIGuideInteractionReaction($interactionId: ID!, $reaction: String, $note: String, $rewrittenResponse: String, $rating: Int, $sentiment: String) {\n  setAIGuideInteractionReaction(\n    interactionId: $interactionId\n    reaction: $reaction\n    note: $note\n    rewrittenResponse: $rewrittenResponse\n    rating: $rating\n    sentiment: $sentiment\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetBasicSettings": "mutation SetBasicSettings($kaid: String!, $nickname: String, $username: String, $userLanguage: String, $region: String, $birthdate: String) {\n  setSettings(\n    kaid: $kaid\n    nickname: $nickname\n    username: $username\n    userLanguage: $userLanguage\n    region: $region\n    birthdate: $birthdate\n  ) {\n    user {\n      id\n      nickname\n      username\n      userLanguage\n      region\n      birthdate\n      homepageUrl\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setBirthdateForSelf": "mutation setBirthdateForSelf($birthdate: String!) {\n  setSettings(birthdate: $birthdate) {\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setBirthdateForUser": "mutation setBirthdateForUser($kaid: String!, $birthdate: String) {\n  setSettings(kaid: $kaid, birthdate: $birthdate) {\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setChronomancerMode": "mutation setChronomancerMode($mode: ChronomancerMode!) {\n  setChronomancerMode(mode: $mode) {\n    chronomancer {\n      mode\n      isCollegeBoardIntegrationEnabled\n      outages {\n        start\n        end\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "setClassroomCoursesMutation": "mutation setClassroomCoursesMutation($classDescriptor: String!, $courseKeys: [String!]!) {\n  setClassroomCourses(\n    classroomDescriptor: $classDescriptor\n    courseKeys: $courseKeys\n  ) {\n    classroom {\n      id\n      cacheId\n      descriptor\n      topics {\n        id\n        key\n        slug\n        title: translatedTitle\n        translatedStandaloneTitle\n        iconPath\n        domainSlug\n        isHighSchoolSubject\n        masteryEnabled\n        subjectMasteryEnabled\n        learnableContentSummary {\n          countExercises\n          __typename\n        }\n        __typename\n      }\n      isK4dClassroom\n      __typename\n    }\n    __typename\n  }\n}",
  "setClassroomMasteryTowersGoal": "mutation setClassroomMasteryTowersGoal($classDescriptor: String!, $weeklyGoal: Int!) {\n  setClassroomMasteryTowersGoal(\n    classDescriptor: $classDescriptor\n    weeklyGoal: $weeklyGoal\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setClassroomSatStatusMutation": "mutation setClassroomSatStatusMutation($classDescriptor: String!, $includeSat: Boolean!, $fromUpsell: Boolean) {\n  setClassroomSatStatus(\n    classroomDescriptor: $classDescriptor\n    includeSat: $includeSat\n    fromUpsell: $fromUpsell\n  ) {\n    classroom {\n      id\n      cacheId\n      descriptor\n      includesSat\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetClassroomTestPrepExams": "mutation SetClassroomTestPrepExams($classDescriptor: String!, $examIds: [String!]!) {\n  setClassroomTestPrepExams(\n    classroomDescriptor: $classDescriptor\n    examIds: $examIds\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetCleverInfo": "mutation SetCleverInfo($cleverDistrictId: String!, $cleverId: String!, $kaid: String!) {\n  setCleverInfoAsAdmin(\n    cleverDistrictId: $cleverDistrictId\n    cleverId: $cleverId\n    kaid: $kaid\n  ) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      cleverId\n      cleverDistrictId\n      __typename\n    }\n    __typename\n  }\n}",
  "setCustomRedirect": "mutation setCustomRedirect($from: String!, $to: String!) {\n  setCustomRedirect(redirectFrom: $from, redirectTo: $to) {\n    error {\n      code\n      __typename\n    }\n    customRedirect {\n      id\n      redirectFrom\n      redirectTo\n      __typename\n    }\n    __typename\n  }\n}",
  "setEduorgAffiliationMutation": "mutation setEduorgAffiliationMutation($eduorgKeyId: ID!) {\n  setEduorgAffiliation(eduorgKeyId: $eduorgKeyId) {\n    user {\n      id\n      schoolAffiliation {\n        id\n        name\n        postalCode\n        location\n        __typename\n      }\n      affiliationCountryCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setHasFormalTeacherStatus": "mutation setHasFormalTeacherStatus($tosForFormalTeacherStatus: Boolean) {\n  setSettings(tosForFormalTeacherStatus: $tosForFormalTeacherStatus) {\n    user {\n      id\n      tosForFormalTeacherStatus\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setInitialClassroomCourses": "mutation setInitialClassroomCourses($classDescriptor: String!, $courseKeys: [String!]!) {\n  setClassroomCourses(\n    classroomDescriptor: $classDescriptor\n    courseKeys: $courseKeys\n  ) {\n    classroom {\n      id\n      cacheId\n      __typename\n    }\n    __typename\n  }\n}",
  "setMasteryTowerName": "mutation setMasteryTowerName($classDescriptor: String!, $leaderboardName: String!) {\n  setMasteryTowerName(\n    classDescriptor: $classDescriptor\n    leaderboardName: $leaderboardName\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setModifyCoachesCapability": "mutation setModifyCoachesCapability($targetKaid: String!, $allow: Boolean!) {\n  setModifyCoachesCapability(targetKaid: $targetKaid, allow: $allow) {\n    target {\n      id\n      canModifyCoaches\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetModifyCoachesCapbilityMutation": "mutation SetModifyCoachesCapbilityMutation($targetKaid: String!, $allow: Boolean!) {\n  setModifyCoachesCapability(targetKaid: $targetKaid, allow: $allow) {\n    target {\n      id\n      canModifyCoaches\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setParent": "mutation setParent($parentEmail: String!) {\n  setParent(parentEmail: $parentEmail) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setPrimaryEmail": "mutation setPrimaryEmail($email: String!, $targetKaid: String) {\n  setPrimaryEmail(email: $email, targetKaid: $targetKaid) {\n    user {\n      id\n      email\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setPrimaryEmailMutation": "mutation setPrimaryEmailMutation($email: String!) {\n  setPrimaryEmail(email: $email) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetProfileBadges": "mutation SetProfileBadges($kaid: String!, $badgeNames: [String!]!) {\n  setProfileBadges(kaid: $kaid, badgeNames: $badgeNames) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetProfilePrograms": "mutation SetProfilePrograms($kaid: String!, $programKeys: [String!]!) {\n  setProfilePrograms(kaid: $kaid, programKeys: $programKeys) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetPromotionMutation": "mutation SetPromotionMutation($promoName: String!) {\n  recordPromo(promoName: $promoName) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setSettingsMutationWithErrors": "mutation setSettingsMutationWithErrors($kaid: String!, $nickname: String, $username: String, $soundOn: Boolean, $muteVideos: Boolean, $showCaptions: Boolean, $playbackRate: PlaybackRate, $userLanguage: String, $region: String, $birthdate: String, $hideVisual: Boolean, $prefersReducedMotion: Boolean, $noColorInVideos: Boolean) {\n  setSettings(\n    kaid: $kaid\n    nickname: $nickname\n    username: $username\n    soundOn: $soundOn\n    muteVideos: $muteVideos\n    showCaptions: $showCaptions\n    playbackRate: $playbackRate\n    userLanguage: $userLanguage\n    region: $region\n    birthdate: $birthdate\n    hideVisual: $hideVisual\n    prefersReducedMotion: $prefersReducedMotion\n    noColorInVideos: $noColorInVideos\n  ) {\n    user {\n      id\n      nickname\n      username\n      soundOn\n      muteVideos\n      showCaptions\n      userLanguage\n      region\n      birthdate\n      hideVisual\n      prefersReducedMotion\n      noColorInVideos\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setTeacherAffiliation": "mutation setTeacherAffiliation($tosForFormalTeacherStatus: Boolean, $countryCode: String!, $eduorgKeyId: ID!) {\n  setSettings(tosForFormalTeacherStatus: $tosForFormalTeacherStatus) {\n    user {\n      id\n      tosForFormalTeacherStatus\n      __typename\n    }\n    __typename\n  }\n  userSettingsSetAffiliationCountryCode(countryCode: $countryCode) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n  setEduorgAffiliation(eduorgKeyId: $eduorgKeyId) {\n    user {\n      id\n      schoolAffiliation {\n        id\n        name\n        postalCode\n        location\n        __typename\n      }\n      affiliationCountryCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setTeacherCountryAffiliation": "mutation setTeacherCountryAffiliation($countryCode: String!) {\n  userSettingsSetAffiliationCountryCode(countryCode: $countryCode) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setUserCourses": "mutation setUserCourses($courseIds: [String]!, $gradeLevelId: String) {\n  setUserCourses(courseIds: $courseIds, gradeLevelId: $gradeLevelId) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      homepageModules {\n        navigation {\n          interestedInLsat\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SetUserHomepageAdmin": "mutation SetUserHomepageAdmin($homepage: UserHomepage!, $kaid: String) {\n  setUserHomepage(homepage: $homepage, kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      homepage\n      __typename\n    }\n    __typename\n  }\n}",
  "SetVideo": "mutation SetVideo($kaid: String!, $muteVideos: Boolean!, $showCaptions: Boolean!, $playbackRate: PlaybackRate!) {\n  setSettings(\n    kaid: $kaid\n    muteVideos: $muteVideos\n    showCaptions: $showCaptions\n    playbackRate: $playbackRate\n  ) {\n    user {\n      id\n      muteVideos\n      showCaptions\n      playbackRate\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetWalmartInfo": "mutation SetWalmartInfo($kaid: String!, $walmartId: String, $walmartDivision: String) {\n  setWalmartInfoAsAdmin(\n    walmartId: $walmartId\n    walmartDivision: $walmartDivision\n    kaid: $kaid\n  ) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      walmartId\n      walmartDivision\n      __typename\n    }\n    __typename\n  }\n}",
  "setWalmartInfoToJoinMutation": "mutation setWalmartInfoToJoinMutation($profileKeyName: String!) {\n  setWalmartInfo(profileKeyName: $profileKeyName) {\n    error {\n      code\n      __typename\n    }\n    walmartProfile {\n      continueUrl\n      __typename\n    }\n    __typename\n  }\n}",
  "signupAdultWithPasswordMutation": "mutation signupAdultWithPasswordMutation($email: String!, $password: String!, $firstname: String!, $lastname: String!, $role: UserRole!, $birthdate: Date) {\n  signupAdultWithPassword(\n    email: $email\n    password: $password\n    firstname: $firstname\n    lastname: $lastname\n    role: $role\n    birthdate: $birthdate\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signupDistrictsWithClasslink": "mutation signupDistrictsWithClasslink($options: ClasslinkSignupOptions) {\n  signupDistrictsWithClasslink(options: $options) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signupDistrictsWithPasswordMutation": "mutation signupDistrictsWithPasswordMutation($email: String!, $password: String!, $firstname: String!, $lastname: String!, $role: UserRole, $birthdate: Date) {\n  signupDistrictsWithPassword(\n    email: $email\n    password: $password\n    firstname: $firstname\n    lastname: $lastname\n    role: $role\n    birthdate: $birthdate\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signupLearnerWithPasswordMutation": "mutation signupLearnerWithPasswordMutation($email: String!, $password: String!, $firstname: String!, $lastname: String!, $birthdate: Date!) {\n  signupLearnerWithPassword(\n    email: $email\n    password: $password\n    firstname: $firstname\n    lastname: $lastname\n    birthdate: $birthdate\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signupResendVerificationEmailMutation": "mutation signupResendVerificationEmailMutation {\n  signupResendVerificationEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signupUnderAgeGateMutation": "mutation signupUnderAgeGateMutation($username: String!, $password: String!, $birthdate: Date!, $parentEmail: String!, $signupCodes: [String]) {\n  signupUnderAgeGate(\n    username: $username\n    password: $password\n    birthdate: $birthdate\n    parentEmail: $parentEmail\n    signupCodes: $signupCodes\n  ) {\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      studentLists {\n        id\n        cacheId\n        signupCode\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SignupWithWalmartMutation": "mutation SignupWithWalmartMutation($profileKeyName: String!, $email: String!) {\n  signupWithWalmart(profileKeyName: $profileKeyName, email: $email) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "signURLForReport": "mutation signURLForReport($recordID: String!) {\n  signURLForReport(recordID: $recordID) {\n    url\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "siteEditorStartPublish": "mutation siteEditorStartPublish($title: String, $contentDescriptors: [String!]!) {\n  startPublishForContentDescriptors(\n    title: $title\n    contentDescriptors: $contentDescriptors\n  ) {\n    publishStatus {\n      id\n      queued\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "spinOffProgram": "mutation spinOffProgram($originProgramOrContentId: String!, $originProgramKind: SpinoffOriginKind!, $originRevisionId: ID, $title: String!, $revision: ProgramRevisionInput!, $curationNodeSlug: String!) {\n  spinOffProgram(\n    origin: {programOrContentId: $originProgramOrContentId, kind: $originProgramKind}\n    originRevisionId: $originRevisionId\n    title: $title\n    revision: $revision\n    curationNodeSlug: $curationNodeSlug\n  ) {\n    program {\n      ...Program\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "startMasteryTowerSession": "mutation startMasteryTowerSession($classDescriptor: String!) {\n  startMasteryTowerSession(classDescriptor: $classDescriptor) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "stopCoachingStudents": "mutation stopCoachingStudents($kaids: [ID!]!) {\n  stopCoachingStudents(studentKaids: $kaids) {\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "submitStory": "mutation submitStory($story: SubmitStoryInput!) {\n  submitStory(story: $story) {\n    success\n    __typename\n  }\n}",
  "submitTeacherCampaignResponse": "mutation submitTeacherCampaignResponse($urlEncodedStepKey: ID!, $exerciseNo: Int!, $text: [String]!) {\n  teacherCampaignExerciseComplete(\n    urlEncodedStepKey: $urlEncodedStepKey\n    exerciseNo: $exerciseNo\n    text: $text\n  ) {\n    ok\n    __typename\n  }\n}",
  "teacherCampaignUpdate": "mutation teacherCampaignUpdate($campaign: TeacherCampaignUpdateInput!) {\n  teacherCampaignUpdate(campaign: $campaign) {\n    campaign {\n      id\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "transferAuthMutation": "mutation transferAuthMutation($key: String!) {\n  transferAuth(key: $key) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "transferCleverAuthMutation": "mutation transferCleverAuthMutation($transferToken: String!, $reauth: Boolean!) {\n  transferCleverAuth(transferToken: $transferToken, reauth: $reauth) {\n    error {\n      code\n      cleverUserInfo {\n        cleverId\n        isTeacher\n        cleverEmail\n        __typename\n      }\n      transferToken\n      udiUuid\n      kaLocale\n      __typename\n    }\n    user {\n      id\n      kaid\n      canAccessDistrictsHomepage\n      isTeacher\n      hasUnresolvedInvitations\n      preferredKaLocale {\n        id\n        kaLocale\n        status\n        __typename\n      }\n      userDistrictInfos {\n        id\n        district {\n          id\n          kaLocale\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    isLibraryUser\n    isFirstLogin\n    transferToken\n    __typename\n  }\n}",
  "translationEditorEditTalkthrough": "mutation translationEditorEditTalkthrough($sha: String!, $input: EditTalkthroughInput!) {\n  editTalkthrough(sha: $sha, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "translationEditorSignURLForTalkthroughMP3Upload": "mutation translationEditorSignURLForTalkthroughMP3Upload($kaLocale: KALocale!, $youtubeID: String!) {\n  signURLForTalkthroughMP3Upload(kaLocale: $kaLocale, youtubeID: $youtubeID) {\n    uploadURL\n    publicURL\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UnbanUserMutation": "mutation UnbanUserMutation($targetKaid: String!) {\n  unhellbanUser(targetKaid: $targetKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UnderAgeGateParentApproval": "mutation UnderAgeGateParentApproval($username: String!) {\n  underAgeGateParentApproval(username: $username) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      nickname\n      underAgeGatePendingApprovals {\n        username\n        daysUntilCutoff\n        __typename\n      }\n      childInvitations {\n        invitationType\n        email\n        requestKey\n        nickname\n        __typename\n      }\n      parentChildren: children {\n        id\n        coachNickname\n        kaid\n        userId\n        isUnderAgeGateManagedByActor\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "underAgeGateParentApprovalByTokenMutation": "mutation underAgeGateParentApprovalByTokenMutation($tosAccepted: Boolean!, $underAgeGateUsername: String, $parentApproveToken: String) {\n  underAgeGateParentApprovalByToken(\n    tosAccepted: $tosAccepted\n    underAgeGateUsername: $underAgeGateUsername\n    parentApproveToken: $parentApproveToken\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "unlinkAuthEmail": "mutation unlinkAuthEmail($authEmail: String!) {\n  unlinkEmail(authEmail: $authEmail) {\n    user {\n      id\n      authEmails\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "unsyncGoogleClassroom": "mutation unsyncGoogleClassroom($classroomId: String!) {\n  unsyncGoogleClassroom(classroomId: $classroomId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateAssessmentItemTag": "mutation UpdateAssessmentItemTag($id: String!, $displayName: String!, $description: String!, $lessonId: String!) {\n  updateAssessmentItemTag(\n    id: $id\n    displayName: $displayName\n    description: $description\n    lessonId: $lessonId\n  ) {\n    assessmentItemTag {\n      ...AssessmentItemTagFields\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemTagFields on AssessmentItemTag {\n  editId: id\n  id: urlsafeTag\n  displayName\n  description\n  relatedContentId: lessonId\n  __typename\n}",
  "updateAssignment": "mutation updateAssignment($assignmentId: ID!, $studentKaids: [ID], $contentDescriptors: [String], $startDate: DateTime, $dueDate: DateTime, $isDraft: Boolean) {\n  updateAssignment(\n    id: $assignmentId\n    assignment: {studentKaids: $studentKaids, contentDescriptors: $contentDescriptors, startDate: $startDate, dueDate: $dueDate, isDraft: $isDraft}\n  ) {\n    assignment {\n      ...AssignmentInfoFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentInfoFragment on Assignment {\n  id\n  contents {\n    id\n    title\n    kind\n    __typename\n  }\n  studentList {\n    id\n    cacheId\n    name\n    __typename\n  }\n  students {\n    id\n    kaid\n    __typename\n  }\n  coach {\n    id\n    kaid\n    __typename\n  }\n  startDate\n  dueDate\n  isDraft\n  subjectSlug\n  title\n  instructions\n  __typename\n}",
  "updateAssignments": "mutation updateAssignments($ids: [ID]!, $startDate: DateTime, $dueDate: DateTime) {\n  updateAssignments(\n    ids: $ids\n    assignment: {startDate: $startDate, dueDate: $dueDate}\n  ) {\n    assignments {\n      id\n      contents {\n        id\n        title\n        __typename\n      }\n      studentList {\n        id\n        cacheId\n        name\n        __typename\n      }\n      students {\n        id\n        kaid\n        __typename\n      }\n      coach {\n        id\n        kaid\n        __typename\n      }\n      startDate\n      dueDate\n      isDraft\n      subjectSlug\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateChallengeProgress": "mutation updateChallengeProgress($currentStep: Int, $programId: ID!, $lessonId: ID!, $stashedCode: String, $status: Int) {\n  updateChallengeProgress(\n    input: {currentStep: $currentStep, programId: $programId, lessonId: $lessonId, stashedCode: $stashedCode, status: $status}\n  ) {\n    actionResults {\n      pointsEarned {\n        points\n        __typename\n      }\n      notificationsAdded {\n        badges\n        avatarParts\n        readable\n        urgent\n        toast\n        continueUrl\n        __typename\n      }\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      userProfile {\n        countVideosCompleted\n        points\n        countBrandNewNotifications\n        __typename\n      }\n      __typename\n    }\n    programProgress {\n      currentStep\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      points\n      stashedCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateCoachNicknameForStudent": "mutation UpdateCoachNicknameForStudent($nickname: String, $studentKaid: String!) {\n  updateCoachNicknameForStudent(nickname: $nickname, studentKaid: $studentKaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateContentPermission": "mutation updateContentPermission($userKaid: String!, $id: String!, $role: String!, $kaLocale: String!, $kind: String!, $canPublish: Boolean!) {\n  updateContentPermission(\n    userKaid: $userKaid\n    contentPermission: {id: $id, role: $role, kaLocale: $kaLocale, kind: $kind, canPublish: $canPublish}\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateCurationPageRevisionMutation": "mutation updateCurationPageRevisionMutation($sha: String!, $input: EditCurationPageInput!) {\n  editCurationPage(sha: $sha, input: $input) {\n    curationPage {\n      contentKind\n      id\n      title\n      slug\n      alternateSlugs\n      curriculumKey\n      description\n      listed\n      sponsored\n      showCurationModule\n      lowerToc\n      customDescriptionTag\n      customTitleTag\n      curationData\n      sha\n      hasUnpublishedChanges\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateCustomBadge": "mutation updateCustomBadge($input: UpdateCustomBadgeInput) {\n  updateCustomBadge(input: $input) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDistrictGoLiveDate": "mutation updateDistrictGoLiveDate($districtID: String!, $goLiveDate: Date!) {\n  updateDistrictGoLiveDate(districtID: $districtID, goLiveDate: $goLiveDate) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDistrictRosterDistrictAdmins": "mutation updateDistrictRosterDistrictAdmins($districtID: String!, $enable: Boolean!) {\n  updateDistrictRosterDistrictAdmins(districtID: $districtID, enable: $enable) {\n    district {\n      id\n      rosterDistrictAdmins\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDistrictRosterSyncing": "mutation updateDistrictRosterSyncing($districtID: String!, $sync: Boolean!) {\n  updateDistrictRosterSyncing(districtID: $districtID, sync: $sync) {\n    district {\n      id\n      rosterSyncingEnabled\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDistrictTeacherActivationEmails": "mutation updateDistrictTeacherActivationEmails($districtID: String!, $enable: Boolean!) {\n  updateDistrictTeacherActivationEmails(districtID: $districtID, enable: $enable) {\n    district {\n      id\n      sendActivationEmails\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDomainRevisionMutation": "mutation updateDomainRevisionMutation($sha: String!, $input: EditDomainInput!) {\n  editDomain(sha: $sha, input: $input) {\n    domain {\n      contentKind\n      id\n      title\n      slug\n      alternateSlugs\n      description\n      listed\n      sponsored\n      showCurationModule\n      lowerToc\n      customDescriptionTag\n      customTitleTag\n      curationData\n      sha\n      hasUnpublishedChanges\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDonationAsk": "mutation updateDonationAsk($donationAsk: DonationAskInput) {\n  updateDonationAsk(donationAsk: $donationAsk) {\n    success\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateDonationAskActiveState": "mutation updateDonationAskActiveState($donationAsk: DonationAskActivityInput) {\n  updateDonationAskActiveState(donationAsk: $donationAsk) {\n    success\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateFeedback": "mutation UpdateFeedback($feedbackKey: String!, $textContent: String!, $shownLowQualityNotice: Boolean) {\n  updateFeedback(\n    feedbackKey: $feedbackKey\n    textContent: $textContent\n    shownLowQualityNotice: $shownLowQualityNotice\n  ) {\n    feedback {\n      isLocked\n      isPinned\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      fromVideoAuthor\n      key\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      sumVotesIncremented\n      upVoted\n      __typename\n    }\n    lowQualityResponse {\n      feedbackCode\n      feedbackChar\n      feedbackType\n      showLowQualityNotice\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateFlagMutation": "mutation UpdateFlagMutation($flagName: String!, $description: String, $team: String, $expires: String, $rules: [RuleInput!]!) {\n  updateFlag(\n    name: $flagName\n    description: $description\n    team: $team\n    expires: $expires\n    rules: $rules\n  ) {\n    flag {\n      id\n      name\n      description\n      team\n      expires\n      created\n      rules {\n        name\n        isAllowRule\n        context {\n          name\n          value\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "updateGoogleClassroom": "mutation updateGoogleClassroom($googleClassId: String!, $googleClassName: String!, $googleClassUrl: String!, $googleClassStudents: [GoogleClassStudent]!, $classroomKey: String!, $khanClassName: String) {\n  updateGoogleClassroom(\n    googleClassId: $googleClassId\n    googleClassName: $googleClassName\n    googleClassUrl: $googleClassUrl\n    googleClassStudents: $googleClassStudents\n    classroomKey: $classroomKey\n    khanClassName: $khanClassName\n  ) {\n    classroom {\n      ...ClassroomData\n      __typename\n    }\n    linkedStudents {\n      ...LinkedStudentData\n      __typename\n    }\n    unsuccessfullyLinkedStudents {\n      ...UnlinkedStudentData\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ClassroomData on StudentList {\n  cacheId\n  id\n  descriptor\n  name\n  key\n  signupCode\n  googleClassId\n  googleClassName\n  googleClassUrl\n  __typename\n}\n\nfragment LinkedStudentData on LinkedGoogleClassStudent {\n  email\n  __typename\n}\n\nfragment UnlinkedStudentData on UnsuccessfullyLinkedGoogleClassStudent {\n  email\n  nickname\n  error {\n    code\n    __typename\n  }\n  __typename\n}",
  "UpdateGrants": "mutation UpdateGrants($kaid: ID!, $rolesToGrant: [RoleInput!]!, $roleIdsToRevoke: [ID!]!) {\n  revokeAndGrantRoles(\n    kaid: $kaid\n    rolesToGrant: $rolesToGrant\n    roleIdsToRevoke: $roleIdsToRevoke\n  ) {\n    userWithGrants {\n      id\n      grants {\n        permissionId\n        role {\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "updateInteractiveProgress": "mutation updateInteractiveProgress($programId: ID!, $lessonId: ID!) {\n  updateInteractiveProgress(input: {programId: $programId, lessonId: $lessonId}) {\n    actionResults {\n      pointsEarned {\n        points\n        __typename\n      }\n      notificationsAdded {\n        badges\n        avatarParts\n        readable\n        urgent\n        toast\n        continueUrl\n        __typename\n      }\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      userProfile {\n        countVideosCompleted\n        points\n        countBrandNewNotifications\n        __typename\n      }\n      __typename\n    }\n    programProgress {\n      completionStatus\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateKMapPlacementMutation": "mutation UpdateKMapPlacementMutation($classDescriptor: String!, $studentMapGoals: [StudentMapGoalsInput]!) {\n  updateMapGoals(\n    classroomDescriptor: $classDescriptor\n    studentMapGoals: $studentMapGoals\n  ) {\n    assignments {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "updateMuteVideosSetting": "mutation updateMuteVideosSetting($muteVideos: Boolean!) {\n  setSettings(muteVideos: $muteVideos) {\n    user {\n      id\n      muteVideos\n      __typename\n    }\n    __typename\n  }\n}",
  "updateOfficialClarification": "mutation updateOfficialClarification($id: ID!, $clarification: UpdateOfficialClarificationInput!) {\n  updateOfficialClarification(id: $id, clarification: $clarification) {\n    updatedClarification {\n      ...clarificationFragmentWithReporter\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updatePlaybackRateSetting": "mutation updatePlaybackRateSetting($playbackRate: PlaybackRate!) {\n  setSettings(playbackRate: $playbackRate) {\n    user {\n      id\n      playbackRate\n      __typename\n    }\n    __typename\n  }\n}",
  "updateProfile": "mutation updateProfile($avatarName: String, $bio: String, $profileAccessLevel: ProfileAccessLevel, $nickname: String, $username: String) {\n  setSettings(\n    avatarName: $avatarName\n    bio: $bio\n    nickname: $nickname\n    username: $username\n    profileAccessLevel: $profileAccessLevel\n  ) {\n    user {\n      id\n      avatar {\n        name\n        imageSrc\n        __typename\n      }\n      bio\n      profile {\n        accessLevel\n        __typename\n      }\n      nickname\n      username\n      __typename\n    }\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateProgram": "mutation updateProgram($programId: ID!, $title: String, $revision: ProgramRevisionInput!) {\n  updateProgram(programId: $programId, title: $title, revision: $revision) {\n    program {\n      ...Program\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Program on Program {\n  id\n  latestRevision {\n    id\n    code\n    __typename\n  }\n  title\n  url\n  userAuthoredContentType\n  __typename\n}",
  "updateProgramSettings": "mutation updateProgramSettings($programId: ID!, $height: Int!, $width: Int!, $category: ProgramCategoryInput, $description: String) {\n  updateProgramSettings(\n    programId: $programId\n    height: $height\n    width: $width\n    category: $category\n    description: $description\n  ) {\n    program {\n      id\n      height\n      width\n      category\n      description\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateProjectProgress": "mutation updateProjectProgress($programId: ID!, $lessonId: ID!, $stashedCode: String, $status: Int) {\n  updateProjectProgress(\n    input: {programId: $programId, lessonId: $lessonId, stashedCode: $stashedCode, status: $status}\n  ) {\n    actionResults {\n      pointsEarned {\n        points\n        __typename\n      }\n      notificationsAdded {\n        badges\n        avatarParts\n        readable\n        urgent\n        toast\n        continueUrl\n        __typename\n      }\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      userProfile {\n        countVideosCompleted\n        points\n        countBrandNewNotifications\n        __typename\n      }\n      __typename\n    }\n    programProgress {\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      points\n      stashedCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateRewards": "mutation updateRewards {\n  checkForNewRewards {\n    newBadges {\n      name\n      __typename\n    }\n    newAvatars {\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateRolesAndHomepage": "mutation UpdateRolesAndHomepage($roles: [UserRole]!, $homepage: UserHomepage!) {\n  updateRolesAndHomepageSettings(roles: $roles, homepage: $homepage) {\n    user {\n      id\n      isTeacher\n      isParent\n      homepageUrl\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateShowCaptionsSetting": "mutation updateShowCaptionsSetting($showCaptions: Boolean!) {\n  setSettings(showCaptions: $showCaptions) {\n    user {\n      id\n      showCaptions\n      __typename\n    }\n    __typename\n  }\n}",
  "updateStory": "mutation updateStory($key: ID!, $story: UpdateStoryInput!) {\n  updateStory(key: $key, story: $story) {\n    success\n    __typename\n  }\n}",
  "updateStripeCardInSubscription": "mutation updateStripeCardInSubscription($subscriptionId: String!, $cardToken: String!) {\n  updateStripeSubscription(subscriptionId: $subscriptionId, cardToken: $cardToken) {\n    subscription {\n      id\n      customerName\n      customerId\n      last4\n      status\n      expMonth\n      expYear\n      monthlyAmountCents\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n",
  "updateStripeSubscriptionAmount": "mutation updateStripeSubscriptionAmount($subscriptionId: String!, $newPlan: String!, $zipCode: String!) {\n  updateStripeSubscriptionAmount(subscriptionId: $subscriptionId, newPlan: $newPlan, zipCode: $zipCode) {\n    subscription {\n      id\n      monthlyAmountCents\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n",
  "UpdateSubjectMasteryAssignmentMutation": "mutation UpdateSubjectMasteryAssignmentMutation($id: ID!, $studentKaids: [ID]!, $dueDate: DateTime!) {\n  updateSubjectMasteryAssignment(\n    updateSubjectMasteryAssignmentInput: {id: $id, studentKaids: $studentKaids, dueDate: $dueDate}\n  ) {\n    assignment {\n      id\n      dueDate\n      __typename\n    }\n    __typename\n  }\n}",
  "updateSubscriptionByToken": "mutation updateSubscriptionByToken($token: String!, $subscribe: Boolean!) {\n  updateSubscriptionByToken(token: $token, subscribe: $subscribe) {\n    success\n    __typename\n  }\n}",
  "updateSubscriptionFromToken": "mutation updateSubscriptionFromToken($token: String!, $subscribe: Boolean!) {\n  updateSubscriptionByToken(token: $token, subscribe: $subscribe) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateTalkthroughProgress": "mutation updateTalkthroughProgress($fullyWatched: Boolean!, $lastMsWatched: Float!, $lessonId: ID!, $msDuration: Int!, $msWatched: Float!, $programId: ID!, $updateProgress: Boolean!) {\n  updateTalkthroughProgress(\n    input: {fullyWatched: $fullyWatched, lastMsWatched: $lastMsWatched, lessonId: $lessonId, msDuration: $msDuration, msWatched: $msWatched, programId: $programId, updateProgress: $updateProgress}\n  ) {\n    actionResults {\n      pointsEarned {\n        points\n        __typename\n      }\n      notificationsAdded {\n        badges\n        avatarParts\n        readable\n        urgent\n        toast\n        continueUrl\n        __typename\n      }\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      userProfile {\n        countVideosCompleted\n        points\n        countBrandNewNotifications\n        __typename\n      }\n      __typename\n    }\n    programProgress {\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      points\n      lastMsWatched\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateTeacherCampaignProgress": "mutation updateTeacherCampaignProgress($campaignId: ID!) {\n  teacherCampaignProgressUpdate(campaignId: $campaignId) {\n    progress: teacherCampaignProgress {\n      id\n      completedSteps\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateTeamPageEntry": "mutation UpdateTeamPageEntry($entryId: ID!, $content: TeamPageEntryInput!) {\n  updateTeamPageEntry(entryId: $entryId, content: $content) {\n    updatedEntry {\n      ...entry\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment entry on TeamPageEntryForEditing {\n  id\n  isPet\n  isIntern\n  isAlum\n  hasPendingChanges\n  draftContent {\n    id\n    name\n    altNames\n    startDate\n    isAlum\n    mainPhotoURL\n    hoverPhotoURL\n    title\n    bio\n    contactLinks {\n      type\n      editValue\n      editPrefix\n      url\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "updateUnderAgeGateParentEmailAsAdminMutation": "mutation updateUnderAgeGateParentEmailAsAdminMutation($parentEmail: String!, $childKaid: String!) {\n  updateUnderAgeGateParentEmailAsAdmin(\n    parentEmail: $parentEmail\n    childKaid: $childKaid\n  ) {\n    user {\n      id\n      kaid\n      underAgeGate {\n        parentEmail\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateUnderAgeGateParentEmailMutation": "mutation updateUnderAgeGateParentEmailMutation($parentEmail: String!) {\n  updateUnderAgeGateParentEmail(parentEmail: $parentEmail) {\n    user {\n      id\n      kaid\n      underAgeGate {\n        parentEmail\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateUserArticleProgress": "mutation updateUserArticleProgress($input: UserArticleProgressInput!) {\n  updateUserArticleProgress(articleProgressUpdate: $input) {\n    actionResults {\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      notificationsAdded {\n        avatarParts\n        badges\n        continueUrl\n        readable\n        toast\n        urgent\n        __typename\n      }\n      userProfile {\n        countBrandNewNotifications\n        countVideosCompleted\n        points\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateUserRole": "mutation UpdateUserRole($role: UserRole!, $operation: RoleOperation!, $kaid: String) {\n  updateUserRole(role: $role, operation: $operation, kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      isTeacher\n      isParent\n      __typename\n    }\n    __typename\n  }\n}",
  "updateUserVideoProgress": "mutation updateUserVideoProgress($input: UserVideoProgressInput!) {\n  updateUserVideoProgress(videoProgressUpdate: $input) {\n    videoItemProgress {\n      content {\n        id\n        progressKey\n        ... on Video {\n          downloadUrls\n          __typename\n        }\n        __typename\n      }\n      lastSecondWatched\n      secondsWatched\n      lastWatched\n      points\n      started\n      completed\n      __typename\n    }\n    actionResults {\n      pointsEarned {\n        points\n        __typename\n      }\n      tutorialNodeProgress {\n        contentId\n        progress\n        __typename\n      }\n      userProfile {\n        countVideosCompleted\n        points\n        countBrandNewNotifications\n        __typename\n      }\n      notificationsAdded {\n        badges\n        avatarParts\n        readable\n        urgent\n        toast\n        continueUrl\n        __typename\n      }\n      ... on VideoActionResults {\n        currentTask {\n          id\n          content {\n            id\n            __typename\n          }\n          pointBounty\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "userExerciseCacheMutations": "mutation userExerciseCacheMutations($kaid: String!) {\n  clearUserExerciseCache(kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "VoteEntityMutation": "mutation VoteEntityMutation($postKey: String!, $voteType: Int!) {\n  voteEntity(entityKey: $postKey, voteType: $voteType) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "ForceLinkEmail": "mutation ForceLinkEmail($email: String!, $kaid: String!) {\n  forceLinkEmail(email: $email, kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UnlinkEmailForSupport": "mutation UnlinkEmailForSupport($email: String!, $kaid: String!) {\n  unlinkEmailForSupport(email: $email, kaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    removed\n    __typename\n  }\n}",
  "DisableAIGuide": "mutation DisableAIGuide($kaid: String!) {\n  disableAIGuide(kaid: $kaid, reason: DISABLED_BY_USER) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdateSubscriptionByToken": "mutation UpdateSubscriptionByToken($token: String!, $subscribe: Boolean!) {\n  updateSubscriptionByToken(token: $token, subscribe: $subscribe) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetContentEditingStatus": "mutation SetContentEditingStatus($publishEnabled: Boolean, $editingEnabled: Boolean) {\n  setContentEditingStatus(\n    publishEnabled: $publishEnabled\n    editingEnabled: $editingEnabled\n  ) {\n    contentEditingStatus {\n      editingEnabled\n      publishEnabled\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetGuidePreferences": "mutation SetGuidePreferences($readingLevel: AIGuideReadingLevel, $guideLanguageCode: String, $guideVoiceDescriptor: String, $showDABs: Boolean) {\n  setPreferencesForUser(\n    readingLevel: $readingLevel\n    guideLanguageCode: $guideLanguageCode\n    guideVoiceDescriptor: $guideVoiceDescriptor\n    showDABs: $showDABs\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "archiveAssignmentMutation": "mutation archiveAssignmentMutation($id: ID!, $curationNodeLevel: MasteryAssignmentCurationNodeLevel!) {\n  archiveMasteryAssignments(\n    archiveMasteryAssignmentsInputs: [{curationNodeLevel: $curationNodeLevel, id: $id}]\n  ) {\n    assignments {\n      id\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "StopResponse": "mutation StopResponse($input: StopResponseInput!) {\n  stopResponse(input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createAIGuidePrompt": "mutation createAIGuidePrompt($name: String!, $description: String!) {\n  createAIGuidePrompt(name: $name, description: $description) {\n    prompt {\n      id\n      name\n      description\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createOrUpdateAIGuidePromptDraft": "mutation createOrUpdateAIGuidePromptDraft($promptName: String!, $hashBeforeUpdate: String, $newIsReadyForReview: Boolean!, $newReleaseNotes: String!, $newPromptText: String!, $newConfigJSON: JSONString!) {\n  createOrUpdateAIGuidePromptDraft(\n    promptName: $promptName\n    hashBeforeUpdate: $hashBeforeUpdate\n    newIsReadyForReview: $newIsReadyForReview\n    newReleaseNotes: $newReleaseNotes\n    newPromptText: $newPromptText\n    newConfigJSON: $newConfigJSON\n  ) {\n    prompt {\n      id\n      draft {\n        hash\n        isReadyForReview\n        releaseNotes\n        promptText\n        configJSON\n        tokenCount\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "publishAIGuidePromptVersion": "mutation publishAIGuidePromptVersion($promptName: String!, $hash: String!) {\n  publishAIGuidePromptVersion(promptName: $promptName, hash: $hash) {\n    promptVersion {\n      id\n      versionNumber\n      releaseNotes\n      promptText\n      configJSON\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "editAssignmentMutation": "mutation editAssignmentMutation($id: ID!, $curationNodeLevel: MasteryAssignmentCurationNodeLevel!, $dueDate: DateTime!, $students: [ID]!) {\n  updateMasteryAssignment(\n    updateMasteryAssignmentInput: {id: $id, curationNodeLevel: $curationNodeLevel, dueDate: $dueDate, studentKaids: $students}\n  ) {\n    assignment {\n      id\n      type: curationNodeLevel\n      dueDate\n      course {\n        id\n        translatedTitle\n        iconUrl\n        __typename\n      }\n      studentData {\n        kaid\n        status\n        __typename\n      }\n      unit {\n        id\n        translatedTitle\n        iconUrl\n        __typename\n      }\n      studentProgressMedian\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createMasteryAssignmentsMutation": "mutation createMasteryAssignmentsMutation($input: CreateMasteryAssignmentsInput!) {\n  createMasteryAssignments(input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendAiGuideDisabledTestEmail": "mutation sendAiGuideDisabledTestEmail($reason: ReasonForDisablingAIGuide!) {\n  sendAiGuideDisabledTestEmail(reason: $reason) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendAiGuideNotEligibleTestEmail": "mutation sendAiGuideNotEligibleTestEmail($reason: ReasonForDisablingAIGuide!) {\n  sendAiGuideNotEligibleTestEmail(reason: $reason) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "BulkReviewThreadModeration": "mutation BulkReviewThreadModeration($threadIds: [String!]!) {\n  bulkReviewThreadModeration(threadIds: $threadIds) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "CloseThread": "mutation CloseThread($input: String!) {\n  closeThread(threadId: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDryRunMutation": "mutation districtDryRunMutation($districtID: String!, $dryRun: Boolean!) {\n  provisionKhanmigoDistrict(districtID: $districtID, dryRun: $dryRun) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n",
  "districtKhanmigoProvisioningMutation": "mutation districtKhanmigoProvisioningMutation($districtID: String!, $dryRun: Boolean!) {\n  provisionKhanmigoDistrict(districtID: $districtID, dryRun: $dryRun) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createProduct": "mutation createProduct($input: MutateProductInput!) {\n  createProduct(input: $input) {\n    product {\n      id\n      name\n      isActive\n      description\n      extProductID\n      validationBillingCountries\n      prices {\n        currency\n        extProductID\n        id\n        recurringInterval\n        recurringIntervalCount\n        type\n        unitAmount\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateProduct": "mutation updateProduct($id: ID!, $input: MutateProductInput!) {\n  updateProduct(id: $id, input: $input) {\n    product {\n      id\n      name\n      isActive\n      description\n      extProductID\n      validationBillingCountries\n      prices {\n        currency\n        extProductID\n        id\n        recurringInterval\n        recurringIntervalCount\n        type\n        unitAmount\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "EnableAIGuideDevadmin": "mutation EnableAIGuideDevadmin($kaid: String!) {\n  enableAIGuide(kaid: $kaid) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "setClassTestResultsReviewDate": "mutation setClassTestResultsReviewDate($classroomDescriptor: String!, $studentKaids: [String!]!, $reviewDate: DateTime!) {\n  setClassTestResultsReviewDate(\n    classroomDescriptor: $classroomDescriptor\n    studentKaids: $studentKaids\n    reviewDate: $reviewDate\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createStripeSession": "mutation createStripeSession($priceID: String!, $paymentFrequency: PaymentFrequency!, $cancelURL: String!, $successURL: String!) {\n  createStripeSession(\n    priceID: $priceID\n    paymentFrequency: $paymentFrequency\n    cancelURL: $cancelURL\n    successURL: $successURL\n  ) {\n    redirectURL\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "RemoveGuideCooldown": "mutation RemoveGuideCooldown($cooldown: RemoveCooldownInput!) {\n  removeCooldown(cooldown: $cooldown) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetGuideCooldown": "mutation SetGuideCooldown($cooldown: SetCooldownInput!) {\n  setCooldown(cooldown: $cooldown) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addDistrictCourseProgressDateRange": "mutation addDistrictCourseProgressDateRange($districtID: String!, $dateRange: CustomDateRange!) {\n  addDistrictCourseProgressDateRange(\n    districtID: $districtID\n    dateRange: $dateRange\n  ) {\n    dateRanges {\n      from\n      isCustom\n      isInProgress\n      lastUpdatedDate\n      numDays\n      rangeType\n      upTo\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeDistrictCourseProgressDateRanges": "mutation removeDistrictCourseProgressDateRanges($districtID: String!, $dateRanges: [CustomDateRange!]!) {\n  removeDistrictCourseProgressDateRanges(\n    districtID: $districtID\n    dateRanges: $dateRanges\n  ) {\n    dateRanges {\n      from\n      isCustom\n      isInProgress\n      lastUpdatedDate\n      numDays\n      rangeType\n      upTo\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setCollectingInterests": "mutation setCollectingInterests($kaid: String!, $collect: Boolean!) {\n  setCollectInterests(kaid: $kaid, collect: $collect) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteAllGuideInterests": "mutation deleteAllGuideInterests($kaid: String!) {\n  deleteInterests(kaid: $kaid) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteGuideInterest": "mutation deleteGuideInterest($kaid: String!, $key: String!) {\n  deleteInterest(kaid: $kaid, combinedKey: $key) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorEditChallenge": "mutation contentEditorEditChallenge($input: EditChallengeInput!, $sha: String!) {\n  editChallenge(input: $input, sha: $sha) {\n    challenge {\n      ...ChallengeRevision\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      conflictSha\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ChallengeRevision on ChallengeRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  authorName\n  code\n  codeFormat\n  tests\n  testsFormat\n  height\n  width\n  userAuthoredContentType\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "sendAiGuideDisabledDuringDistrictActivationTestEmail": "mutation sendAiGuideDisabledDuringDistrictActivationTestEmail {\n  sendAiGuideDisabledDuringDistrictActivationTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendDistrictKhamigoSevereFlagNotificationTestEmail": "mutation sendDistrictKhamigoSevereFlagNotificationTestEmail {\n  sendDistrictKhamigoSevereFlagNotificationTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "csEditorEditProject": "mutation csEditorEditProject($input: EditProjectInput!, $sha: String!) {\n  editProject(input: $input, sha: $sha) {\n    project {\n      ...ProjectRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ProjectRevision on ProjectRevision {\n  id\n  contentId\n  contentKind\n  slug\n  description\n  listed\n  title\n  sha\n  code\n  doNotPublish\n  projectEval\n  __typename\n}",
  "associateThreadWithFeedback": "mutation associateThreadWithFeedback($essaySessionID: String!, $feedbackID: String!, $threadID: String!) {\n  associateThreadWithFeedback(\n    essaySessionID: $essaySessionID\n    feedbackID: $feedbackID\n    threadID: $threadID\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createEssaySession": "mutation createEssaySession($essayText: String!, $essayVersion: Int!, $essayInstructions: String!, $studentGradeLevel: Int!, $paragraphIDToParagraphNumbers: [ParagraphIDToParagraphNumbersInputEntry!]!) {\n  createEssaySession(\n    essayInstructions: $essayInstructions\n    essayText: $essayText\n    essayVersion: $essayVersion\n    studentGradeLevel: $studentGradeLevel\n    paragraphIDToParagraphNumbers: $paragraphIDToParagraphNumbers\n  ) {\n    essaySessionID\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "saveLatestEssaySession": "mutation saveLatestEssaySession($essaySessionID: String!, $essayInstructions: String!, $studentGradeLevel: Int!, $essayText: String!, $essayTitle: String!, $essayVersion: Int!, $paragraphIDToParagraphNumbers: [ParagraphIDToParagraphNumbersInputEntry!]!) {\n  saveLatestEssayText(\n    essaySessionID: $essaySessionID\n    essayInstructions: $essayInstructions\n    studentGradeLevel: $studentGradeLevel\n    essayText: $essayText\n    essayTitle: $essayTitle\n    essayVersion: $essayVersion\n    paragraphIDToParagraphNumbers: $paragraphIDToParagraphNumbers\n    stage: REVISING\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateEssayFeedbackResolved": "mutation updateEssayFeedbackResolved($essaySessionID: String!, $feedbackID: String!, $isResolved: Boolean!) {\n  updateEssayFeedbackResolved(\n    essaySessionID: $essaySessionID\n    feedbackID: $feedbackID\n    isResolved: $isResolved\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "disableSevereModerationAlertsForAdmin": "mutation disableSevereModerationAlertsForAdmin($adminUDIUUID: String!, $districtID: String!) {\n  disableSevereModerationAlertsForAdmin(\n    adminUDIUUID: $adminUDIUUID\n    districtID: $districtID\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "enableSevereModerationAlertsForAdmins": "mutation enableSevereModerationAlertsForAdmins($adminUDIUUIDs: [String!]!, $districtID: String!) {\n  enableSevereModerationAlertsForAdmins(\n    adminUDIUUIDs: $adminUDIUUIDs\n    districtID: $districtID\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideApplySwagMutation": "mutation aiGuideApplySwagMutation($kaid: String!, $swagId: String!) {\n  applyAiGuideSwag(kaid: $kaid, swagID: $swagId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideClaimSwagMutation": "mutation aiGuideClaimSwagMutation($kaid: String!, $swagId: String!) {\n  claimAiGuideSwag(kaid: $kaid, swagID: $swagId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "finishEssaySession": "mutation finishEssaySession($essaySessionID: String!) {\n  finishEssaySession(essaySessionID: $essaySessionID) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "resetProjectProgress": "mutation resetProjectProgress($programId: ID!, $lessonId: ID!) {\n  resetProjectProgress(input: {programId: $programId, lessonId: $lessonId}) {\n    programProgress {\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      points\n      stashedCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resetChallengeProgress": "mutation resetChallengeProgress($programId: ID!, $lessonId: ID!) {\n  resetChallengeProgress(input: {programId: $programId, lessonId: $lessonId}) {\n    programProgress {\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      points\n      stashedCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "generateTotpTwoFactorSecret": "mutation generateTotpTwoFactorSecret($email: String!) {\n  generateTotpTwoFactorSecret(email: $email) {\n    totpSecret\n    totpProvisioningUri\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideEnrollViaConversionTrial": "mutation aiGuideEnrollViaConversionTrial($digitalTermsOfServiceAccepted: Boolean!) {\n  aiGuideEnrollViaConversionTrial(\n    digitalTermsOfServiceAccepted: $digitalTermsOfServiceAccepted\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "endFocusMode": "mutation endFocusMode($kaids: [String!]!) {\n  removeTeacherDirectedCooldowns(kaids: $kaids) {\n    errors {\n      code\n      debugMessage\n      failedFor\n      kaids\n      __typename\n    }\n    __typename\n  }\n}",
  "startFocusMode": "mutation startFocusMode($kaids: [String!]!, $cooldownEnd: DateTime!) {\n  setTeacherDirectedCooldowns(kaids: $kaids, cooldownEnd: $cooldownEnd) {\n    errors {\n      code\n      debugMessage\n      failedFor\n      kaids\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorEditExercise": "mutation contentEditorEditExercise($sha: String!, $input: EditExercisePropertiesInput!) {\n  editExerciseProperties(sha: $sha, input: $input) {\n    exercise {\n      ...ExerciseRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  numQuestionsPerProblemType\n  problemTypes {\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "spinOffPythonProgram": "mutation spinOffPythonProgram($originProgramOrContentId: String!, $originProgramKind: SpinoffOriginKind!, $originRevisionId: ID, $title: String!, $revision: ProgramRevisionInput!, $curationNodeSlug: String!) {\n  spinOffProgram(\n    origin: {programOrContentId: $originProgramOrContentId, kind: $originProgramKind}\n    originRevisionId: $originRevisionId\n    title: $title\n    revision: $revision\n    curationNodeSlug: $curationNodeSlug\n  ) {\n    program {\n      id\n      url\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createKhanmigoCheckoutStripeSession": "mutation createKhanmigoCheckoutStripeSession($priceID: String!, $paymentFrequency: PaymentFrequency!, $cancelURL: String!, $successURL: String!, $couponID: String) {\n  createStripeSession(\n    priceID: $priceID\n    paymentFrequency: $paymentFrequency\n    cancelURL: $cancelURL\n    successURL: $successURL\n    couponID: $couponID\n  ) {\n    redirectURL\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "enableTotpTwoFactor": "mutation enableTotpTwoFactor($secret: String!, $code: String!) {\n  enableTotpTwoFactor(secret: $secret, code: $code) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorEditAIGuideActivity": "mutation contentEditorEditAIGuideActivity($sha: String!, $input: EditAIGuideActivityInput!) {\n  editAIGuideActivity(sha: $sha, input: $input) {\n    aiGuideActivity {\n      ...AIGuideActivityRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AIGuideActivityRevision on AIGuideActivityRevision {\n  id\n  contentId\n  contentKind\n  slug\n  sha\n  listed\n  __typename\n}",
  "SubmitActivityAssignmentMutation": "mutation SubmitActivityAssignmentMutation($assignmentID: ID!, $threadID: ID!) {\n  submitActivityAssignment(assignmentID: $assignmentID, threadID: $threadID) {\n    notification {\n      classroomName\n      firstCompletion\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "CreateKhanLibraryFolder": "mutation CreateKhanLibraryFolder($name: String!, $kaLocale: String!) {\n  createFolder(name: $name, kaLocale: $kaLocale) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    folder {\n      id\n      kaLocale\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "MarkDistrictClass": "mutation MarkDistrictClass($classDescriptor: String!, $eduOrgID: String!) {\n  markDistrictClass(classDescriptor: $classDescriptor, eduOrgID: $eduOrgID) {\n    succeeded\n    __typename\n  }\n}",
  "UnmarkDistrictClass": "mutation UnmarkDistrictClass($classDescriptor: String!) {\n  unmarkDistrictClass(classDescriptor: $classDescriptor) {\n    succeeded\n    __typename\n  }\n}",
  "generateTwoFactorRecoveryCodes": "mutation generateTwoFactorRecoveryCodes {\n  generateTwoFactorRecoveryCodes {\n    recoveryCodes\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "editAdminUDIMutation": "mutation editAdminUDIMutation($urlsafeKey: ID!, $params: WriteAdminUDIParams!) {\n  editAdminUDI(urlsafeKey: $urlsafeKey, params: $params) {\n    adminUDI {\n      id\n      canManageAdmins\n      __typename\n    }\n    error {\n      code\n      conflictingUDI {\n        id\n        districtProvidedEmail\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "markDeletedAdminUDIMutation": "mutation markDeletedAdminUDIMutation($urlsafeKey: ID!) {\n  markDeletedAdminUDI(urlsafeKey: $urlsafeKey) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendActivationEmailMutation": "mutation resendActivationEmailMutation($urlsafeKey: ID!) {\n  resendActivationEmail(urlsafeKey: $urlsafeKey) {\n    emailSent\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "setUpAdminMutation": "mutation setUpAdminMutation($params: WriteAdminUDIParams!) {\n  setUpAndInviteAdmin(params: $params) {\n    adminUDI {\n      id\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createPythonProgram": "mutation createPythonProgram($title: String!, $revision: ProgramRevisionInput!, $curationNodeSlug: String!) {\n  createProgram(\n    title: $title\n    revision: $revision\n    curationNodeSlug: $curationNodeSlug\n    userAuthoredContentType: PYTHON\n    codeFormat: MULTI_FILE_JSON\n  ) {\n    program {\n      id\n      url\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "SetPartnershipSchoolYear": "mutation SetPartnershipSchoolYear($partnershipID: String!, $schoolYearDates: DistrictSchoolYearInput!) {\n  setPartnershipSchoolYear(\n    partnershipID: $partnershipID\n    schoolYearDates: $schoolYearDates\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteEssaySession": "mutation deleteEssaySession($id: String!) {\n  deleteEssaySession(essaySessionID: $id) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deletePythonProgram": "mutation deletePythonProgram($programId: ID!) {\n  deleteProgram(programID: $programId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "ProvisionKhanmigoPartnership": "mutation ProvisionKhanmigoPartnership($partnershipID: String!, $dryRun: Boolean!) {\n  provisionKhanmigoPartnership(partnershipID: $partnershipID, dryRun: $dryRun) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "RosterPartnership": "mutation RosterPartnership($partnershipID: String!) {\n  rosterPartnership(partnershipID: $partnershipID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "SetPartnershipKhanmigoPreference": "mutation SetPartnershipKhanmigoPreference($partnershipID: String!, $khanmigoPreference: KhanmigoEnrollmentForPartnership!) {\n  setPartnershipKhanmigoPreference(\n    partnershipID: $partnershipID\n    khanmigoPreference: $khanmigoPreference\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdatePartnershipRosterSyncing": "mutation UpdatePartnershipRosterSyncing($partnershipID: String!, $sync: Boolean!) {\n  updatePartnershipRosterSyncing(partnershipID: $partnershipID, sync: $sync) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "DeleteKhanLibraryFolder": "mutation DeleteKhanLibraryFolder($folderId: String!) {\n  deleteFolder(folderId: $folderId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "updateProgramCategory": "mutation updateProgramCategory($programId: ID!, $category: ProgramCategoryInput) {\n  updateProgramSettings(\n    programId: $programId\n    height: 0\n    width: 0\n    category: $category\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "setUpAdminsMutation": "mutation setUpAdminsMutation($params: [WriteAdminUDIParams!]!) {\n  setUpAdminUDIs(params: $params) {\n    adminUDI {\n      id\n      __typename\n    }\n    error {\n      code\n      conflictingUDI {\n        id\n        districtProvidedEmail\n        districtProvidedFirstName\n        districtProvidedLastName\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "saveFreeForTeachersEligibilityForm": "mutation saveFreeForTeachersEligibilityForm($teacherRoleOp: RoleOperation!, $birthdate: String!) {\n  setSettings(birthdate: $birthdate) {\n    errors {\n      code\n      __typename\n    }\n    __typename\n  }\n  updateUserRole(role: TEACHER, operation: $teacherRoleOp) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "CancelStripeSubscription": "mutation CancelStripeSubscription($subscriptionId: String!) {\n  cancelStripeSubscription(subscriptionId: $subscriptionId) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorCreateChallenge": "mutation contentEditorCreateChallenge($input: NewChallengeInput!) {\n  createChallenge(input: $input) {\n    challenge {\n      ...ChallengeRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ChallengeRevision on ChallengeRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  authorName\n  code\n  codeFormat\n  tests\n  testsFormat\n  height\n  width\n  userAuthoredContentType\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "updateShowDiscussions": "mutation updateShowDiscussions($districtID: String!, $enable: Boolean!) {\n  updateDistrictShowDiscussions(districtID: $districtID, enable: $enable) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "freeForTeachersEnroll": "mutation freeForTeachersEnroll($termsUrl: String!, $userAcceptedTerms: Boolean!, $countryCode: String!) {\n  activateTeacherTools(\n    termsUrl: $termsUrl\n    userAcceptedTerms: $userAcceptedTerms\n    countryCode: $countryCode\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "coeditingAutosave": "mutation coeditingAutosave($configName: String!, $threadId: String!, $title: String!, $prefix: String!, $selection: String!, $suffix: String!) {\n  saveCoeditingSnapshot(\n    configName: $configName\n    threadId: $threadId\n    title: $title\n    prefix: $prefix\n    selection: $selection\n    suffix: $suffix\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorCreateProject": "mutation contentEditorCreateProject($input: NewProjectInput!) {\n  createProject(input: $input) {\n    project {\n      ...ProjectRevision\n      __typename\n    }\n    error {\n      code\n      conflictSha\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ProjectRevision on ProjectRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  projectEval\n  authorName\n  code\n  codeFormat\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "activateNewAIGuideAccessPlan": "mutation activateNewAIGuideAccessPlan($blueprint: AIGuideAccessPlanDefaultBlueprint!) {\n  activateNewAIGuideAccessPlan(blueprint: $blueprint) {\n    activatedAccessPlan {\n      id\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "saveGettingStartedThreadId": "mutation saveGettingStartedThreadId($sessionId: String!, $threadId: String!) {\n  setEssaySessionThreadIDs(\n    essaySessionID: $sessionId\n    gettingStartedThreadID: $threadId\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "EnableDisableChildrenAIGuide": "mutation EnableDisableChildrenAIGuide($enableKAIDs: [String!]!, $disableKAIDs: [String!]!) {\n  aiGuideDeactivateChildAccounts(childKAIDs: $disableKAIDs) {\n    errors {\n      code\n      debugMessage\n      kaid\n      __typename\n    }\n    __typename\n  }\n  aiGuideActivateChildAccounts(childKAIDs: $enableKAIDs) {\n    errors {\n      code\n      debugMessage\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "saveThreadIds": "mutation saveThreadIds($sessionId: String!, $gettingStartedThreadId: String, $outliningThreadId: String, $draftingThreadId: String) {\n  setEssaySessionThreadIDs(\n    essaySessionID: $sessionId\n    gettingStartedThreadID: $gettingStartedThreadId\n    outliningThreadID: $outliningThreadId\n    draftingThreadID: $draftingThreadId\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "writingCoachCreateEssaySession": "mutation writingCoachCreateEssaySession($assignmentTitle: String!, $essayText: String!, $essayType: EssayType!, $essayVersion: Int!, $essayInstructions: String!, $minimumWordCount: Int, $studentGradeLevel: Int!, $paragraphIDToParagraphNumbers: [ParagraphIDToParagraphNumbersInputEntry!]!, $sampleEssayName: String) {\n  createEssaySession(\n    essayInstructions: $essayInstructions\n    essayText: $essayText\n    essayTitle: $assignmentTitle\n    essayType: $essayType\n    essayVersion: $essayVersion\n    minimumWordCount: $minimumWordCount\n    studentGradeLevel: $studentGradeLevel\n    paragraphIDToParagraphNumbers: $paragraphIDToParagraphNumbers\n    sampleEssayName: $sampleEssayName\n  ) {\n    essaySessionID\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "activateAIGuideAccessPlanByID": "mutation activateAIGuideAccessPlanByID($id: ID!) {\n  activateAIGuideAccessPlanByID(id: $id) {\n    activatedAccessPlan {\n      id\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deactivateAIGuideAccessPlanByID": "mutation deactivateAIGuideAccessPlanByID($accessPlanID: ID!, $reasons: [ReasonForDisablingAIGuide!]!, $explanation: String!) {\n  deactivateAIGuideAccessPlanByID(\n    accessPlanID: $accessPlanID\n    reasons: $reasons\n    explanation: $explanation\n  ) {\n    deactivatedAccessPlan {\n      id\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "saveLatestOutline": "mutation saveLatestOutline($essaySessionID: String!, $outline: String!, $outlineVersion: Int!) {\n  saveLatestEssayOutline(\n    essaySessionID: $essaySessionID\n    outline: $outline\n    outlineVersion: $outlineVersion\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "saveLatestEssayText": "mutation saveLatestEssayText($essayInstructions: String!, $essaySessionID: String!, $essayText: String!, $essayTitle: String!, $essayVersion: Int!, $paragraphIDToParagraphNumbers: [ParagraphIDToParagraphNumbersInputEntry!]!, $studentGradeLevel: Int!, $stage: WritingCoachEssayEditingStage!) {\n  saveLatestEssayText(\n    essayInstructions: $essayInstructions\n    essaySessionID: $essaySessionID\n    essayText: $essayText\n    essayTitle: $essayTitle\n    essayVersion: $essayVersion\n    paragraphIDToParagraphNumbers: $paragraphIDToParagraphNumbers\n    studentGradeLevel: $studentGradeLevel\n    stage: $stage\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "clearAdminUDIInfoMutation": "mutation clearAdminUDIInfoMutation($urlsafeKey: ID!) {\n  clearAdminUDIInfo(urlsafeKey: $urlsafeKey) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteEmailTemplate": "mutation deleteEmailTemplate($id: ID!) {\n  deleteEmailTemplate(id: $id) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "upsertEmailTemplate": "mutation upsertEmailTemplate($id: ID!, $name: String!, $textTemplate: String!, $htmlTemplate: String!, $exampleData: Map!) {\n  upsertEmailTemplate(\n    id: $id\n    name: $name\n    htmlTemplate: $htmlTemplate\n    textTemplate: $textTemplate\n    exampleData: $exampleData\n  ) {\n    updatedTemplate {\n      id\n      name\n      htmlTemplate\n      textTemplate\n      exampleData\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "reportPastedContent": "mutation reportPastedContent($essaySessionId: ID!, $pastedText: String!, $pasteLocation: EssayPasteLocation!) {\n  reportEssayPastedContent(\n    essaySessionID: $essaySessionId\n    pastedText: $pastedText\n    pasteLocation: $pasteLocation\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "writingCoachUpdateEssayFeedbackResolved": "mutation writingCoachUpdateEssayFeedbackResolved($essaySessionID: String!, $feedbackID: String!, $isResolved: Boolean!) {\n  updateEssayFeedbackResolved(\n    essaySessionID: $essaySessionID\n    feedbackID: $feedbackID\n    isResolved: $isResolved\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "sendEmail": "mutation sendEmail($email: SendEmailInput!) {\n  sendEmail(email: $email) {\n    emailsSent\n    errorMessages\n    errors {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "completeEssaySession": "mutation completeEssaySession($essaySessionID: String!) {\n  completeEssaySession(essaySessionID: $essaySessionID) {\n    error {\n      debugMessage\n      __typename\n    }\n    notification {\n      classroomName\n      __typename\n    }\n    __typename\n  }\n}",
  "setTeacherSchoolAffiliation": "mutation setTeacherSchoolAffiliation($countryCode: String!, $eduorgKeyId: ID!) {\n  userSettingsSetAffiliationCountryCode(countryCode: $countryCode) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n  setEduorgAffiliation(eduorgKeyId: $eduorgKeyId) {\n    user {\n      id\n      schoolAffiliation {\n        id\n        name\n        postalCode\n        location\n        __typename\n      }\n      affiliationCountryCode\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "disableTotpTwoFactor": "mutation disableTotpTwoFactor($kaid: String!) {\n  disableTotpTwoFactor(targetKaid: $kaid) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "getOrCreateEssaySessionForAssignment": "mutation getOrCreateEssaySessionForAssignment($assignmentId: String!) {\n  getOrCreateEssaySessionForAssignment(assignmentID: $assignmentId) {\n    essaySession {\n      id\n      essayTitle\n      lastUpdated\n      currentStage\n      assignmentId: assignmentID\n      completed\n      sampleEssayName\n      __typename\n    }\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "createAIGuideConversationTestCase": "mutation createAIGuideConversationTestCase($input: CreateAIGuideConversationTestCaseInput!) {\n  createAIGuideConversationTestCase(input: $input) {\n    testCase {\n      id\n      owningTeam\n      name\n      description\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteAIGuideConversationTestCase": "mutation deleteAIGuideConversationTestCase($id: ID!) {\n  deleteAIGuideConversationTestCase(id: $id) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "removeAIGuideConversationTestCaseInteraction": "mutation removeAIGuideConversationTestCaseInteraction($id: ID!, $interactionId: ID!) {\n  removeAIGuideConversationTestCaseInteraction(\n    id: $id\n    interactionId: $interactionId\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateAIGuideConversationTestCase": "mutation updateAIGuideConversationTestCase($id: ID!, $input: UpdateAIGuideConversationTestCaseInput!) {\n  updateAIGuideConversationTestCase(id: $id, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "upsertLegalDoc": "mutation upsertLegalDoc($legalDocument: LegalDocumentInput!, $notes: String!) {\n  upsertLegalDocument(legalDocument: $legalDocument, notes: $notes) {\n    legalDocument {\n      id\n      name\n      slug\n      isArchived\n      kaLocales\n      countryCodes\n      draftContent\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "publishLegalDocument": "mutation publishLegalDocument($id: ID!, $notes: String!) {\n  createLegalDocumentVersion(id: $id, notes: $notes) {\n    version {\n      id\n      content\n      publishedByKaid\n      publishedAt\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "setLegalDocArchived": "mutation setLegalDocArchived($legalDocID: ID!, $isArchived: Boolean!) {\n  setLegalDocumentArchivedStatus(legalDocID: $legalDocID, isArchived: $isArchived) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "reportEssayTextPastedContent": "mutation reportEssayTextPastedContent($essaySessionId: ID!, $textBeforePaste: String!, $essayVersionBeforePaste: Int!, $stage: WritingCoachEssayEditingStage!, $selectionStart: Int!, $selectionEnd: Int!, $pastedText: String!) {\n  reportEssayTextPastedContent(\n    essaySessionID: $essaySessionId\n    textBeforePaste: $textBeforePaste\n    essayVersionBeforePaste: $essayVersionBeforePaste\n    stage: $stage\n    selectionStart: $selectionStart\n    selectionEnd: $selectionEnd\n    pastedText: $pastedText\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "reportOutlinePastedContent": "mutation reportOutlinePastedContent($essaySessionId: ID!, $outlineBeforePaste: String!, $outlineVersionBeforePaste: Int!, $pasteLocation: EssayOutlinePasteLocation!, $pasteLocationPointer: String!, $selectionStart: Int!, $selectionEnd: Int!, $pastedText: String!) {\n  reportEssayOutlinePastedContent(\n    essaySessionID: $essaySessionId\n    outlineBeforePaste: $outlineBeforePaste\n    outlineVersionBeforePaste: $outlineVersionBeforePaste\n    pasteLocation: $pasteLocation\n    pasteLocationPointer: $pasteLocationPointer\n    selectionStart: $selectionStart\n    selectionEnd: $selectionEnd\n    pastedText: $pastedText\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "AddUserParentRole": "mutation AddUserParentRole($kaid: String) {\n  updateUserRole(kaid: $kaid, role: PARENT, operation: ADD) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "EditKhanLibraryFolder": "mutation EditKhanLibraryFolder($folderId: String!, $name: String!) {\n  editFolder(folderId: $folderId, name: $name) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    folder {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteEkbEntry": "mutation deleteEkbEntry($id: String!) {\n  deleteExpandedKnowledgeBaseEntry(id: $id) {\n    error {\n      debugMessage\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "upsertExpandedKnowledgeBaseEntry": "mutation upsertExpandedKnowledgeBaseEntry($id: String!, $category: String!, $text: String!, $url: String!) {\n  upsertExpandedKnowledgeBaseEntry(\n    id: $id\n    category: $category\n    text: $text\n    url: $url\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    upsertResult {\n      upsertedCount\n      code\n      details {\n        value\n        __typename\n      }\n      message\n      __typename\n    }\n    __typename\n  }\n}",
  "updateAIGuideConversationTestCaseInteraction": "mutation updateAIGuideConversationTestCaseInteraction($testCaseId: ID!, $interactionId: ID!, $input: UpdateAIGuideConversationTestCaseInteractionInput!) {\n  updateAIGuideConversationTestCaseInteraction(\n    testCaseId: $testCaseId\n    interactionId: $interactionId\n    input: $input\n  ) {\n    testCase {\n      id\n      interactions {\n        threadId\n        interactionId\n        success\n        name\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "freeForTeachersReferralMutation": "mutation freeForTeachersReferralMutation($referralCode: String!) {\n  trackUserReferralRedemption(referralCode: $referralCode) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "sendLearnerParentAIGuideActivatedTestEmail": "mutation sendLearnerParentAIGuideActivatedTestEmail {\n  sendLearnerParentAIGuideActivatedTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "sendTeacherToolsActivatedTestEmail": "mutation sendTeacherToolsActivatedTestEmail {\n  sendTeacherToolsActivatedTestEmail {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "archiveCoeditingDocument": "mutation archiveCoeditingDocument($threadID: String!) {\n  archiveCoeditingDocument(threadID: $threadID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "getOrCreateAssessmentTask": "mutation getOrCreateAssessmentTask($assessmentId: String!) {\n  getOrCreateAssessmentTask(input: {assessmentId: $assessmentId}) {\n    result {\n      task {\n        ...TaskFragment\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TaskFragment on AssessmentTask {\n  id\n  expirationTime\n  questionsCompleted\n  estimatedQuestionsRemaining\n  assessment {\n    id\n    __typename\n  }\n  currentStep {\n    stepNumber\n    stepId\n    type\n    assessmentItem {\n      id\n      exerciseId\n      itemData\n      __typename\n    }\n    ... on EYTQuestion {\n      conversationStarter\n      completionCriteria\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "writingCoachAssociateThreadWithFeedback": "mutation writingCoachAssociateThreadWithFeedback($essaySessionID: String!, $feedbackID: String!, $threadID: String!) {\n  associateThreadWithFeedback(\n    essaySessionID: $essaySessionID\n    feedbackID: $feedbackID\n    threadID: $threadID\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "writingCoachSaveLatestEssaySession": "mutation writingCoachSaveLatestEssaySession($essaySessionID: String!, $essayInstructions: String!, $studentGradeLevel: Int!, $essayText: String!, $essayTitle: String!, $essayVersion: Int!, $paragraphIDToParagraphNumbers: [ParagraphIDToParagraphNumbersInputEntry!]!) {\n  saveLatestEssayText(\n    essaySessionID: $essaySessionID\n    essayInstructions: $essayInstructions\n    studentGradeLevel: $studentGradeLevel\n    essayText: $essayText\n    essayTitle: $essayTitle\n    essayVersion: $essayVersion\n    paragraphIDToParagraphNumbers: $paragraphIDToParagraphNumbers\n    stage: REVISING\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "CompleteStandardQuestion": "mutation CompleteStandardQuestion($assessmentId: String!, $stepId: String!, $correct: Boolean!, $response: String!) {\n  complete: completeStandardQuestion(\n    input: {assessmentId: $assessmentId, stepId: $stepId, correct: $correct, response: $response}\n  ) {\n    result {\n      task {\n        ...TaskFragment\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TaskFragment on AssessmentTask {\n  id\n  expirationTime\n  questionsCompleted\n  estimatedQuestionsRemaining\n  assessment {\n    id\n    __typename\n  }\n  currentStep {\n    stepNumber\n    stepId\n    type\n    assessmentItem {\n      id\n      exerciseId\n      itemData\n      __typename\n    }\n    ... on EYTQuestion {\n      conversationStarter\n      completionCriteria\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "createUserCertificate": "mutation createUserCertificate($courseID: String!) {\n  createUserCertificate(courseID: $courseID) {\n    userCertificate {\n      id\n      kaid\n      courseID\n      createdAt\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "addFavoritedTeacherTool": "mutation addFavoritedTeacherTool($toolID: ID!, $configName: String!) {\n  aiGuideAddFavoritedTeacherTool(toolID: $toolID, configName: $configName) {\n    favoritedTool {\n      id\n      configName\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteFavoritedTeacherTool": "mutation deleteFavoritedTeacherTool($toolID: ID!, $configName: String!) {\n  aiGuideDeleteFavoritedTeacherTool(toolID: $toolID, configName: $configName) {\n    favoritedTool {\n      id\n      configName\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "addDistrictGoal": "mutation addDistrictGoal($districtID: String!, $input: DistrictGoalInput!) {\n  addDistrictGoal(districtID: $districtID, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "activateCanvasTeacherTools": "mutation activateCanvasTeacherTools($termsUrl: String!, $userAcceptedTerms: Boolean!) {\n  activateCanvasTeacherTools(\n    termsUrl: $termsUrl\n    userAcceptedTerms: $userAcceptedTerms\n  ) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteAssessmentTask": "mutation deleteAssessmentTask($assessmentId: String!) {\n  deleteAssessmentTask(input: {assessmentId: $assessmentId}) {\n    result {\n      deletedTaskId\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "modifyDistrictWithOptions": "mutation modifyDistrictWithOptions($existingDistrictID: ID!, $modifyDistrictOptions: ModifyDistrictOptions!) {\n  modifyDistrictWithOptions(\n    existingDistrictID: $existingDistrictID\n    options: $modifyDistrictOptions\n  ) {\n    district {\n      id\n      rosterID\n      name\n      isKmapDistrict\n      isK4dDistrict\n      rosterSource\n      nweaID\n      ncesID\n      isTest\n      sendActivationEmails\n      rosterSyncingEnabled\n      goLiveDate\n      kaLocale\n      schoolYearDates {\n        start {\n          nthWeek\n          dayOfWeek\n          month\n          __typename\n        }\n        end {\n          nthWeek\n          dayOfWeek\n          month\n          __typename\n        }\n        __typename\n      }\n      region\n      khanmigoPreference\n      khanmigoIncludeNonStudents\n      khanmigoIncludeStudents\n      khanmigoAdmins\n      khanmigoTeachers\n      khanmigoStudents\n      khanmigoStart\n      khanmigoEnd\n      khanmigoIncludedUsers {\n        id\n        districtProvidedEmail\n        __typename\n      }\n      khanmigoExcludedUsers {\n        id\n        districtProvidedEmail\n        __typename\n      }\n      khanmigoGradeEnrollment {\n        id\n        districtID\n        allOnGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        allOffGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        subsetGrades {\n          id\n          name\n          sortIndex\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    khanmigoIncludeUserMissingEmails\n    khanmigoExcludeUserMissingEmails\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "createDistrictWithOptions": "mutation createDistrictWithOptions($options: CreateDistrictOptions!) {\n  createDistrictWithOptions(options: $options) {\n    error {\n      code\n      __typename\n    }\n    district {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "createTransferAuthTokenMutation": "mutation createTransferAuthTokenMutation($canvasProfileKeyName: String) {\n  createTransferAuthToken(canvasProfileKeyName: $canvasProfileKeyName) {\n    token\n    __typename\n  }\n}",
  "setCanvasInfo": "mutation setCanvasInfo($profileKeyName: String!) {\n  setCanvasInfo(profileKeyName: $profileKeyName) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "signUpWithCanvas": "mutation signUpWithCanvas($profileKeyName: String!) {\n  signupWithCanvas(profileKeyName: $profileKeyName) {\n    error {\n      code\n      email\n      __typename\n    }\n    __typename\n  }\n}",
  "ClearCanvasUserId": "mutation ClearCanvasUserId($kaid: String!) {\n  setCanvasInfoAsAdmin(kaid: $kaid, canvasUserId: null) {\n    error {\n      code\n      __typename\n    }\n    user {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "addOrEditCourseMasteryTarget": "mutation addOrEditCourseMasteryTarget($districtID: String!, $input: [CourseMasteryTargetInput!]!) {\n  addOrEditCourseMasteryTarget(districtID: $districtID, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteAllCourseMasteryTargets": "mutation deleteAllCourseMasteryTargets($districtID: String!) {\n  deleteAllCourseMasteryTargets(districtID: $districtID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addOrEditLearningMinutesTarget": "mutation addOrEditLearningMinutesTarget($districtID: String!, $input: LearningMinutesTargetInput!) {\n  addOrEditLearningMinutesTarget(districtID: $districtID, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteLearningMinutesTarget": "mutation deleteLearningMinutesTarget($districtID: String!) {\n  deleteLearningMinutesTarget(districtID: $districtID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "copyCoeditingDocument": "mutation copyCoeditingDocument($documentID: String!, $snapshotID: String!) {\n  copyCoeditingDocument(documentID: $documentID, snapshotID: $snapshotID) {\n    newDocumentID\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addOrEditSkillsTarget": "mutation addOrEditSkillsTarget($districtID: String!, $input: SkillsTargetInput!, $toProficient: Boolean!) {\n  addOrEditSkillsTarget(\n    districtID: $districtID\n    input: $input\n    toProficient: $toProficient\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteSkillsTarget": "mutation deleteSkillsTarget($districtID: String!, $toProficient: Boolean!) {\n  deleteSkillsTarget(districtID: $districtID, toProficient: $toProficient) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addOrEditKhanmigoTarget": "mutation addOrEditKhanmigoTarget($districtID: String!, $input: KhanmigoTargetInput!) {\n  addOrEditKhanmigoTarget(districtID: $districtID, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteKhanmigoTarget": "mutation deleteKhanmigoTarget($districtID: String!) {\n  deleteKhanmigoTarget(districtID: $districtID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "addOrEditActivationTarget": "mutation addOrEditActivationTarget($districtID: String!, $input: ActivationTargetInput!) {\n  addOrEditActivationTarget(districtID: $districtID, input: $input) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteActivationTarget": "mutation deleteActivationTarget($districtID: String!) {\n  deleteActivationTarget(districtID: $districtID) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "ltiDynamicRegistration": "mutation ltiDynamicRegistration($openIDConfigurationURL: String!, $registrationToken: String!) {\n  ltiCanvasDynamicRegistration(\n    openIDConfigurationURL: $openIDConfigurationURL\n    registrationToken: $registrationToken\n  ) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "UpdatePhantomUserRole": "mutation UpdatePhantomUserRole($role: UserRole!, $operation: RoleOperation!) {\n  updateUserRole(role: $role, operation: $operation) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "writingCoachLogClientError": "mutation writingCoachLogClientError($message: String!, $errorType: String!, $essaySessionID: String!) {\n  writingCoachLogClientError(\n    message: $message\n    errorType: $errorType\n    essaySessionID: $essaySessionID\n  ) {\n    error {\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "Graphie2000_CreateGraphie": "mutation Graphie2000_CreateGraphie($svgBase64: String!, $data: JSONString!, $legacyJs: String) {\n  createGraphie(svgBase64: $svgBase64, data: $data, legacyJs: $legacyJs) {\n    hash\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "Graphie2000_DoGeneralAICompletion": "mutation Graphie2000_DoGeneralAICompletion($prompt: String!, $model: String, $temperature: Float, $maxTokens: Int, $stop: [String!]) {\n  doGeneralAICompletion(\n    input: {prompt: $prompt, model: $model, temperature: $temperature, maxTokens: $maxTokens, stop: $stop}\n  ) {\n    completion {\n      text\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "LinkCurrentUserToUMIByUUIDMutation": "mutation LinkCurrentUserToUMIByUUIDMutation($uuid: ID!) {\n  linkCurrentUserToUMIByUUID(uuid: $uuid) {\n    succeeded\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "CompleteEYTQuestion": "mutation CompleteEYTQuestion($assessmentId: String!, $stepId: String!, $response: String!, $updatedResponse: String, $correct: Boolean!, $updatedCorrect: Boolean, $conversationThreadID: String!, $hasKhanmigoError: Boolean) {\n  complete: completeEYTQuestion(\n    input: {assessmentId: $assessmentId, stepId: $stepId, response: $response, updatedResponse: $updatedResponse, correct: $correct, updatedCorrect: $updatedCorrect, conversationThreadID: $conversationThreadID, hasKhanmigoError: $hasKhanmigoError}\n  ) {\n    result {\n      task {\n        ...TaskFragment\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TaskFragment on AssessmentTask {\n  id\n  expirationTime\n  questionsCompleted\n  estimatedQuestionsRemaining\n  assessment {\n    id\n    __typename\n  }\n  currentStep {\n    stepNumber\n    stepId\n    type\n    assessmentItem {\n      id\n      exerciseId\n      itemData\n      __typename\n    }\n    ... on EYTQuestion {\n      conversationStarter\n      completionCriteria\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "createTestDistrict": "mutation createTestDistrict($name: String!, $karfJson: String!) {\n  createTestDistrict(name: $name, karfJson: $karfJson) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "updateTestDistrictRoster": "mutation updateTestDistrictRoster($districtId: ID!, $karfJson: String!) {\n  updateTestDistrictRoster(districtID: $districtId, karfJson: $karfJson) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "deleteDistrictGoal": "mutation deleteDistrictGoal($districtId: String!) {\n  deleteDistrictGoal(districtID: $districtId) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "ClearUMI": "mutation ClearUMI($id: ID!) {\n  clearUMI(id: $id) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "resendActivationEmailMutationForUMI": "mutation resendActivationEmailMutationForUMI($id: ID!) {\n  resendActivationEmailForUMI(id: $id) {\n    emailSent\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "EditUMI": "mutation EditUMI($id: ID!, $params: WriteUMIParams!) {\n  editUMI(id: $id, params: $params) {\n    umi {\n      id\n      canManageAdmins\n      __typename\n    }\n    error {\n      code\n      conflictingUMI {\n        id\n        email\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SetUpUMIs": "mutation SetUpUMIs($params: [WriteUMIParams!]!) {\n  setUpUMIs(params: $params) {\n    umi {\n      id\n      __typename\n    }\n    error {\n      code\n      conflictingUMI {\n        id\n        email\n        firstName\n        lastName\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"
}
