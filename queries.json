{
  "activatedDistrictTeachers": "query activatedDistrictTeachers($districtId: ID!, $pageSize: Int, $cursor: Int) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    rows {\n      isActivated\n      teacherKaid\n      teacherName\n      __typename\n    }\n    __typename\n  }\n}",
  "ActiveDistrictQuery": "query ActiveDistrictQuery($districtId: ID!, $from: DateTime, $upTo: DateTime, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $courseSIS: [String!]) {\n  districtById(districtId: $districtId) {\n    id\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      __typename\n    }\n    activeGrades(from: $from, upTo: $upTo, schoolIds: $schoolIds) {\n      id\n      sortIndex\n      name\n      __typename\n    }\n    activeCourseSISNumbers(\n      from: $from\n      upTo: $upTo\n      schoolIds: $schoolIds\n      gradeLevels: $gradeLevels\n    )\n    activeTeachers(\n      from: $from\n      upTo: $upTo\n      schoolIds: $schoolIds\n      gradeLevels: $gradeLevels\n      courseSIS: $courseSIS\n    ) {\n      id\n      kaid\n      displayNameForTeacher\n      __typename\n    }\n    __typename\n  }\n}",
  "ActivitySessionsQuery": "query ActivitySessionsQuery($studentKaid: String!, $endDate: Date, $startDate: Date, $courseType: String, $activityKind: String, $after: ID, $pageSize: Int) {\n  user(kaid: $studentKaid) {\n    id\n    activityLog(\n      endDate: $endDate\n      startDate: $startDate\n      courseType: $courseType\n      activityKind: $activityKind\n    ) {\n      time {\n        exerciseMinutes\n        totalMinutes\n        __typename\n      }\n      activitySessions(pageSize: $pageSize, after: $after) {\n        sessions {\n          ...ActivitySessionV1\n          ... on MasteryActivitySession {\n            correctCount\n            problemCount\n            skillLevels {\n              ...ActivitySessionSkillLevelsV1\n              exercise {\n                id\n                translatedTitle\n                __typename\n              }\n              __typename\n            }\n            task {\n              id\n              isRestarted\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        pageInfo {\n          nextCursor\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ActivitySessionSkillLevelsV1 on SkillLevelChange {\n  id\n  before\n  after\n  __typename\n}\n\nfragment ActivitySessionV1 on ActivitySession {\n  id\n  title\n  subtitle\n  activityKind {\n    id\n    __typename\n  }\n  durationMinutes\n  eventTimestamp\n  skillType\n  __typename\n}",
  "aiGuideEnrollments": "query aiGuideEnrollments($kaids: [String!]) {\n  aiGuideEnrollments(kaids: $kaids) {\n    enrollments {\n      disabledByModeratorDate\n      disabledByModeratorKAID\n      disabledByUserDate\n      enrolledAt\n      enrolledByKaid\n      enrollmentGroup\n      id\n      user {\n        id\n        kaid\n        email\n        nickname\n        age\n        isTeacher\n        isParent\n        joined\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideEnrollmentsMeta": "query aiGuideEnrollmentsMeta {\n  aiGuideEnrollmentsMeta {\n    countEnabled\n    countEnrolled\n    __typename\n  }\n}",
  "aiGuideInvitationInfo": "query aiGuideInvitationInfo($token: String!) {\n  aiGuideInvitationInfo(token: $token) {\n    digitalTermsOfServiceURL\n    isExpired\n    hasHitUsageLimit\n    __typename\n  }\n  isEnrolledInAIGuide\n  user {\n    id\n    age\n    aiGuideInvitationAcceptance(token: $token) {\n      acceptedAt\n      __typename\n    }\n    __typename\n  }\n}",
  "allCurationNodes": "query allCurationNodes {\n  allDomains {\n    id\n    slug\n    title\n    children: courseChildren {\n      id\n      slug\n      title\n      children: unitChildren {\n        id\n        slug\n        title\n        children: lessonChildren {\n          id\n          slug\n          title\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "allFlaggedGuideThreads": "query allFlaggedGuideThreads($moderationCategory: ModerationCategory, $moderationReviewStatus: ModerationReviewStatus, $moderationFlagSeverity: ModerationFlagSeverityFilter, $severeModerationAlertSent: Boolean, $moderationScore: Float, $afterDate: DateTime, $beforeDate: DateTime, $page: Int, $limit: Int) {\n  allFlaggedGuideThreads: allAiGuideThreads(\n    moderationCategory: $moderationCategory\n    moderationReviewStatus: $moderationReviewStatus\n    moderationStatus: FLAGGED\n    moderationFlagSeverity: $moderationFlagSeverity\n    severeModerationAlertSent: $severeModerationAlertSent\n    minModerationScore: $moderationScore\n    afterDate: $afterDate\n    beforeDate: $beforeDate\n    page: $page\n    limit: $limit\n  ) {\n    cursor\n    threads {\n      id\n      user {\n        id\n        kaid\n        nickname\n        joined\n        points\n        isAIGuideEnabled\n        age\n        isTeacher\n        isFormalTeacher\n        isParent\n        isChild\n        canAccessDistrictsHomepage\n        hasParents\n        hasCoach\n        isK4dStudent\n        isK4dTeacher\n        isStudentOfFormalTeacherActor\n        aiGuideFlaggedInteractionsCount\n        aiGuideAccessPlans {\n          id\n          isActive\n          description\n          enrollmentGroup\n          enrollmentGroupReferenceID\n          createdAt\n          __typename\n        }\n        userDistrictInfos(includeDeleted: false) {\n          id\n          uuid\n          district {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      summary\n      lastUpdatedAt\n      flagged\n      flaggedCategories\n      insights {\n        languages\n        __typename\n      }\n      interactions {\n        id\n        question\n        englishTranslatedQuestion\n        flagged\n        flaggedCategories\n        flaggedScores {\n          harassment\n          harassmentThreatening\n          hate\n          hateThreatening\n          illicit\n          illicitViolent\n          selfHarm\n          selfHarmInstructions\n          selfHarmIntent\n          sexual\n          sexualMinors\n          violence\n          violenceGraphic\n          kaOffensiveTerms\n          __typename\n        }\n        traceID\n        url\n        pageTitle\n        pageType\n        moderationFlagDetails {\n          flags {\n            text {\n              category\n              severity\n              __typename\n            }\n            textWithImages {\n              category\n              severity\n              __typename\n            }\n            wordSpotting {\n              category\n              severity\n              __typename\n            }\n            __typename\n          }\n          moderationResults {\n            textResults {\n              model\n              result {\n                categories {\n                  category\n                  value\n                  __typename\n                }\n                categoryScores {\n                  category\n                  value\n                  __typename\n                }\n                flagged\n                __typename\n              }\n              __typename\n            }\n            textWithImagesResults {\n              model\n              result {\n                categories {\n                  category\n                  value\n                  __typename\n                }\n                categoryScores {\n                  category\n                  value\n                  __typename\n                }\n                flagged\n                __typename\n              }\n              __typename\n            }\n            wordSpottingResults\n            __typename\n          }\n          __typename\n        }\n        imageMetadata {\n          id\n          llmSummary\n          llmDetailedDescription\n          llmPedagogicalContext\n          llmContentWarningCheck\n          llmImageType\n          llmMood\n          __typename\n        }\n        __typename\n      }\n      moderatorKAID\n      moderatorNickname\n      moderationReviewed\n      lastModerationReviewedDate\n      moderationFlagSeverity\n      severeModerationAlertSent\n      adminsNotifiedCount\n      __typename\n    }\n    __typename\n  }\n}",
  "allStandardsForSet": "query allStandardsForSet($setId: String!) {\n  setOfStandards(setId: $setId, region: \"*\") {\n    id\n    standards {\n      id\n      standardId\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "allTranslatableLocales": "query allTranslatableLocales {\n  locales(includeEnglish: false) {\n    id\n    lang: kaLocale\n    crowdinLocale\n    displayName\n    __typename\n  }\n}",
  "articleEditorQuery": "query articleEditorQuery($contentId: String!) {\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isEditableByCurrentUser(contentId: $contentId, contentKind: \"Article\")\n  isPublishableByCurrentUser(contentId: $contentId, contentKind: \"Article\")\n  articleRevisionById(id: $contentId) {\n    ...ArticleRevision\n    __typename\n  }\n}\n\nfragment ArticleRevision on ArticleRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailData\n  thumbnailCache\n  alternateSlugs\n  assessmentItemTags\n  authorNames\n  clarificationsEnabled\n  perseusContent\n  listed\n  __typename\n}",
  "articleEditorRedirectQuery": "query articleEditorRedirectQuery($contentId: String!) {\n  articleRevisionById(id: $contentId) {\n    id\n    slug\n    sha\n    __typename\n  }\n}",
  "articleForDiff": "query articleForDiff($sha: String!) {\n  articleRevisionBySha(sha: $sha) {\n    id\n    sha\n    perseusContent\n    __typename\n  }\n}",
  "articleRevisionsForDiff": "query articleRevisionsForDiff($contentId: String!) {\n  allArticleRevisionsById(id: $contentId) {\n    revisions {\n      id\n      cacheId: sha\n      sha\n      creationDate\n      createdBy {\n        id\n        nickname\n        __typename\n      }\n      __typename\n    }\n    hasMore\n    __typename\n  }\n}",
  "assessmentItemForDiff": "query assessmentItemForDiff($sha: String!) {\n  assessmentItemRevisionsBySHAs(shas: [$sha]) {\n    id\n    itemShapeType\n    itemData\n    __typename\n  }\n}",
  "assessmentItemRevisionsForDiff": "query assessmentItemRevisionsForDiff($contentId: String!) {\n  allAssessmentItemRevisionsByID(contentId: $contentId) {\n    id\n    cacheId: sha\n    sha\n    creationDate\n    createdBy {\n      id\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentCsvByClassQuery": "query assignmentCsvByClassQuery($classDescriptor: String!, $filters: CoachAssignmentFilters!, $orderBy: AssignmentOrder!, $after: ID, $teacherKaid: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    assignmentsPage(filters: $filters, orderBy: $orderBy, after: $after) {\n      assignments {\n        ...AssignmentCsvData\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentCsvData on Assignment {\n  assignedDate\n  startDate\n  dueDate\n  id\n  title\n  configuredActivityInputs\n  contents {\n    id\n    title: translatedTitle\n    defaultUrlPath\n    kind\n    __typename\n  }\n  itemCompletionStates: itemCompletionStatesForAllStudents {\n    student {\n      id\n      coachNickname(teacherKaid: $teacherKaid)\n      profileRoot\n      __typename\n    }\n    state\n    completedOn\n    bestScore {\n      numCorrect\n      numAttempted\n      __typename\n    }\n    exerciseAttempts {\n      id\n      isCompleted\n      isRestarted\n      numAttempted\n      numCorrect\n      lastAttemptDate\n      __typename\n    }\n    activitySubmissions {\n      thread {\n        id\n        __typename\n      }\n      __typename\n    }\n    essaySession {\n      id\n      currentStage\n      completed\n      lastUpdated\n      wordCount\n      draft {\n        id\n        feedbackList {\n          id\n          isPositive\n          isResolved\n          __typename\n        }\n        __typename\n      }\n      learningTime {\n        promptReviewingSeconds\n        outliningSeconds\n        draftingSeconds\n        revisingSeconds\n        __typename\n      }\n      originalityFlags {\n        isCritical\n        ... on UserEssayOriginalityFlagPasteIntoOutline {\n          location\n          wordCount\n          outlineVersionBeforePaste\n          __typename\n        }\n        ... on UserEssayOriginalityFlagPasteIntoText {\n          stage\n          wordCount\n          essayVersionBeforePaste\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  studentList {\n    id\n    cacheId\n    name\n    __typename\n  }\n  __typename\n}",
  "assignmentCsvByIdQuery": "query assignmentCsvByIdQuery($assignmentId: String!, $teacherKaid: String!) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      ...AssignmentCsvData\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentCsvData on Assignment {\n  assignedDate\n  startDate\n  dueDate\n  id\n  title\n  configuredActivityInputs\n  contents {\n    id\n    title: translatedTitle\n    defaultUrlPath\n    kind\n    __typename\n  }\n  itemCompletionStates: itemCompletionStatesForAllStudents {\n    student {\n      id\n      coachNickname(teacherKaid: $teacherKaid)\n      profileRoot\n      __typename\n    }\n    state\n    completedOn\n    bestScore {\n      numCorrect\n      numAttempted\n      __typename\n    }\n    exerciseAttempts {\n      id\n      isCompleted\n      isRestarted\n      numAttempted\n      numCorrect\n      lastAttemptDate\n      __typename\n    }\n    activitySubmissions {\n      thread {\n        id\n        __typename\n      }\n      __typename\n    }\n    essaySession {\n      id\n      currentStage\n      completed\n      lastUpdated\n      wordCount\n      draft {\n        id\n        feedbackList {\n          id\n          isPositive\n          isResolved\n          __typename\n        }\n        __typename\n      }\n      learningTime {\n        promptReviewingSeconds\n        outliningSeconds\n        draftingSeconds\n        revisingSeconds\n        __typename\n      }\n      originalityFlags {\n        isCritical\n        ... on UserEssayOriginalityFlagPasteIntoOutline {\n          location\n          wordCount\n          outlineVersionBeforePaste\n          __typename\n        }\n        ... on UserEssayOriginalityFlagPasteIntoText {\n          stage\n          wordCount\n          essayVersionBeforePaste\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  studentList {\n    id\n    cacheId\n    name\n    __typename\n  }\n  __typename\n}",
  "assignmentQueryForDevAdmin": "query assignmentQueryForDevAdmin($coachKaid: String!, $contentAssignmentId: String!) {\n  coach: user(kaid: $coachKaid) {\n    id\n    assignment: assignmentByThisUser(id: $contentAssignmentId) {\n      id\n      itemCompletionStates: itemCompletionStatesForAllStudents {\n        student {\n          id\n          kaid\n          coachNickname(teacherKaid: $coachKaid)\n          __typename\n        }\n        state\n        completedOn\n        bestScore {\n          numCorrect\n          numAttempted\n          __typename\n        }\n        exerciseAttempts {\n          id\n          isCompleted\n          isRestarted\n          numAttempted\n          numCorrect\n          lastAttemptDate\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "availableKinds": "query availableKinds {\n  permission {\n    content {\n      data {\n        availableKinds\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "availableRoles": "query availableRoles {\n  permission {\n    content {\n      data {\n        availableRoles\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "avatarDataForProfile": "query avatarDataForProfile($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    avatar {\n      name\n      imageSrc\n      __typename\n    }\n    __typename\n  }\n}",
  "careersPageQuery": "query careersPageQuery {\n  careers {\n    departments {\n      name\n      jobs {\n        title\n        location\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "checkPromotion": "query checkPromotion($promoName: String!) {\n  user {\n    id\n    promotion(promoName: $promoName)\n    __typename\n  }\n}",
  "checkUsername": "query checkUsername($username: String!) {\n  checkUsername(username: $username) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "ClassCodeByClassIdQuery": "query ClassCodeByClassIdQuery($classId: String!) {\n  user {\n    id\n    studentList(id: $classId) {\n      id\n      cacheId\n      signupCode\n      __typename\n    }\n    __typename\n  }\n}",
  "ClassDescriptorByClassCodeQuery": "query ClassDescriptorByClassCodeQuery($classCode: String!) {\n  studentList(classCode: $classCode) {\n    id\n    cacheId\n    descriptor\n    __typename\n  }\n}",
  "ClassInfo": "query ClassInfo($classCode: String!) {\n  joinByClassCodeInfo(classCode: $classCode) {\n    id\n    cacheId\n    name\n    signupCode\n    includesCentrallyOwnedDistrictData\n    __typename\n  }\n}",
  "ClassroomByCode": "query ClassroomByCode($classCode: String!) {\n  studentList(classCode: $classCode) {\n    cacheId\n    coachKaid\n    descriptor\n    hasAssignments\n    id\n    name\n    signupCode\n    __typename\n  }\n}",
  "ClassroomByDescriptorQuery": "query ClassroomByDescriptorQuery($descriptor: String!) {\n  classroomByDescriptor(descriptor: $descriptor) {\n    id\n    cacheId\n    name\n    key\n    descriptor\n    signupCode\n    autoGenerated\n    createdOn\n    googleClassId\n    googleClassName\n    countStudents\n    hasAssignments\n    hasCourseMasteryGoals(filter: NO_KMAP)\n    hasMasteryAssignments\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      courseSISName\n      sisSubjct\n      studentsHaveAccessToKhanmigo\n      teacherUserDistrictInfo {\n        id\n        khanmigoShould\n        __typename\n      }\n      school {\n        id\n        eduOrg {\n          id\n          name\n          country\n          postalCode\n          administrativeAreaLevel1\n          administrativeAreaLevel2\n          locality\n          __typename\n        }\n        __typename\n      }\n      isManuallyUnmarked\n      district {\n        id\n        isCentrallyRostered\n        schoolYearStart\n        schoolYearEnd\n        __typename\n      }\n      classWillBeRemovedInDays\n      __typename\n    }\n    topics {\n      id\n      key\n      slug\n      title: translatedTitle\n      translatedStandaloneTitle\n      iconPath\n      domainSlug\n      isHighSchoolSubject\n      masteryEnabled\n      subjectMasteryEnabled\n      learnableContentSummary {\n        countExercises\n        __typename\n      }\n      __typename\n    }\n    isK4dClassroom\n    includesCentrallyOwnedDistrictData\n    __typename\n  }\n  teacher: user {\n    id\n    hasPartnershipSchoolAffiliation\n    schoolAffiliation {\n      id\n      name\n      country\n      postalCode\n      administrativeAreaLevel1\n      administrativeAreaLevel2\n      locality\n      __typename\n    }\n    __typename\n  }\n}",
  "ClassroomDistrictInfosQuery": "query ClassroomDistrictInfosQuery($kaid: String) {\n  coach: user(kaid: $kaid) {\n    id\n    classroomDistrictInfos: coachedClassroomDistrictInfos(primaryTeacherOnly: true) {\n      id\n      studentList {\n        id\n        classDescriptor: descriptor\n        cacheId\n        name\n        signupCode\n        topics {\n          id\n          slug\n          translatedStandaloneTitle\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "classroomHasCourseMasteryAssignments": "query classroomHasCourseMasteryAssignments($classroomDescriptor: String!) {\n  classroomByDescriptorV2(descriptor: $classroomDescriptor) {\n    id\n    cacheId\n    hasMasteryAssignments\n    __typename\n  }\n}\n",
  "ClassSubjectMasteryProgress": "query ClassSubjectMasteryProgress($classDescriptor: String!, $topicId: String!, $teacherKaid: String!) {\n  topicById(id: $topicId) {\n    id\n    childTopics {\n      id\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    students {\n      id\n      coachNickname(teacherKaid: $teacherKaid)\n      subjectProgress(topicId: $topicId) {\n        currentMastery {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        unitProgresses {\n          topic {\n            id\n            __typename\n          }\n          currentMastery {\n            percentage\n            pointsEarned\n            pointsAvailable\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "ClassUnitMasteryProgress": "query ClassUnitMasteryProgress($classDescriptor: String!, $topicId: String!, $teacherKaid: String!) {\n  topicById(id: $topicId) {\n    id\n    translatedTitle\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    students {\n      id\n      coachNickname(teacherKaid: $teacherKaid)\n      unitProgress(topicId: $topicId) {\n        topic {\n          id\n          __typename\n        }\n        currentMastery {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "CoachAssignments": "query CoachAssignments($classDescriptor: String!, $assignmentFilters: CoachAssignmentFilters, $orderBy: AssignmentOrder!, $pageSize: Int, $after: ID) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    isK4dClassroom\n    assignmentsPage(\n      filters: $assignmentFilters\n      orderBy: $orderBy\n      after: $after\n      pageSize: $pageSize\n    ) {\n      assignments {\n        ...AssignmentFields\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentFields on Assignment {\n  id\n  studentKaids\n  isDraft\n  assignmentStatus\n  subjectSlug\n  numStudentsCompleted\n  assignedDate\n  startDate\n  dueDate\n  contentDescriptors\n  domainId\n  courseId\n  unitId\n  lessonId\n  contents {\n    id\n    title: translatedTitle\n    kind\n    defaultUrlPath\n    __typename\n  }\n  exerciseConfig {\n    itemPickerStrategy\n    __typename\n  }\n  title\n  instructions\n  configuredActivityInputs\n  __typename\n}",
  "coachDetails": "query coachDetails {\n  user {\n    id\n    parents {\n      id\n      __typename\n    }\n    teachers: coaches(coachType: TEACHER) {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditingStatus": "query contentEditingStatus {\n  contentEditingStatus {\n    editingEnabled\n    publishEnabled\n    __typename\n  }\n}",
  "contentEditingStatusQuery": "query contentEditingStatusQuery {\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n}",
  "contentEditorArticleRevisions": "query contentEditorArticleRevisions($contentId: String!) {\n  allArticleRevisionsById(id: $contentId) {\n    revisions {\n      ...contentEditorContentRevision\n      ...contentEditorLearnableContent\n      createdBy {\n        id\n        nickname\n        __typename\n      }\n      authorNames\n      content: perseusContent\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment contentEditorContentRevision on ContentRevision {\n  id\n  cacheId: sha\n  creationDate\n  __typename\n}\n\nfragment contentEditorLearnableContent on LearnableContentRevision {\n  doNotPublish\n  listed\n  slug\n  title\n  description\n  __typename\n}",
  "contentEditorExerciseRevisions": "query contentEditorExerciseRevisions($contentId: String!) {\n  allExerciseRevisionsById(id: $contentId) {\n    revisions {\n      ...contentEditorContentRevision\n      ...contentEditorLearnableContent\n      createdBy {\n        id\n        nickname\n        __typename\n      }\n      authorName\n      covers\n      prerequisites\n      relatedContent\n      completionCriteria: suggestedCompletionCriteria\n      problemItems: problemTypes {\n        name\n        relatedVideos\n        items {\n          id\n          sha\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment contentEditorContentRevision on ContentRevision {\n  id\n  cacheId: sha\n  creationDate\n  __typename\n}\n\nfragment contentEditorLearnableContent on LearnableContentRevision {\n  doNotPublish\n  listed\n  slug\n  title\n  description\n  __typename\n}",
  "contentEditorGetArticleRevision": "query contentEditorGetArticleRevision($id: String!) {\n  articleRevisionById(id: $id) {\n    ...ArticleRevision\n    __typename\n  }\n}\n\nfragment ArticleRevision on ArticleRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailData\n  thumbnailCache\n  alternateSlugs\n  assessmentItemTags\n  authorNames\n  clarificationsEnabled\n  perseusContent\n  listed\n  __typename\n}",
  "contentEditorGetExerciseRevision": "query contentEditorGetExerciseRevision($id: String!) {\n  exerciseRevisionById(id: $id) {\n    ...ExerciseRevision\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "contentEditorGetProjectRevision": "query contentEditorGetProjectRevision($id: String!) {\n  projectRevisionById(id: $id) {\n    ...ProjectRevision\n    __typename\n  }\n}\n\nfragment ProjectRevision on ProjectRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  projectEval\n  authorName\n  code\n  codeFormat\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "contentEditorGetPublishedExerciseProblems": "query contentEditorGetPublishedExerciseProblems($id: String!) {\n  exerciseById(id: $id) {\n    id\n    assessmentItems {\n      id\n      sha\n      __typename\n    }\n    __typename\n  }\n}",
  "contentEditorGetTalkthroughRevision": "query contentEditorGetTalkthroughRevision($id: String!) {\n  talkthroughRevisionById(id: $id) {\n    ...TalkthroughRevision\n    __typename\n  }\n}\n\nfragment TalkthroughRevision on TalkthroughRevision {\n  id\n  contentId\n  contentKind\n  slug\n  sha\n  listed\n  __typename\n}",
  "contentEditorGetVideoRevision": "query contentEditorGetVideoRevision($id: String!) {\n  videoRevisionById(id: $id) {\n    ...VideoRevision\n    __typename\n  }\n}\n\nfragment VideoRevision on VideoRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailCache\n  thumbnailData\n  alternateSlugs\n  assessmentItemTags\n  augmentedTranscript\n  authorNames\n  clarificationsEnabled\n  duration\n  kaUserLicense\n  keywords\n  youtubeId\n  listed\n  __typename\n}",
  "contentEditorPublishGetContentStageItem": "query contentEditorPublishGetContentStageItem($kaLocale: KALocale!, $contentKind: String!, $contentId: String!) {\n  contentStageItem(\n    kaLocale: $kaLocale\n    contentKind: $contentKind\n    contentId: $contentId\n  ) {\n    id\n    sha\n    sourceKaLocale\n    isModified\n    doNotPublish\n    __typename\n  }\n}",
  "contentEditorVideoRevisions": "query contentEditorVideoRevisions($contentId: String!) {\n  allVideoRevisionsById(id: $contentId) {\n    revisions {\n      ...contentEditorContentRevision\n      ...contentEditorLearnableContent\n      createdBy {\n        id\n        nickname\n        __typename\n      }\n      authorNames\n      augmentedTranscript\n      keywords\n      duration\n      youtubeId\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment contentEditorContentRevision on ContentRevision {\n  id\n  cacheId: sha\n  creationDate\n  __typename\n}\n\nfragment contentEditorLearnableContent on LearnableContentRevision {\n  doNotPublish\n  listed\n  slug\n  title\n  description\n  __typename\n}",
  "contentForDescriptors": "query contentForDescriptors($descriptors: [String]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    sha\n    __typename\n  }\n}",
  "ContentForLearnableContent": "query ContentForLearnableContent($id: String!, $kind: String!, $kaLocale: KALocale!) {\n  publishedContentVersion(kaLocale: $kaLocale) {\n    contentVersion\n    __typename\n  }\n  learnableContent(id: $id, kind: $kind) {\n    ...LearnableContentData\n    __typename\n  }\n}\n\nfragment LearnableContentData on LearnableContent {\n  id\n  contentKind\n  slug\n  translatedTitle\n  ... on Article {\n    articleClarificationsEnabled: clarificationsEnabled\n    translatedDescription\n    translatedPerseusContent\n    __typename\n  }\n  ... on Challenge {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    translatedTests\n    testsFormat\n    testStrings {\n      message\n      __typename\n    }\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Exercise {\n    problemTypeKind\n    __typename\n  }\n  ... on Interactive {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Project {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    translatedProjectEval\n    translatedProjectEvalTips\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Talkthrough {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    playback\n    subtitles {\n      endTime\n      kaIsValid\n      startTime\n      text\n      __typename\n    }\n    translatedDescription\n    translatedMp3Url\n    userAuthoredContentType\n    width\n    youtubeId\n    __typename\n  }\n  ... on TopicQuiz {\n    index\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    coveredTutorials {\n      id\n      translatedTitle\n      relativeUrl\n      allLearnableContent {\n        id\n        contentKind\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on TopicUnitTest {\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    coveredTutorials {\n      id\n      translatedTitle\n      relativeUrl\n      allLearnableContent {\n        id\n        contentKind\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on Video {\n    authorNames\n    videoAuthorList: authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    dateAdded\n    description\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    relativeUrl\n    descriptionHtml\n    nodeSlug\n    translatedDescription\n    translatedCustomTitleTag\n    subtitles {\n      endTime\n      kaIsValid\n      startTime\n      text\n      __typename\n    }\n    keyMoments {\n      startOffset\n      endOffset\n      label\n      __typename\n    }\n    educationalLevel\n    learningResourceType\n    __typename\n  }\n  __typename\n}",
  "ContentForPath": "query ContentForPath($path: String!, $countryCode: String!, $kaLocale: KALocale!) {\n  publishedContentVersion(kaLocale: $kaLocale) {\n    contentVersion\n    __typename\n  }\n  contentRoute(path: $path, countryCode: $countryCode) {\n    resolvedPath\n    listedPathData {\n      course {\n        ...CourseData\n        unitChildren {\n          ...UnitData\n          allOrderedChildren {\n            ... on Lesson {\n              ...LessonData\n              __typename\n            }\n            ... on TopicQuiz {\n              ...QuizMetadata\n              __typename\n            }\n            ... on TopicUnitTest {\n              ...UnitTestMetadata\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      lesson {\n        ...LessonData\n        __typename\n      }\n      content {\n        ...LearnableContentData\n        __typename\n      }\n      __typename\n    }\n    unlistedPathData {\n      course {\n        ...CourseData\n        unitChildren {\n          ...UnitData\n          allOrderedChildren {\n            ... on Lesson {\n              ...LessonData\n              __typename\n            }\n            ... on TopicQuiz {\n              ...QuizMetadata\n              __typename\n            }\n            ... on TopicUnitTest {\n              ...UnitTestMetadata\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      lesson {\n        ...LessonData\n        __typename\n      }\n      content {\n        ...LearnableContentData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseData on Course {\n  id\n  iconPath\n  masteryEnabled\n  relativeUrl\n  slug\n  translatedTitle\n  translatedDescription\n  isListedForLearners\n  translatedCustomTitleTag\n  contentKind\n  userAuthoredContentTypes\n  masterableExercises(includeDuplicates: true) {\n    id\n    __typename\n  }\n  parent {\n    id\n    contentKind\n    relativeUrl\n    slug\n    translatedTitle\n    __typename\n  }\n  lowerToc\n  curation {\n    hideSubjectIntro\n    hideCommunityQuestions\n    sponsorFooterAttribution {\n      footnoteHtml\n      imageBaselineAligned\n      imageCaption\n      imageUrl\n      taglineHtml\n      __typename\n    }\n    modules {\n      kind\n      untranslatedFields\n      ... on CourseIntroModule {\n        callToAction\n        description\n        link\n        title\n        video\n        __typename\n      }\n      ... on ActionListModule {\n        actions {\n          text\n          URL: url\n          contentDescriptor\n          __typename\n        }\n        kind\n        title\n        __typename\n      }\n      ... on PartnershipDescriptionModule {\n        description\n        imageCaption\n        imageUrl\n        isOutro\n        partnerUrl\n        partnerUrlText\n        __typename\n      }\n      ... on ContentCarouselModule {\n        referrer\n        title\n        contentDescriptors\n        __typename\n      }\n      __typename\n    }\n    excludedChildren\n    __typename\n  }\n  courseChallenge {\n    id\n    contentKind\n    slug\n    contentDescriptor\n    parentTopic {\n      id\n      parent {\n        id\n        masteryEnabled\n        __typename\n      }\n      __typename\n    }\n    urlWithinCurationNode\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    __typename\n  }\n  masteryChallenge {\n    id\n    contentKind\n    slug\n    contentDescriptor\n    parentTopic {\n      id\n      parent {\n        id\n        masteryEnabled\n        __typename\n      }\n      __typename\n    }\n    urlWithinCurationNode\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment LearnableContentData on LearnableContent {\n  id\n  contentKind\n  slug\n  translatedTitle\n  ... on Article {\n    articleClarificationsEnabled: clarificationsEnabled\n    translatedDescription\n    translatedPerseusContent\n    __typename\n  }\n  ... on Challenge {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    translatedTests\n    testsFormat\n    testStrings {\n      message\n      __typename\n    }\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Exercise {\n    problemTypeKind\n    __typename\n  }\n  ... on Interactive {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Project {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    codeFormat\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    translatedDescription\n    translatedProjectEval\n    translatedProjectEvalTips\n    userAuthoredContentType\n    width\n    __typename\n  }\n  ... on Talkthrough {\n    authorList {\n      name\n      __typename\n    }\n    canvasOnly\n    code\n    configVersion\n    defaultUrlPath\n    height\n    nodeSlug\n    playback\n    subtitles {\n      endTime\n      kaIsValid\n      startTime\n      text\n      __typename\n    }\n    translatedDescription\n    translatedMp3Url\n    userAuthoredContentType\n    width\n    youtubeId\n    __typename\n  }\n  ... on TopicQuiz {\n    index\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    coveredTutorials {\n      id\n      translatedTitle\n      relativeUrl\n      allLearnableContent {\n        id\n        contentKind\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on TopicUnitTest {\n    exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    coveredTutorials {\n      id\n      translatedTitle\n      relativeUrl\n      allLearnableContent {\n        id\n        contentKind\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on Video {\n    authorNames\n    videoAuthorList: authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    dateAdded\n    description\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    relativeUrl\n    descriptionHtml\n    nodeSlug\n    translatedDescription\n    translatedCustomTitleTag\n    subtitles {\n      endTime\n      kaIsValid\n      startTime\n      text\n      __typename\n    }\n    keyMoments {\n      startOffset\n      endOffset\n      label\n      __typename\n    }\n    educationalLevel\n    learningResourceType\n    __typename\n  }\n  __typename\n}\n\nfragment LearnableContentMetadata on LearnableContent {\n  id\n  canonicalUrl: defaultUrlPath\n  contentDescriptor\n  contentKind\n  parentTopic {\n    id\n    parent {\n      id\n      masteryEnabled\n      __typename\n    }\n    __typename\n  }\n  progressKey\n  slug\n  translatedCustomTitleTag\n  translatedDescription\n  translatedTitle\n  urlWithinCurationNode\n  ... on Challenge {\n    userAuthoredContentType\n    __typename\n  }\n  ... on Interactive {\n    userAuthoredContentType\n    __typename\n  }\n  ... on Project {\n    userAuthoredContentType\n    __typename\n  }\n  __typename\n}\n\nfragment LessonData on Lesson {\n  id\n  relativeUrl\n  slug\n  translatedDescription\n  translatedTitle\n  key\n  curatedChildren(includeUnlisted: false) {\n    ... on LearnableContent {\n      ...LearnableContentMetadata\n      __typename\n    }\n    ... on Exercise {\n      exerciseLength\n      isSkillCheck\n      sponsored\n      thumbnailUrl\n      timeEstimate {\n        lowerBound\n        upperBound\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment QuizMetadata on TopicQuiz {\n  ...LearnableContentMetadata\n  exerciseLength\n  index\n  timeEstimate {\n    lowerBound\n    upperBound\n    __typename\n  }\n  __typename\n}\n\nfragment UnitData on Unit {\n  id\n  iconPath\n  masteryEnabled\n  relativeUrl\n  slug\n  isListedForLearners\n  translatedCustomTitleTag\n  translatedDescription\n  translatedTitle\n  unlistedAncestorIds\n  __typename\n}\n\nfragment UnitTestMetadata on TopicUnitTest {\n  ...LearnableContentMetadata\n  exerciseLength\n  timeEstimate {\n    lowerBound\n    upperBound\n    __typename\n  }\n  __typename\n}",
  "ContentItemAssignmentStatusesQuery": "query ContentItemAssignmentStatusesQuery($classDescriptor: String!, $contentDescriptors: [String!]!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    contentAssignmentStatuses: nonDraftAssignmentStatusesForContentDescriptors(\n      contentDescriptors: $contentDescriptors\n    )\n    __typename\n  }\n}",
  "contentTabThreeLevelQuery": "query contentTabThreeLevelQuery($courseId: String!, $region: String!, $locale: String!) {\n  courseById(id: $courseId) {\n    id\n    children: curatedChildren {\n      ...CourseFieldsThreeLevels\n      ...LessonAndChildrenFieldsThreeLevels\n      ... on Unit {\n        id\n        description\n        iconPath\n        key\n        kind\n        mappedStandardIds(locale: $locale, region: $region)\n        title: translatedTitle\n        children: allOrderedChildren {\n          __typename\n          ...LearnableContentFieldsThreeLevels\n          ...QuizAndTestFields\n          ...LessonAndChildrenFieldsThreeLevels\n        }\n        __typename\n      }\n      __typename\n    }\n    courseChallenge {\n      id\n      contentId\n      defaultUrlPath\n      description\n      kind\n      mappedStandardIds(locale: $locale, region: $region)\n      title: translatedTitle\n      expectedDoNCount: exerciseLength\n      __typename\n    }\n    domain: parent {\n      id\n      contentKind\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseFieldsThreeLevels on Course {\n  ... on Course {\n    id\n    description\n    iconPath\n    key\n    kind\n    mappedStandardIds(locale: $locale, region: $region)\n    title: translatedTitle\n    __typename\n  }\n  __typename\n}\n\nfragment LearnableContentFieldsThreeLevels on LearnableContent {\n  contentId\n  description\n  kind\n  mappedStandardIds(locale: $locale, region: $region)\n  nodeUrl: urlWithinTopic\n  slug\n  title: translatedTitle\n  __typename\n}\n\nfragment LessonAndChildrenFieldsThreeLevels on Lesson {\n  ... on Lesson {\n    id\n    description\n    iconPath\n    key\n    kind\n    mappedStandardIds(locale: $locale, region: $region)\n    title: translatedTitle\n    children {\n      __typename\n      ...LearnableContentFieldsThreeLevels\n      ... on Video {\n        duration\n        imageUrl\n        translatedYoutubeId\n        youtubeId\n        __typename\n      }\n      ... on Exercise {\n        expectedDoNCount: exerciseLength(useDefault: true)\n        problemTypeKind\n        __typename\n      }\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment QuizAndTestFields on LearnableContent {\n  ... on TopicQuiz {\n    coveredTutorials {\n      id\n      title: translatedTitle\n      __typename\n    }\n    defaultUrlPath\n    expectedDoNCount: exerciseLength\n    index\n    __typename\n  }\n  ... on TopicUnitTest {\n    defaultUrlPath\n    expectedDoNCount: exerciseLength\n    __typename\n  }\n  __typename\n}",
  "contentTabTwoLevelQuery": "query contentTabTwoLevelQuery($courseId: String!, $region: String!, $locale: String!) {\n  courseById(id: $courseId) {\n    id\n    children: curatedChildren {\n      ...CourseFields\n      ...LessonAndChildrenFields\n      ... on Unit {\n        id\n        description\n        iconPath\n        key\n        kind\n        mappedStandardIds(locale: $locale, region: $region)\n        title: translatedTitle\n        children: allOrderedChildren {\n          __typename\n          ...LearnableContentFields\n          ...QuizAndTestFields\n          ... on Lesson {\n            id\n            description\n            iconPath\n            key\n            kind\n            mappedStandardIds(locale: $locale, region: $region)\n            title: translatedTitle\n            __typename\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n    courseChallenge {\n      id\n      contentId\n      defaultUrlPath\n      description\n      kind\n      mappedStandardIds(locale: $locale, region: $region)\n      title: translatedTitle\n      expectedDoNCount: exerciseLength\n      __typename\n    }\n    domain: parent {\n      id\n      contentKind\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseFields on Course {\n  ... on Course {\n    id\n    description\n    iconPath\n    key\n    kind\n    mappedStandardIds(locale: $locale, region: $region)\n    title: translatedTitle\n    __typename\n  }\n  __typename\n}\n\nfragment LearnableContentFields on LearnableContent {\n  contentId\n  description\n  kind\n  mappedStandardIds(locale: $locale, region: $region)\n  nodeUrl: urlWithinTopic\n  slug\n  title: translatedTitle\n  __typename\n}\n\nfragment LessonAndChildrenFields on Lesson {\n  ... on Lesson {\n    id\n    description\n    iconPath\n    key\n    kind\n    mappedStandardIds(locale: $locale, region: $region)\n    title: translatedTitle\n    children {\n      __typename\n      ...LearnableContentFields\n      ... on Video {\n        duration\n        imageUrl\n        translatedYoutubeId\n        youtubeId\n        __typename\n      }\n      ... on Exercise {\n        expectedDoNCount: exerciseLength(useDefault: true)\n        problemTypeKind\n        __typename\n      }\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment QuizAndTestFields on LearnableContent {\n  ... on TopicQuiz {\n    coveredTutorials {\n      id\n      title: translatedTitle\n      __typename\n    }\n    defaultUrlPath\n    expectedDoNCount: exerciseLength\n    index\n    __typename\n  }\n  ... on TopicUnitTest {\n    defaultUrlPath\n    expectedDoNCount: exerciseLength\n    __typename\n  }\n  __typename\n}",
  "Content_GetRelatedAssessmentItems": "query Content_GetRelatedAssessmentItems($exerciseId: String) {\n  exerciseById(id: $exerciseId) {\n    id\n    prerequisites\n    assessmentItems {\n      id\n      itemShapeType\n      itemData\n      problemType\n      __typename\n    }\n    __typename\n  }\n}",
  "courseChallengeAttemptQuery": "query courseChallengeAttemptQuery($topicId: String!) {\n  user {\n    id\n    latestCourseChallengeAttempt(courseId: $topicId) {\n      id\n      numAttempted\n      numCorrect\n      completedDate\n      canResume\n      isCompleted\n      __typename\n    }\n    __typename\n  }\n}\n",
  "courseEditorFoldersByCourseIds": "query courseEditorFoldersByCourseIds($courseIds: [String!]) {\n  allFolders(courseIdsFilter: $courseIds) {\n    id\n    __typename\n  }\n}",
  "CourseEditorGetCourse": "query CourseEditorGetCourse($courseId: String!, $snapshotId: Int) {\n  course(id: $courseId, snapshotId: $snapshotId) {\n    ...CourseStructure\n    __typename\n  }\n}\n\nfragment CourseStructure on CourseRevision {\n  id\n  contentId\n  translationFingerprint\n  title\n  description\n  customTitleTag\n  customDescriptionTag\n  slugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  legacySlugRedirects {\n    redirectType\n    oldSlug\n    contentId\n    __typename\n  }\n  slugsEverPublished\n  locale\n  slug\n  importedCurationData\n  linkedCourseStructure\n  curriculumKey\n  footerHtml\n  allowedExerciseTypes\n  hideCommunityQuestions\n  listed\n  importable\n  masteryEnabled\n  introSetting {\n    title\n    description\n    buttonText\n    internalContent\n    externalUrl\n    hideButton\n    __typename\n  }\n  sponsorSetting {\n    sponsorImageSetting {\n      imageUrl\n      imageCaption\n      imageBaselineAligned\n      __typename\n    }\n    taglineHtml\n    __typename\n  }\n  operationId\n  lastPublishedOperationId\n  snapshotCount\n  intent\n  resources\n  changeLog\n  items {\n    ... on CourseRevisionUnit {\n      type\n      id\n      cacheId\n      contentId\n      slugSuffix\n      translationFingerprint\n      title\n      description\n      listed\n      customTitleTag\n      customDescriptionTag\n      masteryEnabled\n      unitTestContentId\n      unitTestSlug\n      intent\n      resources\n      changeLog\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          translationFingerprint\n          title\n          description\n          listed\n          intent\n          resources\n          changeLog\n          items {\n            ... on CourseRevisionContent {\n              type\n              id\n              cacheId\n              contentId\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          slug\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetCourseEntity": "query courseEditorGetCourseEntity($id: String!) {\n  courseById(id: $id) {\n    id\n    creationDate\n    belongsToCourseId\n    courseSnapshotId\n    __typename\n  }\n}",
  "courseEditorGetEditingCourseRevisions": "query courseEditorGetEditingCourseRevisions($ids: [String!]!) {\n  courses(ids: $ids) {\n    ...FolderCourseRevisionFragment\n    __typename\n  }\n}\n\nfragment FolderCourseRevisionFragment on CourseRevision {\n  id\n  contentId\n  title\n  items {\n    ... on CourseRevisionUnit {\n      id\n      cacheId\n      contentId\n      slugSuffix\n      title\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          title\n          items {\n            ... on CourseRevisionContent {\n              id\n              cacheId\n              contentKind\n              contentId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetEditingIdentity": "query courseEditorGetEditingIdentity($descriptors: [String!]!) {\n  revisionsForDescriptors(descriptors: $descriptors) {\n    ... on ContentRevision {\n      id\n      sha\n      __typename\n    }\n    ... on LearnableContentRevision {\n      doNotPublish\n      slug\n      sourceKaLocale\n      importedFromSha\n      listed\n      title\n      __typename\n    }\n    ... on ExerciseRevision {\n      interimAssessmentType\n      suggestedCompletionCriteria\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetEditingRevisions": "query courseEditorGetEditingRevisions($descriptors: [String!]!) {\n  revisionsForDescriptors(descriptors: $descriptors) {\n    ... on ContentRevision {\n      id\n      contentKind\n      sha\n      __typename\n    }\n    ... on LearnableContentRevision {\n      doNotPublish\n      slug\n      sourceKaLocale\n      importedFromSha\n      listed\n      title\n      translatedTitle\n      description\n      mappedStandards(region: \"*\") {\n        id\n        setId\n        standardId\n        __typename\n      }\n      __typename\n    }\n    ... on ArticleRevision {\n      perseusContent\n      __typename\n    }\n    ... on ExerciseRevision {\n      assessmentItems {\n        id\n        itemData\n        name\n        authorNames\n        perseusApiMajorVersion\n        __typename\n      }\n      problemTypes {\n        name\n        items {\n          id\n          __typename\n        }\n        __typename\n      }\n      interimAssessmentType\n      suggestedCompletionCriteria\n      __typename\n    }\n    ... on VideoRevision {\n      youtubeId\n      subtitles {\n        text\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetEditingTitles": "query courseEditorGetEditingTitles($descriptors: [String!]!) {\n  revisionsForDescriptors(descriptors: $descriptors) {\n    ... on ContentRevision {\n      id\n      sha\n      __typename\n    }\n    ... on LearnableContentRevision {\n      title\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetFolderCourses": "query courseEditorGetFolderCourses($ids: [String!]!) {\n  courses(ids: $ids) {\n    id\n    contentId\n    title\n    importable\n    allowedExerciseTypes\n    __typename\n  }\n}",
  "courseEditorGetFolderGroups": "query courseEditorGetFolderGroups {\n  folderGroups {\n    myFolders {\n      ...LibraryFolder\n      __typename\n    }\n    otherFolders {\n      ...LibraryFolder\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment LibraryFolder on Folder {\n  id\n  name\n  kaLocale\n  courseIds\n  __typename\n}",
  "courseEditorGetPublishedArticle": "query courseEditorGetPublishedArticle($contentId: String!) {\n  articleById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedChallenge": "query courseEditorGetPublishedChallenge($contentId: String!) {\n  challengeById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedCourseRevisions": "query courseEditorGetPublishedCourseRevisions($ids: [String!]!) {\n  courses(ids: $ids) {\n    id\n    lastPublishedData {\n      ...FolderCourseRevisionFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment FolderCourseRevisionFragment on CourseRevision {\n  id\n  contentId\n  title\n  items {\n    ... on CourseRevisionUnit {\n      id\n      cacheId\n      contentId\n      slugSuffix\n      title\n      items {\n        ... on CourseRevisionLesson {\n          type\n          id\n          cacheId\n          contentId\n          slugSuffix\n          title\n          items {\n            ... on CourseRevisionContent {\n              id\n              cacheId\n              contentKind\n              contentId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on CourseRevisionQuiz {\n          type\n          id\n          cacheId\n          contentId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedEntities": "query courseEditorGetPublishedEntities($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    kind\n    sha\n    slug\n    listed\n    sourceLanguage\n    title\n    translatedTitle\n    description\n    translatedDescription\n    mappedStandards(region: \"*\") {\n      id\n      setId\n      standardId\n      __typename\n    }\n    ... on Article {\n      perseusContent\n      __typename\n    }\n    ... on Exercise {\n      assessmentItems {\n        id\n        itemData\n        authorNames\n        name\n        perseusApiMajorVersion\n        problemType\n        __typename\n      }\n      interimAssessmentType\n      suggestedCompletionCriteria\n      __typename\n    }\n    ... on Video {\n      youtubeId\n      subtitles {\n        text\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetPublishedExercise": "query courseEditorGetPublishedExercise($contentId: String!) {\n  exerciseById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedIdentity": "query courseEditorGetPublishedIdentity($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    sha\n    slug\n    listed\n    sourceLanguage\n    title\n    ... on Exercise {\n      interimAssessmentType\n      suggestedCompletionCriteria\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetPublishedInteractive": "query courseEditorGetPublishedInteractive($contentId: String!) {\n  interactiveById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedProject": "query courseEditorGetPublishedProject($contentId: String!) {\n  projectById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedTalkthrough": "query courseEditorGetPublishedTalkthrough($contentId: String!) {\n  talkthroughById(id: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetPublishedTitlesForCurationIDs": "query courseEditorGetPublishedTitlesForCurationIDs($ids: [String!]!) {\n  topicsById(ids: $ids) {\n    id\n    contentKind\n    title\n    translatedTitle\n    __typename\n  }\n}",
  "courseEditorGetPublishedTitlesForDescriptors": "query courseEditorGetPublishedTitlesForDescriptors($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    contentKind\n    title\n    translatedTitle\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopic": "query courseEditorGetPublishedTopic($contentId: String!) {\n  topicById(id: $contentId) {\n    id\n    kind\n    creationDate\n    relativeUrl\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicChildren": "query courseEditorGetPublishedTopicChildren($ids: [String!]!) {\n  topicsById(ids: $ids) {\n    id\n    children {\n      ... on LearnableContent {\n        id\n        contentKind\n        __typename\n      }\n      ... on CurationNode {\n        id\n        contentKind\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicPathsForCurationIDs": "query courseEditorGetPublishedTopicPathsForCurationIDs($ids: [String!]!) {\n  topicsById(ids: $ids) {\n    id\n    contentKind\n    slug\n    topicPaths {\n      path {\n        id\n        kind\n        slug\n        content {\n          ... on CurationNode {\n            title\n            __typename\n          }\n          ... on LearnableContent {\n            title\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicPathsForDescriptors": "query courseEditorGetPublishedTopicPathsForDescriptors($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    contentKind\n    slug\n    topicPaths {\n      path {\n        id\n        kind\n        slug\n        content {\n          ... on CurationNode {\n            title\n            __typename\n          }\n          ... on LearnableContent {\n            title\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicQuiz": "query courseEditorGetPublishedTopicQuiz($slug: String!) {\n  topicQuiz(slug: $slug) {\n    id\n    kind\n    creationDate\n    defaultUrlPath\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicSlugById": "query courseEditorGetPublishedTopicSlugById($id: String!) {\n  topicById(id: $id) {\n    id\n    slug\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicStandardIds": "query courseEditorGetPublishedTopicStandardIds($slug: String!, $locale: String!) {\n  topic(slug: $slug) {\n    id\n    mappedStandardIds(locale: $locale)\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicsTitles": "query courseEditorGetPublishedTopicsTitles($ids: [String!]!) {\n  topicsById(ids: $ids) {\n    id\n    title\n    __typename\n  }\n}",
  "courseEditorGetPublishedTopicUnitTest": "query courseEditorGetPublishedTopicUnitTest($slug: String!) {\n  topicUnitTest(slug: $slug) {\n    id\n    kind\n    creationDate\n    defaultUrlPath\n    __typename\n  }\n}",
  "courseEditorGetPublishedVideo": "query courseEditorGetPublishedVideo($contentId: String!) {\n  videoById(contentId: $contentId) {\n    ...LearnableContent\n    __typename\n  }\n}\n\nfragment LearnableContent on LearnableContent {\n  id\n  kind\n  creationDate\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "courseEditorGetStatus": "query courseEditorGetStatus {\n  contentEditingStatus {\n    publishEnabled\n    __typename\n  }\n}",
  "courseEditorGetSyncOperationsSummary": "query courseEditorGetSyncOperationsSummary($sourceId: String!, $sourceSnapshotId: Int!, $targetId: String!, $targetOperationId: Int!) {\n  syncOperationsSummary(\n    sourceId: $sourceId\n    sourceSnapshotId: $sourceSnapshotId\n    targetId: $targetId\n    targetOperationId: $targetOperationId\n  ) {\n    type\n    count\n    __typename\n  }\n}",
  "CourseEditorIsLinkedCourseInSync": "query CourseEditorIsLinkedCourseInSync($sourceId: String!, $sourceSnapshotId: Int!, $targetId: String!, $targetOperationId: Int!) {\n  isLinkedCourseInSync(\n    sourceId: $sourceId\n    sourceSnapshotId: $sourceSnapshotId\n    targetId: $targetId\n    targetOperationId: $targetOperationId\n  )\n}",
  "courseEditorSearchEditing": "query courseEditorSearchEditing($text: String!, $filters: [EditingSearchFilter!]) {\n  searchEditingContent(text: $text, filters: $filters, limit: 100) {\n    ... on ContentRevision {\n      id\n      contentKind\n      contentId\n      __typename\n    }\n    ... on LearnableContentRevision {\n      title\n      translatedTitle\n      __typename\n    }\n    ... on ExerciseRevision {\n      interimAssessmentType\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorSearchPublished": "query courseEditorSearchPublished($query: String!, $contentKinds: [String]) {\n  searchPage(\n    query: $query\n    contentKinds: $contentKinds\n    numResults: 125\n    region: \"*\"\n  ) {\n    results {\n      contentKind: kind\n      contentId\n      learnableContent {\n        id\n        title\n        translatedTitle\n        ... on Exercise {\n          interimAssessmentType\n          __typename\n        }\n        __typename\n      }\n      curationNode {\n        id\n        title\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "CourseEditor_MobileRegions": "query CourseEditor_MobileRegions {\n  curricula: curriculums {\n    key\n    name\n    country\n    region\n    __typename\n  }\n}",
  "CourseMenuEditorQuery": "query CourseMenuEditorQuery {\n  curricula: curriculums(includeEmptyCurriculum: true) {\n    key\n    courseMenuRevision {\n      ...CourseMenuRevisionFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseMenuRevisionFields on CourseMenuRevision {\n  id\n  sha\n  groups {\n    identifier\n    translatedTitle\n    href\n    isNew\n    children {\n      identifier\n      translatedTitle\n      href\n      isNew\n      nonContentLink\n      loggedOutHref\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CourseMenuEditor_ContentStageItems": "query CourseMenuEditor_ContentStageItems($kaLocale: KALocale!, $descriptors: [String!]!) {\n  contentStageItems(kaLocale: $kaLocale, contentDescriptors: $descriptors) {\n    id\n    contentId\n    isModified\n    __typename\n  }\n}",
  "CourseMenuEditor_DefaultCourseMenu": "query CourseMenuEditor_DefaultCourseMenu($curriculum: String!) {\n  defaultCourseMenu: learnMenuTopics(curriculum: $curriculum) {\n    identifier: slug\n    translatedTitle\n    href\n    isNew\n    children {\n      identifier: slug\n      translatedTitle\n      href\n      isNew\n      loggedOutHref\n      nonContentLink\n      __typename\n    }\n    __typename\n  }\n}",
  "courseProgresses": "query courseProgresses($courseIds: [String!]!) {\n  user {\n    id\n    courseProgresses(courseIds: $courseIds) {\n      ...CourseProgress\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseProgress on SubjectProgress {\n  topic {\n    domainSlug\n    iconPath\n    id\n    slug\n    title: translatedTitle\n    relativeUrl\n    __typename\n  }\n  unitProgresses {\n    lastWorkedOn\n    currentMastery {\n      percentage\n      __typename\n    }\n    topic {\n      id\n      iconPath\n      title: translatedTitle\n      relativeUrl\n      masteryEnabled\n      subjectMasteryEnabled\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "CoursesUnitsQuery": "query CoursesUnitsQuery($selectedMasteryCourseIds: [String]!) {\n  coursesByIds(ids: $selectedMasteryCourseIds) {\n    id\n    slug\n    translatedTitle\n    unitChildren {\n      id\n      translatedTitle\n      learnableContentSummary {\n        countExercises\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "csvReportStatus": "query csvReportStatus($kaid: String!, $partnershipID: String, $districtID: String) {\n  getLastNAdminReportsForUser(\n    kaid: $kaid\n    partnershipID: $partnershipID\n    districtID: $districtID\n    topNResults: 1\n  ) {\n    adminReports {\n      id\n      kaid\n      status\n      blobCreatedAt\n      blobExpiresAt\n      reportType\n      startDate\n      endDate\n      selectedNode {\n        ... on MetaDistrict {\n          id\n          name\n          levelHeight\n          hasCentralRostering\n          children {\n            ... on MetaDistrict {\n              id\n              __typename\n            }\n            ... on District {\n              id\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        ... on District {\n          id\n          name\n          levelHeight\n          isCentrallyRostered\n          activeGrades {\n            id\n            name\n            sortIndex\n            __typename\n          }\n          schools {\n            id\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      children {\n        ... on MetaDistrict {\n          id\n          name\n          levelHeight\n          __typename\n        }\n        ... on District {\n          id\n          name\n          levelHeight\n          __typename\n        }\n        ... on School {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      createdAt\n      fileName\n      fileSize\n      bands\n      courseSISValues\n      teacherKaids\n      course {\n        id\n        key\n        title\n        translatedTitle\n        masteryEnabled\n        __typename\n      }\n      grades\n      strandKey\n      notifyByEmail\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "curationNodePublishedInfo": "query curationNodePublishedInfo($contentId: String!) {\n  publishedInfo: topicById(id: $contentId) {\n    id\n    relativeUrl\n    creationDate\n    __typename\n  }\n}",
  "curationPageRevision": "query curationPageRevision($id: String!) {\n  curationPageRevision: curationPageRevisionById(id: $id) {\n    contentKind\n    id\n    title\n    slug\n    alternateSlugs\n    description\n    listed\n    sponsored\n    showCurationModule\n    lowerToc\n    customDescriptionTag\n    customTitleTag\n    curationData\n    curriculumKey\n    sha\n    hasUnpublishedChanges\n    __typename\n  }\n}",
  "curriculumsQuery": "query curriculumsQuery {\n  curriculums {\n    country\n    key\n    name\n    region\n    __typename\n  }\n}",
  "DevadminListAuthors": "query DevadminListAuthors {\n  allAuthorOptions {\n    id\n    name\n    __typename\n  }\n}",
  "digitalSatAuthTransfer": "query digitalSatAuthTransfer {\n  user {\n    id\n    transferAuthToken\n    __typename\n  }\n}",
  "discussionAvatar": "query discussionAvatar {\n  user {\n    id\n    avatar {\n      name\n      imageSrc\n      __typename\n    }\n    __typename\n  }\n}",
  "DisplayNameQuery": "query DisplayNameQuery($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    userDistrictInfos(includeDeleted: true) {\n      id\n      displayNameForTeacher\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictActivationByGradeLevelContainerUsingNewService": "query DistrictActivationByGradeLevelContainerUsingNewService($districtId: ID!, $schoolIds: [ID!]) {\n  activationReportByGradeLevel(districtId: $districtId, schoolIds: $schoolIds) {\n    rows {\n      gradeLevel {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      numStudentsStartedAnActivity\n      studentTargetStatus\n      teacherTargetStatus\n      __typename\n    }\n    updatedAt\n    totalRow {\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      numStudentsStartedAnActivity\n      studentTargetStatus\n      teacherTargetStatus\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictActivationBySchoolContainerUsingNewService": "query DistrictActivationBySchoolContainerUsingNewService($districtId: ID!, $schoolIds: [ID!]) {\n  activationReportBySchool(districtId: $districtId, schoolIds: $schoolIds) {\n    rows {\n      school {\n        id\n        name\n        __typename\n      }\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      __typename\n    }\n    updatedAt\n    totalRow {\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictActivationByTeacherContainer": "query DistrictActivationByTeacherContainer($districtId: ID!, $schoolIds: [ID!], $teacherIDs: [ID!], $pageSize: Int, $cursor: Int) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    schoolIds: $schoolIds\n    teacherIDs: $teacherIDs\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    rows {\n      teacherId\n      teacherName\n      numStudentsTotal\n      numStudentsActivated\n      isActivated\n      numStudentsStartedAnActivity\n      studentTargetStatus\n      __typename\n    }\n    totalCount\n    updatedAt\n    target {\n      percentage\n      __typename\n    }\n    totalRow {\n      numStudentsTotal\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictGradeLevelsQuery": "query DistrictGradeLevelsQuery {\n  userFacingGradeLevels {\n    id\n    name\n    __typename\n  }\n}",
  "districtHomepage": "query districtHomepage($districtID: String!, $schoolIDs: [ID!]) {\n  districtHomepage(districtID: $districtID, schoolIDs: $schoolIDs) {\n    dateInfo {\n      lastUpdatedDate\n      from\n      upTo\n      __typename\n    }\n    studentActivations {\n      numRosteredStudents\n      numActivated\n      numWithLearningTime\n      __typename\n    }\n    weeklyLearningTime {\n      startOfWeek\n      endOfWeek\n      numActivatedStudents\n      numStudentsNoTime\n      numStudentsLt15\n      numStudents15to30\n      numStudentsGt30\n      __typename\n    }\n    top5Courses: top5CourseSchool {\n      course {\n        id\n        title\n        domainId: parentTopicId\n        __typename\n      }\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        __typename\n      }\n      __typename\n    }\n    top5Grades: top5GradeSchool {\n      gradeLevel {\n        id\n        name\n        __typename\n      }\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        __typename\n      }\n      __typename\n    }\n    mapOnlyTop5Grades: top5GradeSchool(mapOnly: true) {\n      gradeLevel {\n        id\n        name\n        __typename\n      }\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtHomepageProgress": "query districtHomepageProgress($districtID: String!, $schoolIDs: [ID!], $mapOnly: Boolean) {\n  districtHomepage(districtID: $districtID, schoolIDs: $schoolIDs) {\n    top5CourseSchool {\n      course {\n        id\n        title\n        domainId: parentTopicId\n        __typename\n      }\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        __typename\n      }\n      __typename\n    }\n    top5GradeSchool(mapOnly: $mapOnly) {\n      gradeLevel {\n        id\n        name\n        __typename\n      }\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictPrimaryOfferingAsTeacher": "query DistrictPrimaryOfferingAsTeacher {\n  districtPrimaryOfferingAsTeacher\n}",
  "DistrictQuery": "query DistrictQuery($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    partnership {\n      ... on MetaDistrict {\n        id\n        __typename\n      }\n      ... on District {\n        id\n        __typename\n      }\n      __typename\n    }\n    name\n    rosterSource\n    isTest\n    hasKhanmigo\n    isKmapDistrict\n    isK4dDistrict\n    isCentrallyRostered\n    region\n    activeGrades {\n      id\n      sortIndex\n      name\n      __typename\n    }\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      __typename\n    }\n    schoolYearStart\n    schoolYearEnd\n    kaLocale\n    ancestors {\n      id\n      levelHeight\n      name\n      __typename\n    }\n    countryCode\n    levelHeight\n    goal {\n      type\n      createdBy {\n        id\n        kaid\n        __typename\n      }\n      __typename\n    }\n    schoolYearStart\n    __typename\n  }\n}",
  "districts": "query districts($filter: String!, $excludeTeacherDirected: Boolean!) {\n  districts(filter: $filter, excludeTeacherDirected: $excludeTeacherDirected) {\n    id\n    name\n    rosterID\n    rosterSource\n    nweaID\n    ncesID\n    rosterSyncingEnabled\n    sendActivationEmails\n    rosterDistrictAdmins\n    deletedAt\n    isDowngraded\n    isTest\n    onlySevereAIModeration\n    isKmapDistrict\n    isK4dDistrict\n    isOldNWEA\n    lastRostered\n    lastTestPull\n    goLiveDate\n    region\n    countryCode\n    schoolYearDates {\n      start {\n        nthWeek\n        dayOfWeek\n        month\n        __typename\n      }\n      end {\n        nthWeek\n        dayOfWeek\n        month\n        __typename\n      }\n      __typename\n    }\n    schoolYearStart\n    schoolYearEnd\n    hasKhanmigo\n    khanmigoPreference\n    khanmigoIncludeNonStudents\n    khanmigoIncludeStudents\n    khanmigoStudents\n    khanmigoAdmins\n    khanmigoTeachers\n    khanmigoTotal\n    khanmigoUDIsShould\n    khanmigoUDIsHave\n    khanmigoTokenCapacity\n    khanmigoTokenUsage\n    khanmigoStart\n    khanmigoEnd\n    hasAssessments\n    researchOptOut\n    hasLMSConnect\n    __typename\n  }\n}",
  "DistrictSkillsMAPProgressQuery": "query DistrictSkillsMAPProgressQuery($districtID: String!, $filters: DistrictSkillsMAPProgressFilters!, $region: String!) {\n  districtSkillsMAPProgress(districtID: $districtID, filters: $filters) {\n    totalStudents\n    numSkillsWorkedOn\n    rows {\n      exercise {\n        id\n        title\n        mappedStandards(region: $region) {\n          id\n          setId\n          standardId\n          __typename\n        }\n        __typename\n      }\n      numAttempted\n      numFamiliar\n      numProficient\n      numMastered\n      numStudents\n      __typename\n    }\n    __typename\n  }\n  kmapTopics {\n    id\n    title\n    band\n    bandGradeName\n    bandKey\n    strandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    learnableContentPage(\n      pageParams: {pageSize: 1000, after: 0, contentKinds: [EXERCISE]}\n    ) {\n      contents {\n        exerciseID: id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictSkillsProgressQuery": "query DistrictSkillsProgressQuery($districtID: String!, $filters: DistrictSkillsProgressFilters!, $courseID: String!, $region: String!) {\n  districtSkillsProgress(districtID: $districtID, filters: $filters) {\n    totalStudents\n    numSkillsWorkedOn\n    rows {\n      exercise {\n        id\n        title: translatedTitle\n        mappedStandards(region: $region) {\n          id\n          setId\n          standardId\n          __typename\n        }\n        __typename\n      }\n      numAttempted\n      numFamiliar\n      numProficient\n      numMastered\n      numStudents\n      __typename\n    }\n    __typename\n  }\n  courseById(id: $courseID) {\n    id\n    title: translatedTitle\n    unitChildren {\n      unitID: id\n      unitTitle: translatedTitle\n      learnableContentPage(\n        pageParams: {pageSize: 1000, after: 0, contentKinds: [EXERCISE]}\n      ) {\n        contents {\n          exerciseID: id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtsMetrics": "query districtsMetrics($filter: String!) {\n  districts(filter: $filter) {\n    id\n    lastNRosterJobs(numJobs: 1) {\n      numClassrooms\n      numStudents\n      numTeachers\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictStudentsWithSkillProgressQuery": "query DistrictStudentsWithSkillProgressQuery($districtID: String!, $filters: DistrictStudentsWithSkillProgressFilters, $masteryLevel: UpdatedMasteryLevel!, $skillId: String!) {\n  districtStudentsWithSkillProgress(\n    districtID: $districtID\n    masteryLevel: $masteryLevel\n    skillId: $skillId\n    filters: $filters\n  ) {\n    id\n    kaid\n    displayNameForTeacher\n    __typename\n  }\n}",
  "districtTeachers": "query districtTeachers($districtId: ID!, $pageSize: Int, $cursor: Int) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    rows {\n      teacherId\n      teacherName\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictWithRosterJobs": "query DistrictWithRosterJobs($districtId: ID!, $numJobs: Int!) {\n  districtById(districtId: $districtId) {\n    id\n    lastNRosterJobs(numJobs: $numJobs) {\n      createdAt\n      numClassrooms\n      numSchools\n      numStudents\n      numTeachers\n      numDistrictAdmins\n      numSchoolAdmins\n      rosterSource\n      timeSpentSeconds\n      numNewClassrooms\n      numNewSchools\n      numNewStudents\n      numNewTeachers\n      numNewDistrictAdmins\n      numNewSchoolAdmins\n      numRemovedClassrooms\n      numRemovedSchools\n      numRemovedStudents\n      numRemovedTeachers\n      numRemovedDistrictAdmins\n      numRemovedSchoolAdmins\n      numInGracePeriodStudents\n      numInGracePeriodTeachers\n      status\n      failureReason\n      failureStacktrace\n      stackdriverLogUrl\n      __typename\n    }\n    __typename\n  }\n}",
  "domainRevision": "query domainRevision($id: String!) {\n  domainRevision: domainRevisionById(id: $id) {\n    contentKind\n    id\n    title\n    slug\n    alternateSlugs\n    description\n    listed\n    sponsored\n    showCurationModule\n    lowerToc\n    customDescriptionTag\n    customTitleTag\n    curationData\n    sha\n    hasUnpublishedChanges\n    __typename\n  }\n}",
  "domainRevisionsTreeQuery": "query domainRevisionsTreeQuery {\n  domainRevisions {\n    id\n    title\n    contentId\n    contentKind\n    sha\n    hasUnpublishedChanges\n    listed\n    children {\n      ... on CourseRevision {\n        id\n        title\n        contentId\n        contentKind\n        hasUnpublishedChanges\n        listed\n        __typename\n      }\n      ... on CurationPageRevision {\n        id\n        title\n        contentId\n        contentKind\n        hasUnpublishedChanges\n        listed\n        __typename\n      }\n      __typename\n    }\n    childrenDescriptors {\n      canonicalId\n      contentId\n      kind\n      __typename\n    }\n    __typename\n  }\n}",
  "DownloadTeachersGuide": "query DownloadTeachersGuide($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    userDistrictInfos {\n      id\n      district {\n        id\n        downloadTeachersGuide\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "EditableTeamPageEntries": "query EditableTeamPageEntries {\n  teamPage: editableTeamPageEntries {\n    currentUserHasEmployeeEntry\n    entries {\n      ...entry\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment entry on TeamPageEntryForEditing {\n  id\n  isPet\n  isIntern\n  isAlum\n  hasPendingChanges\n  draftContent {\n    id\n    name\n    altNames\n    startDate\n    isAlum\n    mainPhotoURL\n    hoverPhotoURL\n    title\n    bio\n    contactLinks {\n      type\n      editValue\n      editPrefix\n      url\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "EduOrgsInfo": "query EduOrgsInfo($postalCode: String!) {\n  eduOrganizations(postalCode: $postalCode) {\n    keyId: id\n    name\n    postalCode\n    locationDisplayText: location\n    __typename\n  }\n}",
  "exerciseEditorGetAllArticleRevisions": "query exerciseEditorGetAllArticleRevisions {\n  allArticleRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "exerciseEditorGetAllExerciseRevisions": "query exerciseEditorGetAllExerciseRevisions {\n  allExerciseRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "exerciseEditorGetAllVideoRevisions": "query exerciseEditorGetAllVideoRevisions {\n  allVideoRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "ExtractPerseusStrings": "query ExtractPerseusStrings($perseusJson: String!) {\n  extractPerseusStrings(perseusJson: $perseusJson)\n}",
  "FeedbackAnswers": "query FeedbackAnswers($parentKey: String!) {\n  feedbackByKey(key: $parentKey) {\n    ... on QuestionFeedback {\n      answers {\n        isLocked\n        isPinned\n        replyCount\n        appearsAsDeleted\n        author {\n          id\n          kaid\n          nickname\n          avatar {\n            name\n            imageSrc\n            __typename\n          }\n          __typename\n        }\n        content\n        date\n        definitelyNotSpam\n        deleted\n        downVoted\n        expandKey\n        feedbackType\n        flaggedBy\n        flags\n        focusUrl\n        focus {\n          kind\n          id\n          translatedTitle\n          relativeUrl\n          __typename\n        }\n        fromVideoAuthor\n        key\n        lowQualityScore\n        notifyOnAnswer\n        permalink\n        qualityKind\n        replyCount\n        replyExpandKeys\n        showLowQualityNotice\n        sumVotesIncremented\n        upVoted\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "feedbackForAuthor": "query feedbackForAuthor($kaid: String!, $feedbackType: FeedbackType!, $cursor: String, $limit: Int, $sort: Int) {\n  feedbackForAuthor(\n    kaid: $kaid\n    feedbackType: $feedbackType\n    cursor: $cursor\n    limit: $limit\n    sort: $sort\n  ) {\n    feedback {\n      replyCount\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        __typename\n      }\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      ... on QuestionFeedback {\n        hasAnswered\n        isOld\n        __typename\n      }\n      ... on AnswerFeedback {\n        question {\n          content\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    isMod\n    isComplete\n    cursor\n    __typename\n  }\n}",
  "feedbackQuery": "query feedbackQuery($topicId: String!, $focusKind: String!, $cursor: String, $limit: Int, $feedbackType: FeedbackType!, $currentSort: Int, $qaExpandKey: String) {\n  feedback(\n    focusId: $topicId\n    cursor: $cursor\n    limit: $limit\n    feedbackType: $feedbackType\n    focusKind: $focusKind\n    sort: $currentSort\n    qaExpandKey: $qaExpandKey\n    answersLimit: 1\n  ) {\n    feedback {\n      isLocked\n      isPinned\n      replyCount\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      badges {\n        name\n        icons {\n          smallUrl\n          __typename\n        }\n        description\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flaggedByUser\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      ... on QuestionFeedback {\n        hasAnswered\n        answers {\n          isLocked\n          isPinned\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        isOld\n        answerCount\n        __typename\n      }\n      ... on AnswerFeedback {\n        question {\n          isLocked\n          isPinned\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    cursor\n    isComplete\n    sortedByDate\n    __typename\n  }\n}",
  "FetchArticleContentData": "query FetchArticleContentData($path: String!, $queryParams: String!, $isModal: Boolean, $followRedirects: Boolean, $countryCode: String!) {\n  contentJson: curatedArticleContentLibraryJson(\n    path: $path\n    queryParams: $queryParams\n    isModal: $isModal\n    followRedirects: $followRedirects\n    countryCode: $countryCode\n  )\n}",
  "FetchContentData": "query FetchContentData($path: String!, $queryParams: String!, $isModal: Boolean, $followRedirects: Boolean, $countryCode: String!) {\n  contentJson: curatedContentLibraryJson(\n    path: $path\n    queryParams: $queryParams\n    isModal: $isModal\n    followRedirects: $followRedirects\n    countryCode: $countryCode\n  )\n}",
  "FetchExerciseContentData": "query FetchExerciseContentData($path: String!, $queryParams: String!, $isModal: Boolean, $followRedirects: Boolean, $countryCode: String!) {\n  contentJson: curatedExerciseContentLibraryJson(\n    path: $path\n    queryParams: $queryParams\n    isModal: $isModal\n    followRedirects: $followRedirects\n    countryCode: $countryCode\n  )\n}",
  "FetchFlagsQuery": "query FetchFlagsQuery {\n  flags {\n    id\n    name\n    description\n    team\n    expires\n    created\n    rules {\n      name\n      isAllowRule\n      context {\n        name\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "FetchProgrammingContentData": "query FetchProgrammingContentData($path: String!, $queryParams: String!, $isModal: Boolean, $followRedirects: Boolean, $countryCode: String!) {\n  contentJson: curatedProgrammingContentLibraryJson(\n    path: $path\n    queryParams: $queryParams\n    isModal: $isModal\n    followRedirects: $followRedirects\n    countryCode: $countryCode\n  )\n}",
  "FetchVideoContentData": "query FetchVideoContentData($path: String!, $queryParams: String!, $isModal: Boolean, $followRedirects: Boolean, $countryCode: String!) {\n  contentJson: curatedVideoContentLibraryJson(\n    path: $path\n    queryParams: $queryParams\n    isModal: $isModal\n    followRedirects: $followRedirects\n    countryCode: $countryCode\n  )\n}",
  "findUsers": "query findUsers($identifier: String) {\n  usersSearch(identifier: $identifier) {\n    users {\n      ...UserFields\n      __typename\n    }\n    children {\n      ...UserFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment UserFields on User {\n  id\n  kaid\n  lastLogin\n  points\n  profileRoot\n  nickname\n  joined\n  authEmails\n  userId\n  username\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  __typename\n}",
  "findUsersByIp": "query findUsersByIp($ip: String!, $usersCursor: ID, $pageSize: Int) {\n  usersSearchByIpPage(ip: $ip, after: $usersCursor, pageSize: $pageSize) {\n    users {\n      ...UserFields\n      ...FilterFields\n      __typename\n    }\n    pageInfo {\n      nextCursor\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}\n\nfragment FilterFields on User {\n  id\n  nickname\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  joined\n  discussionBanned\n  isChild\n  points\n  __typename\n}\n\nfragment UserFields on User {\n  id\n  kaid\n  lastLogin\n  points\n  profileRoot\n  nickname\n  joined\n  authEmails\n  userId\n  username\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  __typename\n}",
  "FlaggedFeedback": "query FlaggedFeedback($feedbackType: FeedbackType, $page: Int, $sort: ModerationSortOrder, $limit: Int, $kaLocale: String) {\n  flaggedFeedback(\n    feedbackType: $feedbackType\n    page: $page\n    sort: $sort\n    limit: $limit\n    kaLocale: $kaLocale\n  ) {\n    feedback {\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      flags\n      flaggedBy\n      flaggedByUser\n      key\n      expandKey\n      permalink\n      feedbackType\n      deleted\n      sumVotesIncremented\n      appearsAsDeleted\n      date\n      replyCount\n      lowQualityScore\n      qualityKind\n      replyExpandKeys\n      downVoted\n      upVoted\n      focusUrl\n      focus {\n        id\n        translatedTitle\n        kind\n        relativeUrl\n        __typename\n      }\n      ... on QuestionFeedback {\n        hasAnswered\n        answers {\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        isOld\n        answerCount\n        __typename\n      }\n      ... on AnswerFeedback {\n        questionKey\n        question {\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          appearsAsDeleted\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    total\n    __typename\n  }\n}",
  "FlaggedPrograms": "query FlaggedPrograms($page: Int, $sort: ModerationSortOrder, $limit: Int) {\n  flaggedPrograms(page: $page, sort: $sort, limit: $limit) {\n    programs {\n      programID: id\n      key\n      appearsAsDeleted\n      codeFormat\n      date: created\n      deleted\n      hideFromHotlist\n      flaggedBy: flaggedByKaids\n      flags\n      permalink: url\n      relativeUrl: url\n      sumVotesIncremented\n      title\n      thumbnail: imagePath\n      latestRevision {\n        code\n        created\n        __typename\n      }\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    total\n    __typename\n  }\n}",
  "footerDomainsQuery": "query footerDomainsQuery($region: String) {\n  footerDomains(region: $region) {\n    translatedTitle\n    href\n    __typename\n  }\n}",
  "getAccountSettings": "query getAccountSettings($targetKaid: String) {\n  actor: user {\n    id\n    email\n    username\n    isChild\n    hasPassword\n    __typename\n  }\n  target: user(kaid: $targetKaid) {\n    id\n    isChild\n    isParent\n    hasUserOptedOutFromABTesting\n    tosForFormalTeacherStatus\n    affiliationCountryCode\n    schoolAffiliation {\n      id\n      name\n      country\n      postalCode\n      administrativeAreaLevel1\n      administrativeAreaLevel2\n      locality\n      __typename\n    }\n    hasSendableEmail\n    isEmailVerified\n    isTotpTwoFactorEnabled\n    nickname\n    username\n    birthdate\n    userLanguage\n    region\n    soundOn\n    muteVideos\n    showCaptions\n    playbackRate\n    hideVisual\n    prefersReducedMotion\n    noColorInVideos\n    pendingParentEmail\n    profileRoot\n    hasPassword\n    canModifyCoaches\n    age\n    authEmails\n    appleId\n    applePrimaryEmail\n    googleId\n    googlePrimaryEmail\n    facebookId\n    facebookPrimaryEmail\n    canAccessDistrictsHomepage\n    userChosenRoles\n    homepage\n    managingParent {\n      id\n      email\n      __typename\n    }\n    underAgeGate {\n      approvalGivenAt\n      parentEmail\n      daysUntilCutoff\n      __typename\n    }\n    maybeManagedChildren {\n      id\n      nickname\n      username\n      __typename\n    }\n    unmanagedChildren {\n      id\n      nickname\n      username\n      __typename\n    }\n    hasChildren\n    includesDistrictOwnedData\n    includesCentrallyOwnedDistrictData\n    badgeCounts\n    points\n    userDistrictInfos {\n      id\n      districtProvidedBirthMonth\n      districtProvidedBirthYear\n      rosterSource\n      __typename\n    }\n    __typename\n  }\n  sessionHash\n}",
  "getActiveDonationAsks": "query getActiveDonationAsks {\n  activeDonationAsks {\n    id\n    copy\n    graphic\n    headline\n    defaultDonationFrequency\n    oneTimeDonationAmounts\n    recurringDonationAmounts\n    classyCampaignId\n    donateURL\n    __typename\n  }\n}",
  "getAIGuideWaitlistStatus": "query getAIGuideWaitlistStatus {\n  user {\n    id\n    aiGuideWaitlistStatus\n    __typename\n  }\n}\n",
  "getAllBadges": "query getAllBadges {\n  allBadges(excludeFilters: [CONTEXT_SPECIFIC]) {\n    name\n    description\n    isCustom\n    __typename\n  }\n}",
  "getAllBadgesFull": "query getAllBadgesFull {\n  allBadges {\n    name\n    description\n    fullDescription\n    points\n    badgeCategory\n    icons {\n      compactUrl\n      emailUrl\n      largeUrl\n      smallUrl\n      __typename\n    }\n    isCustom\n    __typename\n  }\n}",
  "getAllDonationAsks": "query getAllDonationAsks {\n  allDonationAsks {\n    id\n    active\n    __typename\n  }\n}",
  "GetAllFolders": "query GetAllFolders {\n  allFolders {\n    id\n    kaLocale\n    name\n    courseIds\n    __typename\n  }\n}",
  "getAllSetsOfStandards": "query getAllSetsOfStandards($locale: String, $domain: String) {\n  sets: allSetsOfStandards(locale: $locale, domain: $domain, region: \"*\") {\n    id\n    name\n    shortName\n    __typename\n  }\n}",
  "getAllStandardsForContent": "query getAllStandardsForContent($contentDescriptor: String!, $locale: String!) {\n  standards: standardMappingsForContent(\n    contentDescriptor: $contentDescriptor\n    region: \"*\"\n    locale: $locale\n  ) {\n    id\n    standardId\n    setId\n    __typename\n  }\n}",
  "getAllSubject": "query getAllSubject($region: String!) {\n  domains: studentListTopics(region: $region) {\n    subjects: topics {\n      id\n      slug\n      __typename\n    }\n    __typename\n  }\n}",
  "getAllSubmittedStories": "query getAllSubmittedStories($cursor: String!, $sort: SubmittedStorySort!) {\n  allSubmittedStories(sortBy: $sort, cursor: $cursor, count: 20) {\n    stories {\n      date\n      key\n      name: submitterName\n      email\n      level\n      teaser\n      role\n      published\n      upvotes: votes\n      story\n      share_allowed: shareAllowed\n      video_url: videoUrl\n      video_title: videoTitle\n      __typename\n    }\n    maybeMore\n    nextCursor\n    __typename\n  }\n}",
  "getArticleForTeacherCampaignExtraCredit": "query getArticleForTeacherCampaignExtraCredit($slug: String!) {\n  article(slug: $slug) {\n    nodeUrl: urlWithinTopic\n    title\n    kind\n    contentId: id\n    slug\n    __typename\n  }\n}",
  "getAssessmentItem": "query getAssessmentItem($input: AssessmentItemInput!) {\n  assessmentItem(input: $input) {\n    item {\n      id\n      sha\n      problemType\n      itemData\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "getAssessmentItems": "query getAssessmentItems($exerciseName: String) {\n  exercise(name: $exerciseName) {\n    id\n    assessmentItems {\n      id\n      itemData\n      __typename\n    }\n    __typename\n  }\n}",
  "GetAssessmentItemTags": "query GetAssessmentItemTags {\n  assessmentItemTags(filter: ALL) {\n    ...AssessmentItemTagFields\n    __typename\n  }\n}\n\nfragment AssessmentItemTagFields on AssessmentItemTag {\n  editId: id\n  id: urlsafeTag\n  displayName\n  description\n  relatedContentId: lessonId\n  __typename\n}",
  "GetAuthors": "query GetAuthors {\n  allAuthorOptions {\n    id\n    name\n    key\n    __typename\n  }\n}",
  "GetAvatars": "query GetAvatars {\n  user {\n    id\n    avatar {\n      name\n      __typename\n    }\n    allAvatars {\n      avatar {\n        category\n        imageSrc\n        isDefaultForCategory\n        name\n        __typename\n      }\n      isAvailable\n      __typename\n    }\n    __typename\n  }\n}",
  "getChildrenForDevadmin": "query getChildrenForDevadmin($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    maybeManagedChildren {\n      id\n      canModifyCoaches\n      email\n      isUnderAgeGate: isChild\n      isSpawnedByCurrentUser: isSpawnedBy(coachKaid: $kaid)\n      kaid\n      nickname\n      username\n      grassrootsKhanmigoIneligibleReasons\n      __typename\n    }\n    unmanagedChildren {\n      id\n      canModifyCoaches\n      email\n      isUnderAgeGate: isChild\n      isSpawnedByCurrentUser: isSpawnedBy(coachKaid: $kaid)\n      kaid\n      nickname\n      username\n      grassrootsKhanmigoIneligibleReasons\n      __typename\n    }\n    __typename\n  }\n}",
  "getChildrenOfTopic": "query getChildrenOfTopic($id: String!) {\n  topic: topicById(id: $id) {\n    id\n    contentId: id\n    kind\n    slug\n    translatedTitle\n    children: childrenWithUnlisted {\n      ... on CurationNode {\n        id\n        contentId: id\n        kind\n        slug\n        translatedTitle\n        __typename\n      }\n      ... on LearnableContent {\n        id\n        contentId: id\n        kind\n        slug\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getChronomancerStatus": "query getChronomancerStatus {\n  chronomancer {\n    mode\n    isCollegeBoardIntegrationEnabled\n    outages {\n      start\n      end\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassesAndStudents": "query getClassesAndStudents {\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      descriptor\n      cacheId\n      name\n      signupCode\n      studentKaidsAndNicknames {\n        id\n        kaid\n        coachNickname\n        __typename\n      }\n      topics {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassList": "query getClassList {\n  coach: user {\n    id\n    nickname\n    studentLists: coachedStudentLists {\n      name\n      id\n      signupCode\n      cacheId\n      key\n      descriptor\n      autoGenerated\n      createdOn\n      googleClassId\n      googleClassName\n      countStudents\n      hasAssignments\n      hasCourseMasteryGoals(filter: NO_KMAP)\n      hasMasteryAssignments(filters: NO_KMAP)\n      classroomDistrictInfo {\n        id\n        isNweaMapSynced\n        courseSISName\n        studentUserDistrictInfos {\n          id\n          isActivated\n          __typename\n        }\n        district {\n          id\n          isCentrallyRostered\n          schoolYearStart\n          schoolYearEnd\n          __typename\n        }\n        school {\n          id\n          eduOrg {\n            id\n            name\n            country\n            postalCode\n            administrativeAreaLevel1\n            administrativeAreaLevel2\n            locality\n            __typename\n          }\n          __typename\n        }\n        isManuallyUnmarked\n        classWillBeRemovedInDays\n        __typename\n      }\n      topics {\n        id\n        key\n        slug\n        title: translatedTitle\n        translatedStandaloneTitle\n        iconPath\n        domainSlug\n        isHighSchoolSubject\n        masteryEnabled\n        subjectMasteryEnabled\n        learnableContentSummary {\n          countExercises\n          __typename\n        }\n        __typename\n      }\n      isK4dClassroom\n      isKmapClassroom\n      isCleverLibrarySynced\n      includesCentrallyOwnedDistrictData\n      invitations {\n        id\n        accepted\n        __typename\n      }\n      coachRequests {\n        id\n        __typename\n      }\n      isChildAssignmentsClassroom\n      __typename\n    }\n    schoolAffiliation {\n      id\n      name\n      country\n      postalCode\n      administrativeAreaLevel1\n      administrativeAreaLevel2\n      locality\n      __typename\n    }\n    hasPartnershipSchoolAffiliation\n    hasAccessToAIGuideTeacher\n    affiliationCountryCode\n    isAIGuideEnabled\n    isKmapTeacher\n    isK4dTeacher\n    includesCentrallyOwnedDistrictData\n    userDistrictInfos {\n      id\n      activatedAt\n      rosterSource\n      primaryRole\n      district {\n        id\n        name\n        schools(administeredOnly: false) {\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    isFormalTeacher\n    __typename\n  }\n  user {\n    id\n    tosForFormalTeacherStatus\n    __typename\n  }\n}",
  "getClassroomRoster": "query getClassroomRoster($classDescriptor: String!, $teacherKaid: String!, $after: Int, $pageSize: Int) {\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      descriptor\n      name\n      signupCode\n      topics {\n        id\n        slug\n        translatedStandaloneTitle\n        __typename\n      }\n      key\n      includesCentrallyOwnedDistrictData\n      __typename\n    }\n    schoolAffiliation {\n      id\n      __typename\n    }\n    affiliationCountryCode\n    isFormalTeacher\n    __typename\n  }\n  user {\n    id\n    tosForFormalTeacherStatus\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    name\n    descriptor\n    key\n    autoGenerated\n    signupCode\n    topics {\n      id\n      key\n      iconPath\n      __typename\n    }\n    countStudents\n    studentsPage(after: $after, pageSize: $pageSize) {\n      ...StudentField2\n      __typename\n    }\n    invitations {\n      ...InvitationsField\n      __typename\n    }\n    coachRequests {\n      ...CoachRequestField\n      __typename\n    }\n    cleverCoachRequests {\n      ...CleverCoachRequestField\n      __typename\n    }\n    includesCentrallyOwnedDistrictData\n    isK4dClassroom\n    classroomDistrictInfo {\n      id\n      courseSISName\n      sisSubjct\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CleverCoachRequestField on CleverCoachRequest {\n  id\n  email: studentIdentifier\n  __typename\n}\n\nfragment CoachRequestField on CoachRequest {\n  id\n  email: studentIdentifier\n  __typename\n}\n\nfragment InvitationsField on Invitation {\n  id\n  email\n  accepted\n  __typename\n}\n\nfragment StudentField2 on StudentsPage {\n  students {\n    kaid\n    id\n    email\n    coachNickname(teacherKaid: $teacherKaid)\n    profileRoot\n    username\n    __typename\n  }\n  nextCursor\n  __typename\n}",
  "getClassroomsAndPrimaryOffering": "query getClassroomsAndPrimaryOffering {\n  districtPrimaryOfferingAsTeacher\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassSelector": "query getClassSelector {\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      descriptor\n      cacheId\n      name\n      signupCode\n      countStudents\n      hasKADAiGuideEnrolledStudents\n      isK4dClassroom\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassSettings": "query getClassSettings($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    founder: coach {\n      id\n      kaid\n      hasPartnershipSchoolAffiliation\n      schoolAffiliation {\n        id\n        name\n        country\n        postalCode\n        administrativeAreaLevel1\n        administrativeAreaLevel2\n        locality\n        __typename\n      }\n      userDistrictInfos {\n        id\n        rosterSource\n        district {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    descriptor\n    name\n    key\n    signupCode\n    countStudents\n    classroomDistrictInfo {\n      id\n      name\n      rosterSource\n      teacherUserDistrictInfoIDs {\n        id\n        displayNameForTeacher\n        kaid\n        __typename\n      }\n      school {\n        id\n        eduOrg {\n          id\n          name\n          country\n          postalCode\n          administrativeAreaLevel1\n          administrativeAreaLevel2\n          locality\n          __typename\n        }\n        __typename\n      }\n      isManuallyUnmarked\n      __typename\n    }\n    allTeachers {\n      id\n      kaid\n      __typename\n    }\n    googleClassId\n    googleClassName\n    invitations {\n      id\n      accepted\n      __typename\n    }\n    coachRequests {\n      id\n      __typename\n    }\n    cleverCoachRequests {\n      id\n      __typename\n    }\n    topics {\n      id\n      key\n      slug\n      translatedStandaloneTitle\n      masteryEnabled\n      __typename\n    }\n    includesCentrallyOwnedDistrictData\n    isK4dClassroom\n    isChildAssignmentsClassroom\n    __typename\n  }\n}",
  "getCoach": "query getCoach {\n  coach: user {\n    id\n    nickname\n    __typename\n  }\n  user {\n    id\n    tosForFormalTeacherStatus\n    includesCentrallyOwnedDistrictData\n    userDistrictInfos {\n      id\n      rosterSource\n      district {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    schoolAffiliation {\n      id\n      name\n      country\n      postalCode\n      administrativeAreaLevel1\n      administrativeAreaLevel2\n      locality\n      __typename\n    }\n    affiliationCountryCode\n    __typename\n  }\n}",
  "getCoachExerciseReport": "query getCoachExerciseReport($assignmentId: String!, $teacherKaid: String!) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      id\n      assignedDate\n      students {\n        id\n        kaid\n        coachNickname(teacherKaid: $teacherKaid)\n        __typename\n      }\n      studentList {\n        id\n        cacheId\n        name\n        signupCode\n        __typename\n      }\n      contents {\n        ...ExerciseContentFields\n        __typename\n      }\n      exerciseConfig {\n        itemPickerStrategy\n        assessmentItemIds\n        __typename\n      }\n      itemCompletionStatesForAllStudents {\n        studentKaid\n        exerciseAttempts {\n          id\n          isCompleted\n          numAttempted\n          __typename\n        }\n        assessmentItemsForAssessment {\n          id\n          contentId\n          itemData\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ExerciseContentFields on LearnableContent {\n  id\n  kind\n  slug\n  ... on Exercise {\n    translatedTitle: translatedDisplayName\n    exerciseLength\n    assessmentItems {\n      id\n      contentId\n      itemData\n      __typename\n    }\n    __typename\n  }\n  ... on TopicQuiz {\n    id\n    translatedTitle\n    exerciseLength\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on TopicUnitTest {\n    translatedTitle\n    exerciseLength\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on LearnableCourseChallenge {\n    translatedTitle\n    exerciseLength\n    __typename\n  }\n  __typename\n}",
  "getCombinedBadges": "query getCombinedBadges($kaid: String, $spotlightBadgeSlug: String!) {\n  user(kaid: $kaid) {\n    id\n    badges {\n      lastEarnedDate\n      count\n      badge {\n        ...Badge\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  allBadges(excludeFilters: [RETIRED, CUSTOM, HIDDEN_IF_UNKNOWN]) {\n    ...Badge\n    __typename\n  }\n  badgeBySlug(slug: $spotlightBadgeSlug) {\n    ...Badge\n    __typename\n  }\n}\n\nfragment Badge on Badge {\n  badgeCategory\n  description\n  fullDescription\n  isCustom\n  isRetired\n  name\n  points\n  absoluteUrl\n  hideContext\n  icons {\n    smallUrl\n    compactUrl\n    emailUrl\n    largeUrl\n    __typename\n  }\n  relativeUrl\n  slug\n  __typename\n}",
  "getCommoncore": "query getCommoncore {\n  commoncore {\n    standards {\n      code\n      description\n      domains {\n        code\n        description\n        standards {\n          id\n          code\n          descriptionHtml\n          contents(filterByKind: [EXERCISE]) {\n            id\n            kind\n            slug\n            englishName: title\n            translatedName: translatedTitle\n            description\n            ... on Exercise {\n              questions: numAssessmentItems\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n",
  "getContentAssignmentChangesQuery": "query getContentAssignmentChangesQuery($assignmentID: ID!, $maxNumChanges: Int!) {\n  contentAssignmentChanges(\n    assignmentID: $assignmentID\n    maxNumChanges: $maxNumChanges\n  ) {\n    assignmentID\n    type\n    timestamp\n    actor {\n      id\n      kaid\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "getContentAssignmentsForCoachAsDevadmin": "query getContentAssignmentsForCoachAsDevadmin($after: ID, $assignmentFilters: CoachAssignmentFilters, $classDescriptor: String!, $orderBy: AssignmentOrder!, $pageSize: Int) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    assignmentsPage(\n      filters: $assignmentFilters\n      orderBy: $orderBy\n      after: $after\n      pageSize: $pageSize\n    ) {\n      assignments {\n        id\n        createdDate\n        assignedDate\n        updatedDate\n        dueDate\n        startDate\n        title\n        contents {\n          id\n          contentDescriptor\n          defaultUrlPath\n          kind\n          title\n          __typename\n        }\n        studentKaids\n        numStudentsCompleted\n        exerciseConfig {\n          itemPickerStrategy\n          __typename\n        }\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getContentForStandard": "query getContentForStandard($set: String!, $region: String, $standard: String) {\n  contentForStandardMappings(setId: $set, region: $region, standardId: $standard)\n}",
  "getContentItemProgressesForSatSkill": "query getContentItemProgressesForSatSkill($contentDescriptors: [String!]) {\n  user {\n    id\n    contentItemProgresses(queryBy: {contentDescriptors: $contentDescriptors}) {\n      completionStatus\n      content {\n        id\n        kind\n        contentId\n        translatedTitle\n        title\n        slug\n        nodeUrl: defaultUrlPath\n        progressKey\n        ... on Exercise {\n          isSkillCheck\n          relatedContent: relatedContentKeys\n          expectedDoNCount: exerciseLength\n          timeEstimate {\n            lowerBound\n            upperBound\n            __typename\n          }\n          thumbnailUrl\n          parentTopic {\n            id\n            slug\n            __typename\n          }\n          __typename\n        }\n        ... on Video {\n          youtubeId\n          translatedYoutubeId\n          kaUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourse": "query getCourse($id: String!) {\n  courseById(id: $id) {\n    id\n    relativeUrl\n    translatedTitle\n    __typename\n  }\n}",
  "getCourseMasteryAssignmentChangesQuery": "query getCourseMasteryAssignmentChangesQuery($assignmentID: ID!, $maxNumChanges: Int!) {\n  courseMasteryAssignmentChanges(\n    assignmentID: $assignmentID\n    maxNumChanges: $maxNumChanges\n  ) {\n    assignmentID\n    type\n    timestamp\n    actor {\n      id\n      kaid\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourseMasteryAssignmentsForCoachAsDevAdmin": "query getCourseMasteryAssignmentsForCoachAsDevAdmin($descriptor: String!) {\n  classroomByDescriptor(descriptor: $descriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      kaid\n      coachNickname\n      __typename\n    }\n    courseMasteryAssignments: subjectMasteryAssignments(\n      activeFilter: ACTIVE_OR_ARCHIVED\n    ) {\n      id\n      assignedDate\n      createdDate\n      archivedDate\n      dueDate\n      course: topic {\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      isArchived\n      activeStudentData {\n        kaid\n        assignedDate\n        unassignedDate\n        __typename\n      }\n      historicalStudentData {\n        kaid\n        assignedDate\n        unassignedDate\n        __typename\n      }\n      completedStudentData {\n        kaid\n        completedDate\n        __typename\n      }\n      studentProgress {\n        kaid\n        lastWorkedOn\n        currentMastery {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourseProgress": "query getCourseProgress($filters: DistrictCourseProgressFilters!, $getKmapTopics: Boolean!) {\n  districtCourseProgressByCourse(filters: $filters) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    learningMinutesTarget {\n      minutesPerWeek\n      __typename\n    }\n    skillsLeveledUp {\n      skillsPerWeek\n      __typename\n    }\n    skillsToProficient {\n      skillsPerWeek\n      __typename\n    }\n    rows {\n      course {\n        id\n        title: translatedTitle\n        isKmap\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  kmapTopics @include(if: $getKmapTopics) {\n    id\n    title\n    bandKey\n    strandKey\n    __typename\n  }\n}",
  "getCourseProgressByClassroom": "query getCourseProgressByClassroom($filters: DistrictCourseProgressFilters!, $courseID: String!) {\n  districtCourseProgressByClassroom(filters: $filters, courseID: $courseID) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    rows {\n      classroom {\n        id\n        cacheId\n        name\n        descriptor\n        classroomDistrictInfo {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourseProgressBySchool": "query getCourseProgressBySchool($filters: DistrictCourseProgressFilters!, $courseID: String) {\n  districtCourseProgressBySchool(filters: $filters, courseID: $courseID) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    learningMinutesTarget {\n      minutesPerWeek\n      __typename\n    }\n    skillsLeveledUp {\n      skillsPerWeek\n      __typename\n    }\n    skillsToProficient {\n      skillsPerWeek\n      __typename\n    }\n    rows {\n      school {\n        id\n        name\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourseProgressByStudent": "query getCourseProgressByStudent($filters: DistrictCourseProgressFilters!, $classroomDescriptor: String!, $courseID: String!, $onlyStudentsWhoWorkedOnTheCourseNotForAClass: Boolean) {\n  districtCourseProgressByStudent(\n    filters: $filters\n    courseID: $courseID\n    classroomDescriptor: $classroomDescriptor\n    onlyStudentsWhoWorkedOnTheCourseNotForAClass: $onlyStudentsWhoWorkedOnTheCourseNotForAClass\n  ) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    rows {\n      user {\n        id\n        kaid\n        userDistrictInfos(includeDeleted: true) {\n          id\n          displayNameForTeacher\n          __typename\n        }\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCreateMasteryAssignmentsFormData": "query getCreateMasteryAssignmentsFormData($classroomDescriptor: String!, $coursesIds: [String]!) {\n  classroomByDescriptorV2(descriptor: $classroomDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n  coursesByIds(ids: $coursesIds) {\n    id\n    translatedTitle\n    unitChildren {\n      id\n      masteryEnabled\n      translatedTitle\n      learnableContentSummary {\n        countExercises\n        __typename\n      }\n      iconPath\n      __typename\n    }\n    __typename\n  }\n}",
  "getCustomRedirect": "query getCustomRedirect($redirectFrom: String!) {\n  customRedirect(redirectFrom: $redirectFrom) {\n    id\n    redirectTo\n    __typename\n  }\n}",
  "getCustomRedirects": "query getCustomRedirects {\n  customRedirects {\n    id\n    redirectFrom\n    redirectTo\n    __typename\n  }\n}",
  "getDashboardRoster": "query getDashboardRoster($teacherKaid: String!, $after: Int, $pageSize: Int) {\n  coach: user {\n    id\n    countStudents: coacheeCount\n    studentsPage(after: $after, pageSize: $pageSize) {\n      ...StudentField1\n      __typename\n    }\n    invitations {\n      ...InvitationsField\n      __typename\n    }\n    coachRequests {\n      ...CoachRequestField\n      __typename\n    }\n    cleverCoachRequests {\n      ...CleverCoachRequestField\n      __typename\n    }\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      descriptor\n      name\n      topics {\n        id\n        slug\n        translatedStandaloneTitle\n        __typename\n      }\n      key\n      studentKaids\n      includesCentrallyOwnedDistrictData\n      __typename\n    }\n    schoolAffiliation {\n      id\n      __typename\n    }\n    affiliationCountryCode\n    isFormalTeacher\n    __typename\n  }\n  user {\n    id\n    tosForFormalTeacherStatus\n    __typename\n  }\n}\n\nfragment CleverCoachRequestField on CleverCoachRequest {\n  id\n  email: studentIdentifier\n  __typename\n}\n\nfragment CoachRequestField on CoachRequest {\n  id\n  email: studentIdentifier\n  __typename\n}\n\nfragment InvitationsField on Invitation {\n  id\n  email\n  accepted\n  __typename\n}\n\nfragment StudentField1 on StudentsPage {\n  students {\n    kaid\n    id\n    email\n    coachNickname(teacherKaid: $teacherKaid)\n    profileRoot\n    username\n    __typename\n  }\n  nextCursor\n  __typename\n}",
  "getDatastoreUserData": "query getDatastoreUserData($examGroupId: String!, $kaid: String) {\n  examGroup(examGroupId: $examGroupId) {\n    id\n    datastoreUserData(kaid: $kaid)\n    __typename\n  }\n}",
  "getDaysUntilClassIsDeletedQuery": "query getDaysUntilClassIsDeletedQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    classroomDistrictInfo {\n      id\n      classWillBeRemovedInDays\n      __typename\n    }\n    __typename\n  }\n}",
  "getDescriptionForStandard": "query getDescriptionForStandard($region: String!, $setId: String!, $standardId: String!) {\n  publishedStandard(region: $region, setId: $setId, standardId: $standardId) {\n    id\n    description\n    __typename\n  }\n}",
  "getDistrictCourses": "query getDistrictCourses($districtId: ID!) {\n  district: districtById(districtId: $districtId) {\n    id\n    activeCourseSISNumbers\n    __typename\n  }\n}",
  "getDistrictGrades": "query getDistrictGrades($districtId: ID!) {\n  district: districtById(districtId: $districtId) {\n    id\n    activeGrades {\n      id\n      sortIndex\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictInstructionalAreaQuery": "query getDistrictInstructionalAreaQuery {\n  kmapTopics {\n    id\n    key\n    instructionalAreaName: strand\n    instructionalAreaKey: strandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictInternalAdmins": "query getDistrictInternalAdmins($districtID: String!) {\n  getDistrictInternalAdmins(districtID: $districtID) {\n    id\n    kaid\n    districtProvidedFullName\n    districtProvidedEmail\n    __typename\n  }\n}",
  "getDistrictSchools": "query getDistrictSchools($districtId: ID!) {\n  district: districtById(districtId: $districtId) {\n    id\n    schools {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictSchoolsAndType": "query getDistrictSchoolsAndType($districtId: ID!) {\n  district: districtById(districtId: $districtId) {\n    id\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictTeachers": "query getDistrictTeachers($districtId: ID!, $pageSize: Int, $cursor: Int) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    rows {\n      isActivated\n      teacherKaid\n      teacherName\n      __typename\n    }\n    __typename\n  }\n}",
  "getDomainsForStandardsEditor": "query getDomainsForStandardsEditor {\n  allDomains {\n    id\n    contentId: id\n    slug\n    translatedTitle\n    kind\n    __typename\n  }\n}",
  "getDonationAskByID": "query getDonationAskByID($id: String!) {\n  donationAskByID(id: $id) {\n    id\n    graphic\n    headline\n    copy\n    defaultDonationFrequency\n    oneTimeDonationAmounts\n    recurringDonationAmounts\n    classyCampaignId\n    active\n    authorKaid\n    donateURL\n    __typename\n  }\n}",
  "GetDub": "query GetDub($sourceYouTubeId: String!) {\n  dub(sourceYouTubeId: $sourceYouTubeId) {\n    sourceYouTubeId\n    dubYouTubeId\n    video {\n      id\n      translatedTitle\n      duration\n      dateAdded\n      defaultUrlPath\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "getEduOrganizationsForRegion": "query getEduOrganizationsForRegion($country: String!, $postalCode: String, $administrativeAreaLevel1: String, $administrativeAreaLevel2: String, $locality: String, $partnershipOnly: Boolean) {\n  eduOrganizationsForRegion(\n    filters: {country: $country, postalCode: $postalCode, administrativeAreaLevel1: $administrativeAreaLevel1, administrativeAreaLevel2: $administrativeAreaLevel2, locality: $locality, partnershipOnly: $partnershipOnly}\n  ) {\n    id\n    name\n    country\n    postalCode\n    administrativeAreaLevel1\n    administrativeAreaLevel2\n    locality\n    __typename\n  }\n}",
  "getEligibleLearnStormCampaign": "query getEligibleLearnStormCampaign {\n  learnStormActiveEligibleCampaign {\n    id\n    live\n    bannerVisible\n    campaignName\n    promoSite\n    signupStartDate\n    startDate\n    stopDate\n    shutdownDate\n    bannerBeforeHeader\n    bannerBeforeCopy\n    bannerDuringHeader\n    bannerDuringCopy\n    bannerAfterHeader\n    bannerAfterCopy\n    week\n    weeks\n    growthMindsetUrl\n    certificateUrl\n    bannerEnrollmentHeader\n    bannerEnrollmentCopy\n    __typename\n  }\n  coach: user {\n    id\n    coachedStudentLists {\n      id\n      cacheId\n      countStudents\n      hasCourseMasteryGoals\n      signupCode\n      topics {\n        id\n        masteryEnabled\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getEmailSettings": "query getEmailSettings($targetKaid: String) {\n  actor: user {\n    id\n    __typename\n  }\n  target: user(kaid: $targetKaid) {\n    id\n    isChild\n    isEmailVerified\n    hasSendableEmail\n    email\n    authEmails\n    hasStudents: hasCoachees\n    hasChildren\n    pendingEmailVerifications {\n      email\n      __typename\n    }\n    signupDataIfUnverified {\n      email\n      __typename\n    }\n    emailSubscriptions {\n      ...EmailSubscriptionFields\n      __typename\n    }\n    hasClasses\n    __typename\n  }\n}\n\nfragment EmailSubscriptionFields on EmailSubscriptions {\n  allEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  answerNotificationEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  newAssignmentNotificationEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  allStudentsCoachReportEmailSubscription {\n    key\n    checked\n    __typename\n  }\n  parentReportEmailSubscriptions {\n    key\n    description\n    checked\n    __typename\n  }\n  studentListEmailSubscriptions {\n    key\n    checked\n    description\n    __typename\n  }\n  streaksEmailSubscription {\n    token\n    checked\n    __typename\n  }\n  __typename\n}",
  "getEmailSettingsByToken": "query getEmailSettingsByToken($token: String!) {\n  emailSettingsFromUnsubscribeToken(token: $token) {\n    isChild\n    isEmailVerified\n    hasSendableEmail\n    email\n    hasStudents\n    hasChildren\n    emailSubscriptions {\n      ...EmailSubscriptionFields\n      __typename\n    }\n    hasClasses\n    __typename\n  }\n}\n\nfragment EmailSubscriptionFields on EmailSubscriptions {\n  allEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  answerNotificationEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  newAssignmentNotificationEmailSubscription {\n    checked\n    key\n    __typename\n  }\n  allStudentsCoachReportEmailSubscription {\n    key\n    checked\n    __typename\n  }\n  parentReportEmailSubscriptions {\n    key\n    description\n    checked\n    __typename\n  }\n  studentListEmailSubscriptions {\n    key\n    checked\n    description\n    __typename\n  }\n  streaksEmailSubscription {\n    token\n    checked\n    __typename\n  }\n  __typename\n}",
  "getEotCCCardDetails": "query getEotCCCardDetails($taskId: String!, $topicId: String!) {\n  user {\n    id\n    exerciseData {\n      subjectChallengeAttempt(taskId: $taskId, topicId: $topicId) {\n        id\n        numAttempted\n        numCorrect\n        pointsEarned\n        skillsLeveledDown\n        skillsLeveledUp\n        skillsNoChange\n        skillsNotTested\n        skillLevelChanges {\n          id\n          exercise {\n            id\n            title\n            translatedTitle\n            __typename\n          }\n          before\n          after\n          changeDirection\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getEotMCCardDetails": "query getEotMCCardDetails($taskId: String!, $topicId: String!) {\n  user {\n    id\n    exerciseData {\n      masteryChallengeAttempt(taskId: $taskId, topicId: $topicId) {\n        id\n        numAttempted\n        numCorrect\n        pointsEarned\n        skillsLeveledDown\n        skillsLeveledUp\n        skillsNoChange\n        skillLevelChanges {\n          id\n          exercise {\n            id\n            title\n            translatedTitle\n            __typename\n          }\n          before\n          after\n          changeDirection\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getEotQuizCardDetails": "query getEotQuizCardDetails($taskId: String!, $topicId: String!) {\n  user {\n    id\n    exerciseData {\n      quizAttempt(taskId: $taskId, topicId: $topicId) {\n        id\n        numAttempted\n        numCorrect\n        pointsEarned\n        skillsLeveledDown\n        skillsLeveledUp\n        skillsNoChange\n        skillsNotTested\n        skillLevelChanges {\n          id\n          exercise {\n            id\n            title\n            translatedTitle\n            __typename\n          }\n          before\n          after\n          changeDirection\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getEotTestCardDetails": "query getEotTestCardDetails($taskId: String!, $topicId: String!) {\n  user {\n    id\n    exerciseData {\n      unitTestAttempt(taskId: $taskId, topicId: $topicId) {\n        id\n        numAttempted\n        numCorrect\n        pointsEarned\n        skillsLeveledDown\n        skillsLeveledUp\n        skillsNoChange\n        skillsNotTested\n        skillLevelChanges {\n          id\n          exercise {\n            id\n            title\n            translatedTitle\n            __typename\n          }\n          before\n          after\n          changeDirection\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getExerciseRevisionGo": "query getExerciseRevisionGo($firstId: String!, $secondId: String!) {\n  first: exerciseRevisionById(id: $firstId) {\n    id\n    slug\n    __typename\n  }\n  second: exerciseRevisionById(id: $secondId) {\n    id\n    displayName: title\n    name: slug\n    slug\n    sha\n    trackingDocumentUrl\n    interimAssessmentType\n    __typename\n  }\n  user {\n    id\n    canEditInterimAssessments: hasPermission(\n      name: \"can_edit_interim_assessments\"\n      scope: ANY_ON_CURRENT_LOCALE\n    )\n    __typename\n  }\n}",
  "getFeedbackReplies": "query getFeedbackReplies($postKey: String!) {\n  feedbackReplies(feedbackKey: $postKey) {\n    isLocked\n    isPinned\n    expandKey\n    appearsAsDeleted\n    author {\n      id\n      kaid\n      nickname\n      avatar {\n        name\n        imageSrc\n        __typename\n      }\n      __typename\n    }\n    content\n    date\n    definitelyNotSpam\n    deleted\n    downVoted\n    expandKey\n    feedbackType\n    flaggedBy\n    flaggedByUser\n    flags\n    focusUrl\n    fromVideoAuthor\n    key\n    lowQualityScore\n    notifyOnAnswer\n    permalink\n    qualityKind\n    replyCount\n    replyExpandKeys\n    showLowQualityNotice\n    sumVotesIncremented\n    upVoted\n    __typename\n  }\n}",
  "getFeedbackRepliesPage": "query getFeedbackRepliesPage($postKey: String!, $cursor: String, $limit: Int!) {\n  feedbackRepliesPaginated(feedbackKey: $postKey, cursor: $cursor, limit: $limit) {\n    cursor\n    isComplete\n    feedback {\n      isLocked\n      isPinned\n      expandKey\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flaggedByUser\n      flags\n      focusUrl\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      __typename\n    }\n    __typename\n  }\n}",
  "getFlag": "query getFlag($name: String!) {\n  flag(name: $name) {\n    id\n    name\n    isUserPassing\n    __typename\n  }\n}",
  "getFlagsSummary": "query getFlagsSummary {\n  flags {\n    id\n    name\n    isUserPassing\n    __typename\n  }\n}",
  "getFpmMasteryForTopic": "query getFpmMasteryForTopic($topicId: String!) {\n  user {\n    id\n    curationItemProgress(topicId: $topicId) {\n      masteryMap {\n        progressKey\n        status\n        __typename\n      }\n      currentMastery {\n        percentage\n        pointsEarned\n        pointsAvailable\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getFullUserProfile": "query getFullUserProfile($kaid: String, $username: String) {\n  user(kaid: $kaid, username: $username) {\n    id\n    kaid\n    key\n    userId\n    email\n    username\n    profileRoot\n    gaUserId\n    isPhantom\n    isDeveloper: hasPermission(name: \"can_do_what_only_admins_can_do\")\n    isPublisher: hasPermission(name: \"can_publish\", scope: ANY_ON_CURRENT_LOCALE)\n    isModerator: hasPermission(name: \"can_moderate_users\", scope: GLOBAL)\n    isParent\n    isTeacher\n    isFormalTeacher\n    isK4dStudent\n    isKmapStudent\n    isDataCollectible\n    isChild\n    isOrphan\n    isCoachingLoggedInUser\n    canModifyCoaches\n    nickname\n    hideVisual\n    joined\n    points\n    countVideosCompleted\n    bio\n    profile {\n      accessLevel\n      __typename\n    }\n    soundOn\n    muteVideos\n    showCaptions\n    prefersReducedMotion\n    noColorInVideos\n    newNotificationCount\n    canHellban: hasPermission(name: \"can_ban_users\", scope: GLOBAL)\n    canMessageUsers: hasPermission(\n      name: \"can_send_moderator_messages\"\n      scope: GLOBAL\n    )\n    isSelf: isActor\n    hasStudents: hasCoachees\n    hasClasses\n    hasChildren\n    hasCoach\n    badgeCounts\n    homepageUrl\n    isMidsignupPhantom\n    includesDistrictOwnedData\n    includesKmapDistrictOwnedData\n    includesK4dDistrictOwnedData\n    canAccessDistrictsHomepage\n    underAgeGate {\n      parentEmail\n      daysUntilCutoff\n      approvalGivenAt\n      __typename\n    }\n    authEmails\n    signupDataIfUnverified {\n      email\n      emailBounced\n      __typename\n    }\n    pendingEmailVerifications {\n      email\n      __typename\n    }\n    hasAccessToAIGuideCompanionMode\n    hasAccessToAIGuideLearner\n    hasAccessToAIGuideDistrictAdmin\n    hasAccessToAIGuideParent\n    hasAccessToAIGuideTeacher\n    tosAccepted\n    shouldShowAgeCheck\n    birthMonthYear\n    lastLoginCountry\n    region\n    userDistrictInfos {\n      id\n      isKAD\n      district {\n        id\n        region\n        __typename\n      }\n      __typename\n    }\n    schoolAffiliation {\n      id\n      location\n      __typename\n    }\n    __typename\n  }\n  actorIsImpersonatingUser\n  isAIGuideEnabled\n  hasAccessToAIGuideDev\n}",
  "getInfoForTotalStudentCountQuery": "query getInfoForTotalStudentCountQuery {\n  coach: user {\n    id\n    coacheeCount\n    coachInvitationsCount\n    __typename\n  }\n}",
  "getInitialDataForPrePhantomUser": "query getInitialDataForPrePhantomUser($exerciseId: ID!, $input: AssessmentItemInput!, $ancestorIds: [String!]!) {\n  assessmentItem(input: $input) {\n    item {\n      id\n      sha\n      problemType\n      itemData\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n  getDummyPracticeTaskForPrePhantomUser(exerciseId: $exerciseId) {\n    userTask {\n      cards {\n        ...problemCardFields\n        __typename\n      }\n      task {\n        ...practiceTaskFields\n        __typename\n      }\n      userExercises {\n        ...userExerciseFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment practiceTaskFields on PracticeTask {\n  id\n  key\n  bonusReservedItems\n  bonusReservedItemsCompleted\n  bonusTaskAttemptHistory {\n    ...taskAttemptHistoryFields\n    __typename\n  }\n  canRestart\n  completionCriteria {\n    name\n    __typename\n  }\n  contentKey\n  exerciseLength\n  isCompleted\n  pointBounty\n  pointsEarned\n  promotionCriteria {\n    ...promotionCriteriaFields\n    __typename\n  }\n  reservedItems\n  reservedItemsCompleted\n  slug\n  taskAttemptHistory {\n    ...taskAttemptHistoryFields\n    __typename\n  }\n  taskType\n  timeEstimate {\n    lowerBound\n    upperBound\n    __typename\n  }\n  __typename\n}\n\nfragment problemCardFields on ProblemCard {\n  cardType\n  done\n  exerciseName\n  problemType\n  __typename\n}\n\nfragment problemTypeFields on ProblemType {\n  items {\n    id\n    live\n    sha\n    __typename\n  }\n  name\n  relatedVideos\n  __typename\n}\n\nfragment promotionCriteriaFields on PromotionCriteria {\n  name\n  value\n  __typename\n}\n\nfragment taskAttemptHistoryFields on TaskProblemAttempt {\n  correct\n  timeDone\n  seenHint\n  itemId\n  __typename\n}\n\nfragment userExerciseFields on UserExercise {\n  exerciseModel: exercise {\n    id\n    assessmentItemCount: numAssessmentItems\n    displayName\n    isQuiz\n    isSkillCheck\n    name\n    nodeSlug\n    progressKey\n    translatedDisplayName\n    relatedContent {\n      id\n      contentKind\n      kind\n      thumbnailUrl\n      translatedTitle\n      urlWithinCurationNode\n      urlWithinClosestAncestor(ancestorIds: $ancestorIds)\n      topicPaths {\n        path {\n          id\n          kind\n          slug\n          __typename\n        }\n        __typename\n      }\n      ... on Article {\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        __typename\n      }\n      ... on Video {\n        duration\n        imageUrl\n        kaUrl\n        nodeSlug\n        relativeUrl\n        slug\n        translatedYoutubeId\n        __typename\n      }\n      __typename\n    }\n    relatedVideos {\n      contentKind\n      duration\n      id\n      imageUrl\n      kaUrl\n      kind\n      nodeSlug\n      progressKey\n      relativeUrl\n      slug\n      thumbnailUrl\n      translatedDescription\n      translatedTitle\n      translatedYoutubeId\n      __typename\n    }\n    problemTypes {\n      ...problemTypeFields\n      __typename\n    }\n    translatedProblemTypes {\n      ...problemTypeFields\n      __typename\n    }\n    __typename\n  }\n  exercise: exerciseName\n  fpmMasteryLevel\n  lastAttemptNumber\n  lastCountHints\n  lastDone\n  lastMasteryUpdate\n  longestStreak\n  maximumExerciseProgressDt: maximumExerciseProgressDate\n  streak\n  totalCorrect\n  totalDone\n  __typename\n}",
  "getIsClassCleverLibrarySynced": "query getIsClassCleverLibrarySynced($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    isCleverLibrarySynced\n    __typename\n  }\n}",
  "getIsDistrictSynced": "query getIsDistrictSynced($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    includesDistrictOwnedData\n    includesCentrallyOwnedDistrictData\n    __typename\n  }\n}",
  "getItemsForExercise": "query getItemsForExercise($id: String!) {\n  exercise: exerciseById(id: $id) {\n    id\n    problemTypes {\n      items {\n        id\n        __typename\n      }\n      __typename\n    }\n    assessmentItems {\n      id\n      tags: tagIds\n      __typename\n    }\n    __typename\n  }\n}",
  "getKhanLabsSettings": "query getKhanLabsSettings($targetKaid: String!) {\n  user(kaid: $targetKaid) {\n    id\n    age\n    isParent\n    isTeacher\n    isAIGuideEnabled\n    aiGuideEnrollmentGroup\n    aiGuideDisabledReason\n    nickname\n    includesDistrictOwnedData\n    children {\n      id\n      age\n      nickname\n      isAIGuideEnabled\n      aiGuideEnrollmentGroup\n      aiGuideDisabledReason\n      includesDistrictOwnedData\n      aiGuideAccessPlans {\n        id\n        isActive\n        enrollmentGroup\n        __typename\n      }\n      __typename\n    }\n    hasKhanmigoViaStripe\n    everHadKhanmigoViaStripe\n    aiGuideAccessPlans {\n      id\n      isActive\n      enrollmentGroup\n      __typename\n    }\n    __typename\n  }\n}",
  "getLastSecond": "query getLastSecond($readableVideoId: String!) {\n  user {\n    id\n    contentItemProgresses(queryBy: {videoSlug: $readableVideoId}) {\n      ... on VideoItemProgress {\n        lastSecondWatched\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getLearnMenuProgress": "query getLearnMenuProgress($slugs: [String!]) {\n  user {\n    id\n    subjectProgressesBySlug(slugs: $slugs) {\n      topic {\n        id\n        slug\n        __typename\n      }\n      currentMastery {\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getLearnStormCampaign": "query getLearnStormCampaign($id: ID!) {\n  campaign: learnStormCampaign(id: $id) {\n    id\n    live\n    eligibleLocale\n    eligibleCountryCodes\n    campaignName\n    promoSite\n    growthMindsetUrl\n    certificateUrl\n    signupStartDate\n    startDate\n    stopDate\n    shutdownDate\n    bannerEnrollmentHeader\n    bannerEnrollmentCopy\n    bannerBeforeHeader\n    bannerBeforeCopy\n    bannerDuringHeader\n    bannerDuringCopy\n    bannerAfterHeader\n    bannerAfterCopy\n    week\n    weeks\n    bannerVisible\n    __typename\n  }\n}",
  "getLearnStormCampaignDataForEnrollment": "query getLearnStormCampaignDataForEnrollment {\n  learnStormActiveEligibleCampaign {\n    id\n    campaignName\n    __typename\n  }\n}",
  "getLearnStormCampaignEnrollmentStatus": "query getLearnStormCampaignEnrollmentStatus($campaignId: ID!) {\n  learnStormCampaignEnrollmentStatus(id: $campaignId) {\n    isEnrolled\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "getLearnStormCampaigns": "query getLearnStormCampaigns {\n  learnStormCampaigns {\n    id\n    campaignName\n    live\n    __typename\n  }\n}",
  "getLearnStormDashboard": "query getLearnStormDashboard($classDescriptor: String!) {\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      name\n      signupCode\n      countStudents\n      __typename\n    }\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    countStudents\n    signupCode\n    learnStormStatus {\n      pointsNeededPerLevel\n      classroomProgress {\n        id\n        earnedLevel\n        currentLevelProgress\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getManagedDistricts": "query getManagedDistricts {\n  user {\n    id\n    managedDistricts {\n      id\n      name\n      isTest\n      isKmapDistrict\n      isK4dDistrict\n      __typename\n    }\n    homepageUrl\n    userChosenRoles\n    __typename\n  }\n}",
  "GetMappersSuggestions": "query GetMappersSuggestions($kaid: String!) {\n  mappersSuggestions(studentKaid: $kaid) {\n    unit {\n      id\n      title: translatedTitle\n      relativeUrl\n      __typename\n    }\n    progress {\n      completed\n      total\n      __typename\n    }\n    __typename\n  }\n}",
  "getMasteryTowerEventsQuery": "query getMasteryTowerEventsQuery($classDescriptor: String!) {\n  teacherMasteryTowerCurrentEvents(classroomDescriptor: $classDescriptor) {\n    events {\n      id\n      eventTime\n      pointsEarned\n      source\n      student {\n        id\n        kaid\n        nickname\n        __typename\n      }\n      exercise {\n        id\n        title\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getModerationLogs": "query getModerationLogs($limit: Int!, $cursor: String!, $beforeTimestampSeconds: String, $excludeModeratorKaids: [String!]) {\n  moderationLogs(\n    limit: $limit\n    cursor: $cursor\n    beforeTimestampSeconds: $beforeTimestampSeconds\n    excludeModeratorKaids: $excludeModeratorKaids\n  ) {\n    moderationLogs {\n      date\n      description {\n        href\n        linkText\n        postText\n        preText\n        __typename\n      }\n      moderator {\n        id\n        kaid\n        nickname\n        __typename\n      }\n      __typename\n    }\n    nextCursor\n    __typename\n  }\n}",
  "getModerationResult": "query getModerationResult($text: String, $image: String, $model: String) {\n  getModerationResult(text: $text, image: $image, model: $model) {\n    categories\n    categoryScores\n    flagged\n    __typename\n  }\n}",
  "GetNotationReadAloudsForAssessmentItem": "query GetNotationReadAloudsForAssessmentItem($assessmentItemID: ID!, $exerciseID: ID!) {\n  getNotationReadAloudsForAssessmentItem(\n    assessmentItemID: $assessmentItemID\n    exerciseID: $exerciseID\n  ) {\n    notationReadAlouds {\n      assessmentItemId\n      domainId\n      exerciseId\n      exerciseUrl\n      id\n      readable\n      original\n      __typename\n    }\n    error {\n      code\n      message\n      __typename\n    }\n    __typename\n  }\n}",
  "getNotificationsForUser": "query getNotificationsForUser($after: ID) {\n  user {\n    id\n    notifications(after: $after) {\n      notifications {\n        __typename\n        brandNew\n        class_\n        date\n        kaid\n        read\n        url\n        urlsafeKey\n        ...ThreadCreatedNotificationType\n        ...AssignmentDueDateNotificationType\n        ...AssignmentCreatedNotificationType\n        ...CoachRequestNotificationType\n        ...BadgeNotificationType\n        ...CourseMasteryGoalCreatedNotificationType\n        ...ModeratorNotificationType\n        ...ProgramFeedbackNotificationType\n        ...CoachRequestAcceptedNotificationType\n        ...AvatarNotificationType\n        ...InfoNotificationType\n        ...ResponseFeedbackNotificationType\n        ...GroupedBadgeNotificationType\n        ...UnitMasteryGoalCreatedNotificationType\n        ...UnitMasteryDueDateCreatedNotificationType\n        ...CourseMasteryDueDateCreatedNotificationType\n        ...MasteryGoalDueDateApproachingCreatedNotificationType\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentCreatedNotificationType on AssignmentCreatedNotification {\n  numAssignments\n  contentTitle\n  curationNodeIconURL\n  className\n  __typename\n}\n\nfragment AssignmentDueDateNotificationType on AssignmentDueDateNotification {\n  numAssignments\n  dueDate\n  contentTitle\n  curationNodeIconURL\n  __typename\n}\n\nfragment AvatarNotificationType on AvatarNotification {\n  name\n  thumbnailSrc\n  __typename\n}\n\nfragment BadgeNotificationType on BadgeNotification {\n  badgeName\n  badge {\n    description\n    fullDescription\n    name\n    relativeUrl\n    icons {\n      compactUrl\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment CoachRequestAcceptedNotificationType on CoachRequestAcceptedNotification {\n  isMultipleClassrooms\n  student {\n    id\n    email\n    nickname\n    __typename\n  }\n  classroom {\n    cacheId\n    id\n    name\n    topics {\n      id\n      slug\n      iconUrl\n      key\n      translatedStandaloneTitle\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment CoachRequestNotificationType on CoachRequestNotification {\n  coachIsParent\n  coach {\n    id\n    kaid\n    nickname\n    __typename\n  }\n  __typename\n}\n\nfragment CourseMasteryDueDateCreatedNotificationType on CourseMasteryDueDateCreatedNotification {\n  dueDate\n  course {\n    id\n    iconUrl\n    translatedStandaloneTitle\n    __typename\n  }\n  __typename\n}\n\nfragment CourseMasteryGoalCreatedNotificationType on CourseMasteryGoalCreatedNotification {\n  curationNodeIconURL\n  curationNodeTranslatedTitle\n  masteryPercentage\n  __typename\n}\n\nfragment GroupedBadgeNotificationType on GroupedBadgeNotification {\n  badgeNotifications {\n    badge {\n      badgeCategory\n      description\n      fullDescription\n      name\n      icons {\n        compactUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment InfoNotificationType on InfoNotification {\n  notificationType\n  __typename\n}\n\nfragment MasteryGoalDueDateApproachingCreatedNotificationType on MasteryGoalDueDateApproachingCreatedNotification {\n  classroomInfo: classroom {\n    id\n    cacheId\n    __typename\n  }\n  __typename\n}\n\nfragment ModeratorNotificationType on ModeratorNotification {\n  text\n  __typename\n}\n\nfragment ProgramFeedbackNotificationType on ProgramFeedbackNotification {\n  authorAvatarSrc\n  authorNickname\n  feedbackType\n  translatedScratchpadTitle\n  content\n  __typename\n}\n\nfragment ResponseFeedbackNotificationType on ResponseFeedbackNotification {\n  authorAvatarUrl\n  authorNickname\n  feedbackType\n  focusTranslatedTitle\n  content\n  sumVotesIncremented\n  __typename\n}\n\nfragment ThreadCreatedNotificationType on ThreadCreatedNotification {\n  coachee {\n    id\n    kaid\n    nickname\n    __typename\n  }\n  threadId\n  flagged\n  __typename\n}\n\nfragment UnitMasteryDueDateCreatedNotificationType on UnitMasteryDueDateCreatedNotification {\n  dueDate\n  unit {\n    id\n    iconUrl\n    translatedStandaloneTitle\n    __typename\n  }\n  __typename\n}\n\nfragment UnitMasteryGoalCreatedNotificationType on UnitMasteryGoalCreatedNotification {\n  numAssignmentsCount: numAssignments\n  classroomInfo: classroom {\n    cacheId\n    id\n    coach {\n      id\n      nickname\n      __typename\n    }\n    __typename\n  }\n  unit {\n    id\n    iconUrl\n    parent {\n      id\n      iconUrl\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "getOffensiveTerms": "query getOffensiveTerms($isAiGuide: Boolean) {\n  offensiveTerms(isAiGuide: $isAiGuide) {\n    id\n    term\n    __typename\n  }\n}",
  "getOfficialClarifications": "query getOfficialClarifications($youtubeId: String!) {\n  officialClarifications(youtubeId: $youtubeId) {\n    ...clarificationFragment\n    __typename\n  }\n}\n\nfragment clarificationFragment on OfficialClarification {\n  id\n  text\n  openTimestamp\n  closeTimestamp\n  youtubeId\n  __typename\n}",
  "getOfficialClarificationsWithReporter": "query getOfficialClarificationsWithReporter($youtubeId: String!) {\n  officialClarifications(youtubeId: $youtubeId) {\n    ...clarificationFragmentWithReporter\n    __typename\n  }\n}",
  "getPendingStudentsAsDevadmin": "query getPendingStudentsAsDevadmin($kaid: String!) {\n  coach: user(kaid: $kaid) {\n    id\n    invitations {\n      id\n      email\n      accepted\n      __typename\n    }\n    coachRequests {\n      id\n      studentIdentifier\n      studentKaid\n      __typename\n    }\n    cleverCoachRequests {\n      id\n      studentIdentifier\n      studentKaid\n      __typename\n    }\n    __typename\n  }\n}",
  "getProfileWidgetPrograms": "query getProfileWidgetPrograms($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    profile {\n      programs {\n        id\n        authorKaid\n        authorNickname\n        deleted\n        displayableSpinoffCount\n        imagePath\n        key\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getProfileWidgets": "query getProfileWidgets($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    kaid\n    badgeCounts\n    isChild\n    profile {\n      programs {\n        id\n        authorKaid\n        authorNickname\n        deleted\n        displayableSpinoffCount\n        imagePath\n        key\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    programs(sort: TOP, pageInfo: {itemsPerPage: 2}) {\n      programs {\n        id\n        authorKaid\n        authorNickname\n        deleted\n        displayableSpinoffCount\n        imagePath\n        key\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  userSummary(kaid: $kaid) {\n    statistics {\n      answers\n      comments\n      flags\n      projectanswers\n      projectquestions\n      questions\n      replies\n      votes\n      __typename\n    }\n    __typename\n  }\n}",
  "getPromoForUser": "query getPromoForUser($promoName: String!) {\n  user {\n    id\n    promotion(promoName: $promoName)\n    __typename\n  }\n}",
  "getPublicBadgesForProfiles": "query getPublicBadgesForProfiles($kaid: String) {\n  user(kaid: $kaid) {\n    id\n    profile {\n      badges {\n        ...Badge\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Badge on Badge {\n  badgeCategory\n  description\n  fullDescription\n  isCustom\n  isRetired\n  name\n  points\n  absoluteUrl\n  hideContext\n  icons {\n    smallUrl\n    compactUrl\n    emailUrl\n    largeUrl\n    __typename\n  }\n  relativeUrl\n  slug\n  __typename\n}",
  "getRecentlySubmittedStories": "query getRecentlySubmittedStories {\n  recentSubmittedStories {\n    key\n    submitterName\n    date\n    story\n    youtubeId\n    __typename\n  }\n}",
  "getResources": "query getResources {\n  coachResourcesCurationPage {\n    curationData\n    __typename\n  }\n}",
  "getRoleData": "query getRoleData {\n  roles {\n    name\n    description\n    __typename\n  }\n}",
  "getSailthruNewsletters": "query getSailthruNewsletters($targetKaid: String) {\n  target: user(kaid: $targetKaid) {\n    id\n    emailSubscriptions {\n      sailthruSubscriptions {\n        checked\n        description\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getSailthruNewslettersByToken": "query getSailthruNewslettersByToken($token: String!) {\n  emailSettingsFromUnsubscribeToken(token: $token) {\n    emailSubscriptions {\n      sailthruSubscriptions {\n        checked\n        description\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getSatClass": "query getSatClass($classDescriptor: String!, $coachKaid: String, $domain: SatDomain, $startDate: Date, $endDate: Date) {\n  coach: user(kaid: $coachKaid) {\n    id\n    satClass(classroomDescriptor: $classDescriptor) {\n      studentList {\n        id\n        cacheId\n        name\n        includesSat\n        __typename\n      }\n      studentData(domain: $domain, startDate: $startDate, endDate: $endDate) {\n        id\n        cbLinked\n        examDate\n        kaid\n        name\n        registeredExamDate\n        problemsInfosWithDomain {\n          problemsDone\n          minutes\n          mathRecommendedProblemsDone\n          mathProblemsDone\n          rwRecommendedProblemsDone\n          rwProblemsDone\n          mathDiagnosticsProgress\n          rwDiagnosticsProgress\n          __typename\n        }\n        __typename\n      }\n      skillInfo {\n        skillId\n        rank\n        studentRecommendations\n        studentLevels\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  satSkills {\n    name\n    domain\n    categoryTitle\n    skillId\n    __typename\n  }\n}",
  "getSATLandingPageVideo": "query getSATLandingPageVideo($id: String!) {\n  video(id: $id) {\n    id\n    kind\n    kaUrl\n    slug\n    translatedTitle\n    translatedYoutubeId\n    youtubeId\n    __typename\n  }\n}",
  "getSatSkill": "query getSatSkill($skillId: String!) {\n  satSkill(skillId: $skillId) {\n    name\n    domain\n    subDomain\n    categoryTitle\n    frequencyBand\n    relatedTopics {\n      id\n      title\n      iconPath\n      relativeUrl\n      __typename\n    }\n    relatedVideos {\n      id\n      kind\n      title\n      youtubeId\n      thumbnailUrl\n      relativeUrl\n      duration\n      slug\n      __typename\n    }\n    relatedExercises {\n      id\n      kind\n      title\n      thumbnailUrl\n      relativeUrl\n      slug\n      __typename\n    }\n    relatedArticles {\n      id\n      kind\n      title\n      thumbnailUrl\n      relativeUrl\n      slug\n      __typename\n    }\n    workedExamples {\n      id\n      kind\n      title\n      youtubeId\n      thumbnailUrl\n      relativeUrl\n      duration\n      slug\n      __typename\n    }\n    cbLessonPlans {\n      id\n      kind\n      title\n      thumbnailUrl\n      relativeUrl\n      slug\n      __typename\n    }\n    __typename\n  }\n}",
  "getSatStudent": "query getSatStudent($kaid: String!, $domain: SatDomain, $startDate: Date, $endDate: Date) {\n  coach: user {\n    id\n    satStudent(id: $kaid, domain: $domain, startDate: $startDate, endDate: $endDate) {\n      id\n      name\n      kaid\n      activeScheduleCreated\n      examType\n      practiceTime {\n        hour\n        minute\n        __typename\n      }\n      examDate\n      registeredExamDate\n      cbLinked\n      recommendedTasks {\n        domain\n        isCompleted\n        name\n        title\n        taskId\n        taskType\n        level\n        minutes\n        __typename\n      }\n      completedTasks {\n        date\n        completedTasks {\n          domain\n          name\n          title\n          taskId\n          taskType\n          level\n          minutes\n          numCorrect\n          numTotal\n          reviewable\n          formName\n          scanAndScore\n          __typename\n        }\n        __typename\n      }\n      practiceTestScores {\n        title\n        math\n        readingAndWriting\n        overall\n        essay {\n          reading\n          analysis\n          writing\n          __typename\n        }\n        scanAndScore\n        __typename\n      }\n      practicePlan {\n        date\n        callToAction\n        examCompleted\n        examId\n        numProblems\n        sessionLength\n        visited\n        minutesSpent\n        __typename\n      }\n      domainSkillLevels {\n        domain\n        level\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getSatStudentRecentActivity": "query getSatStudentRecentActivity($kaid: String!, $domain: SatDomain, $startDate: Date, $endDate: Date) {\n  coach: user {\n    id\n    satStudent(id: $kaid, domain: $domain, startDate: $startDate, endDate: $endDate) {\n      id\n      problemsInfosWithDomain {\n        problemsDone\n        minutes\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getSatStudentRecommendedTasks": "query getSatStudentRecommendedTasks($kaid: String!, $domain: SatDomain, $startDate: Date, $endDate: Date) {\n  coach: user {\n    id\n    satStudent(id: $kaid, domain: $domain, startDate: $startDate, endDate: $endDate) {\n      id\n      recommendedTasks {\n        domain\n        isCompleted\n        name\n        title\n        taskId\n        taskType\n        level\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getSettingsPageData": "query getSettingsPageData($targetKaid: String) {\n  target: user(kaid: $targetKaid) {\n    id\n    nickname\n    username\n    isActor\n    isChild\n    email\n    isEnrolledInAIGuide\n    __typename\n  }\n}",
  "getSettingsPageDataByToken": "query getSettingsPageDataByToken($token: String!, $targetKaid: String) {\n  target: user(kaid: $targetKaid) {\n    id\n    nickname\n    username\n    isActor\n    isChild\n    email\n    isEnrolledInAIGuide\n    __typename\n  }\n  emailSettingsFromUnsubscribeToken(token: $token) {\n    email\n    __typename\n  }\n}",
  "GetStandardMappingEdits": "query GetStandardMappingEdits($setId: String!) {\n  standardMappingEdits(setId: $setId) {\n    id\n    setId\n    standardId\n    contentDescriptor\n    secondaryDescriptor\n    deletion: isDeletion\n    __typename\n  }\n}",
  "getStandardsDataForLocaleAndDomain": "query getStandardsDataForLocaleAndDomain($locale: String, $domain: String) {\n  allSetsOfStandards(locale: $locale, domain: $domain) {\n    id\n    name\n    shortName\n    standards {\n      id\n      standardId\n      description\n      children\n      __typename\n    }\n    __typename\n  }\n}\n",
  "getStandardsForContent": "query getStandardsForContent($setId: String!, $contentDescriptor: String!, $secondaryDescriptor: String) {\n  standards: editableStandardsForContent(\n    setId: $setId\n    contentDescriptor: $contentDescriptor\n    secondaryDescriptor: $secondaryDescriptor\n    region: \"*\"\n  ) {\n    id\n    standardId\n    __typename\n  }\n}",
  "GetStaticContent": "query GetStaticContent {\n  allLicenseOptions {\n    id\n    name\n    fullName\n    deedURL\n    logoURL\n    __typename\n  }\n  allCompletionCriteriaOptions {\n    id\n    name\n    __typename\n  }\n}",
  "getStripeSubscriptionForEditing": "query getStripeSubscriptionForEditing($subscriptionId: String!) {\n  simplifiedStripeSubscription(subscriptionId: $subscriptionId) {\n    id\n    customerName\n    customerId\n    last4\n    status\n    expMonth\n    expYear\n    monthlyAmountCents\n    __typename\n  }\n}\n",
  "getStudent": "query getStudent($kaid: String!, $teacherKaid: String!) {\n  user(kaid: $kaid) {\n    id\n    email\n    username\n    nickname\n    coachNickname(teacherKaid: $teacherKaid)\n    profileRoot\n    __typename\n  }\n}",
  "getStudentExerciseContentReport_Exercise": "query getStudentExerciseContentReport_Exercise($assignmentId: String!, $slug: String) {\n  exercise(name: $slug) {\n    id\n    translatedTitle: translatedDisplayName\n    assessmentItems {\n      id\n      contentId\n      itemData\n      __typename\n    }\n    __typename\n  }\n  student: user {\n    id\n    kaid\n    nickname\n    assignment(id: $assignmentId) {\n      id\n      assignedDate\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentExerciseContentReport_TopicQuiz": "query getStudentExerciseContentReport_TopicQuiz($assignmentId: String!, $slug: String) {\n  topicQuiz(slug: $slug) {\n    id\n    translatedTitle\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  student: user {\n    id\n    kaid\n    nickname\n    assignment(id: $assignmentId) {\n      id\n      assignedDate\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentExerciseContentReport_TopicUnitTest": "query getStudentExerciseContentReport_TopicUnitTest($assignmentId: String!, $slug: String) {\n  topicUnitTest(slug: $slug) {\n    id\n    translatedTitle\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  student: user {\n    id\n    kaid\n    nickname\n    assignment(id: $assignmentId) {\n      id\n      assignedDate\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentListEmailSubscriptions": "query getStudentListEmailSubscriptions($classroomDescriptor: String!) {\n  coach: user {\n    id\n    emailSubscriptions {\n      coachReportSubscription: classroomEmailSubscriptionForClassroomDescriptor(\n        classroomDescriptor: $classroomDescriptor\n      ) {\n        checked\n        token\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudents": "query getStudents($classDescriptor: String!, $aiGuideEnabledStudentsOnly: Boolean!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    students @include(if: $aiGuideEnabledStudentsOnly) {\n      id\n      kaid\n      hasAccessToAIGuideLearner\n      isAIGuideEnabled\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentSettings": "query getStudentSettings($kaid: String!) {\n  student: user(kaid: $kaid) {\n    id\n    nickname\n    username\n    birthdate\n    userLanguage\n    region\n    soundOn\n    muteVideos\n    showCaptions\n    hideVisual\n    prefersReducedMotion\n    noColorInVideos\n    includesDistrictOwnedData\n    includesCentrallyOwnedDistrictData\n    settingsCanBeModByLoggedInUser\n    userDistrictInfos {\n      id\n      districtProvidedBirthMonth\n      districtProvidedBirthYear\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentsForMappers": "query getStudentsForMappers {\n  user {\n    id\n    nickname\n    username\n    age\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      key\n      name\n      __typename\n    }\n    students: coachees {\n      id\n      nickname\n      username\n      age\n      studentLists {\n        id\n        cacheId\n        key\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentsPerClass": "query getStudentsPerClass($after: Int, $classDescriptor: String!, $coachKaid: String, $dueAfter: DateTime, $pageSize: Int) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    studentsPage(after: $after, pageSize: $pageSize) {\n      students {\n        id\n        assignmentCount(dueAfter: $dueAfter)\n        coachNickname(teacherKaid: $coachKaid)\n        email\n        isChild\n        username\n        __typename\n      }\n      nextCursor\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentsPerCoach": "query getStudentsPerCoach($coachKaid: String, $after: Int, $pageSize: Int) {\n  coach: user(kaid: $coachKaid) {\n    id\n    studentsPage(after: $after, pageSize: $pageSize) {\n      students {\n        id\n        coachNickname(teacherKaid: $coachKaid)\n        kaid\n        email\n        isChild\n        username\n        __typename\n      }\n      nextCursor\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentUserStatus": "query getStudentUserStatus {\n  user {\n    id\n    nickname\n    age\n    birthdate\n    cleverId\n    userDistrictInfos {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "GetSubtitles": "query GetSubtitles($youtubeId: String!, $kaLocale: String!) {\n  subtitles(youtubeId: $youtubeId, kaLocale: $kaLocale) {\n    text\n    startTime\n    endTime\n    kaIsValid\n    __typename\n  }\n}",
  "getSuggestedUsername": "query getSuggestedUsername($requestedUsername: String!) {\n  suggestedUsername(requestedUsername: $requestedUsername)\n}",
  "GetSuggestionsSource": "query GetSuggestionsSource($version: String!) {\n  queryCounts(version: $version) {\n    name\n    count\n    __typename\n  }\n}",
  "getTeacherCampaign": "query getTeacherCampaign($id: String!) {\n  teacherCampaign(id: $id) {\n    id\n    live\n    eligibleLocale\n    eligibleCountryCodes\n    audience\n    campaignName\n    promoSite\n    signupStartDate\n    startDate\n    shutdownDate\n    bannerBeforeHeader\n    bannerBeforeCopy\n    bannerBeforeGraphic\n    colorBg\n    colorBgAccent\n    __typename\n  }\n}",
  "getTeacherCampaignDataForResponsePage": "query getTeacherCampaignDataForResponsePage($id: ID!, $stepId: ID!) {\n  coach: user {\n    id\n    teacherCampaignProgress(id: $id) {\n      id\n      completedSteps\n      responseProgress(stepId: $stepId) {\n        completedExercises\n        __typename\n      }\n      campaign {\n        id\n        steps {\n          __typename\n          id\n          ... on TeacherCampaignResponseStep {\n            header\n            body\n            graphic\n            description\n            exercises {\n              title\n              description\n              introduction\n              questions\n              samples\n              __typename\n            }\n            __typename\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherCampaignDataForVideoPage": "query getTeacherCampaignDataForVideoPage($id: ID!) {\n  coach: user {\n    id\n    teacherCampaignProgress(id: $id) {\n      id\n      completedSteps\n      campaign {\n        id\n        steps {\n          __typename\n          id\n          ... on TeacherCampaignVideoStep {\n            header\n            body\n            graphic\n            numberRequired\n            handouts\n            manualHandouts\n            manualHandoutDescriptions\n            videos\n            description\n            __typename\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherCampaignPreviewVideo": "query getTeacherCampaignPreviewVideo($id: String!) {\n  video(id: $id) {\n    id\n    thumbnailUrl\n    kind\n    kaUrl\n    slug\n    translatedTitle\n    translatedYoutubeId\n    translatedDescription\n    youtubeId\n    __typename\n  }\n  user {\n    id\n    contentItemProgresses(queryBy: {videoSlug: $id}) {\n      completionStatus\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherCampaignProgressForBanner": "query getTeacherCampaignProgressForBanner {\n  coach: user {\n    id\n    teacherCampaignProgress {\n      id\n      optedOutPreCampaign\n      optedOutOfCampaign\n      completedSteps\n      campaign {\n        id\n        live\n        eligibleLocale\n        eligibleCountryCodes\n        campaignName\n        promoSite\n        signupStartDate\n        startDate\n        shutdownDate\n        bannerBeforeHeader\n        bannerBeforeCopy\n        bannerBeforeGraphic\n        colorBg\n        colorBgAccent\n        challengeActive\n        contestActive\n        steps {\n          id\n          header\n          body\n          graphic\n          cta\n          headerShort\n          __typename\n          ... on TeacherCampaignVideoStep {\n            numberRequired\n            handouts\n            videos\n            __typename\n          }\n          ... on TeacherCampaignResponseStep {\n            exercises {\n              introduction\n              questions\n              __typename\n            }\n            __typename\n          }\n          ... on TeacherCampaignAwardStep {\n            headerOnCompletion\n            bodyOnCompletion\n            certificate\n            extraCredit\n            nextDrawTime\n            useGenericIcon\n            __typename\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherCampaigns": "query getTeacherCampaigns {\n  teacherCampaigns {\n    id\n    campaignName\n    live\n    __typename\n  }\n}",
  "getTeamPage": "query getTeamPage($name: TeamPageName!) {\n  teamPage(name: $name) {\n    entries {\n      id\n      liveContent {\n        id\n        name\n        isAlum\n        mainPhotoURL\n        hoverPhotoURL\n        title\n        bio\n        altNames\n        contactLinks {\n          type\n          url\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTestPrepProgressReport": "query getTestPrepProgressReport($classDescriptor: String!, $filters: TestPrepProgressReportFilters) {\n  testPrepProgressReport(classroomDescriptor: $classDescriptor, filters: $filters) {\n    teacherKaid\n    classId\n    rows {\n      studentKaidAndNickname {\n        id\n        coachNickname\n        __typename\n      }\n      totalMinutes\n      completedPracticeTasks\n      passedPracticeTasks\n      skillsLeveledUp\n      __typename\n    }\n    __typename\n  }\n}",
  "getThankYouVideo": "query getThankYouVideo {\n  video(id: \"evergreen-thank-you-video\") {\n    id\n    kaUrl\n    kind\n    slug\n    title\n    translatedTitle\n    translatedYoutubeId\n    youtubeId\n    __typename\n  }\n}",
  "getTopic": "query getTopic($slug: String!) {\n  topic(slug: $slug) {\n    id\n    relativeUrl\n    translatedTitle\n    __typename\n  }\n}",
  "getTopicPathBreadcrumbs": "query getTopicPathBreadcrumbs($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    topicPaths {\n      path {\n        id\n        kind\n        slug\n        content {\n          ... on CurationNode {\n            id\n            title\n            __typename\n          }\n          ... on LearnableContent {\n            id\n            title\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetTopicQuestionsQuery": "query GetTopicQuestionsQuery($topicId: String!, $cursor: String, $limit: Int, $feedbackType: FeedbackType, $forceInTutorial: Boolean, $minAnswers: Int, $maxAnswers: Int) {\n  topicQuestions(\n    topicID: $topicId\n    topicSlug: \"\"\n    cursor: $cursor\n    limit: $limit\n    feedbackType: $feedbackType\n    forceInTutorial: $forceInTutorial\n    minAnswers: $minAnswers\n    maxAnswers: $maxAnswers\n    answersLimit: 1\n  ) {\n    feedback {\n      isLocked\n      isPinned\n      replyCount\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flaggedByUser\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      ... on QuestionFeedback {\n        hasAnswered\n        answers {\n          isLocked\n          isPinned\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        isOld\n        answerCount\n        __typename\n      }\n      ... on AnswerFeedback {\n        question {\n          isLocked\n          isPinned\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    domainId\n    cursor\n    complete\n    length\n    topic {\n      id\n      slug\n      translatedTitle\n      relativeUrl\n      description\n      title\n      creationDate\n      kind\n      translatedDescription\n      __typename\n    }\n    __typename\n  }\n}",
  "getTopics": "query getTopics($courseIdsToAdd: [String]!, $descriptor: String!, $fetchDistrictCourses: Boolean!, $region: String!) {\n  domains: studentListTopics(region: $region) {\n    slug: domainSlug\n    title: translatedTitle\n    subjects: topics {\n      contentKind\n      slug\n      id\n      key\n      title: translatedTitle\n      iconPath\n      domainSlug\n      masteryEnabled\n      subjectMasteryEnabled\n      isHighSchoolSubject\n      translatedStandaloneTitle\n      __typename\n    }\n    __typename\n  }\n  coursesByIds(ids: $courseIdsToAdd) {\n    contentKind\n    slug\n    id\n    key\n    title: translatedTitle\n    iconPath\n    domainSlug\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $descriptor) @include(if: $fetchDistrictCourses) {\n    id\n    cacheId\n    classroomDistrictInfo {\n      id\n      customCourses {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTransferAuthToken": "query getTransferAuthToken {\n  user {\n    id\n    transferAuthToken\n    __typename\n  }\n}",
  "getUserByUsernameOrEmail": "query getUserByUsernameOrEmail($username: String, $email: String) {\n  user(username: $username, email: $email) {\n    id\n    kaid\n    __typename\n  }\n}",
  "getUserChangeLogsAsDevadmin": "query getUserChangeLogsAsDevadmin($after: ID, $actorKaid: String, $targetKaid: String, $pageSize: Int) {\n  user {\n    id\n    userSettingsChangeLogsPage(\n      actorKaid: $actorKaid\n      targetKaid: $targetKaid\n      pageSize: $pageSize\n      after: $after\n    ) {\n      logs {\n        id\n        actorKaid\n        targetKaid\n        timestamp\n        changes {\n          settingsType\n          beforeValue\n          afterValue\n          __typename\n        }\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserCoaches": "query getUserCoaches($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    classroomDistrictInfos {\n      id\n      teacherUserDistrictInfoIDs {\n        id\n        kaid\n        __typename\n      }\n      __typename\n    }\n    coaches {\n      id\n      kaid\n      username\n      nickname\n      profileRoot\n      isCoachingLoggedInUser\n      __typename\n    }\n    pendingCoaches {\n      id\n      kaid\n      username\n      nickname\n      profileRoot\n      isCoachingLoggedInUser\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserDevAdminGeneral": "query getUserDevAdminGeneral($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    age\n    aiGuideAccessPlans {\n      id\n      isActive\n      recipientKAID\n      description\n      createdBy\n      createdAt\n      activatedAt\n      deactivatedAt\n      deactivationReasons\n      deactivationExplanation\n      eligibilityPolicy\n      lifecycleType\n      enrollmentGroup\n      enrollmentGroupReferenceID\n      expiresAt\n      __typename\n    }\n    aiGuideDisabledReason\n    aiGuideEnrollmentGroup\n    applePrimaryEmail\n    appleId\n    authEmails\n    birthdate\n    bio\n    canAccessDistrictsHomepage\n    canModifyCoaches\n    children {\n      id\n      __typename\n    }\n    cleverDistrictId\n    cleverId\n    cleverLastSync\n    coaches {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    pendingCoaches {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    countExercisesMastered\n    countVideosCompleted\n    discussionBanned\n    email\n    facebookPrimaryEmail\n    facebookId\n    googlePrimaryEmail\n    googleId\n    hasParents\n    hasPassword\n    homepage\n    isAIGuideEnabled\n    isChild\n    isCleverV3\n    isEnrolledInAIGuide\n    isPhantom\n    isParent\n    isTeacher\n    isTotpTwoFactorEnabled\n    isFormalTeacher\n    joined\n    kaid\n    lastLogin\n    lastLoginIp\n    lastLoginCountry\n    lastLoginKaLocale\n    lastReportedTimezone\n    managingParent {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    nickname\n    parents {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    pendingEmails\n    pendingEmailVerifications {\n      email\n      __typename\n    }\n    points\n    possibleConflictingUsers {\n      kaid: id\n      email\n      username\n      __typename\n    }\n    profileRoot\n    programCount\n    region\n    signupDataIfUnverified {\n      email\n      __typename\n    }\n    spawningTeacher {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    spawningParent {\n      id\n      kaid\n      email\n      username\n      __typename\n    }\n    title\n    tosForFormalTeacherStatus\n    underAgeGate {\n      approvalGivenAt\n      approvalSource\n      parentEmail\n      __typename\n    }\n    userAdminLogs {\n      adminKaid\n      adminEmail\n      date\n      description\n      __typename\n    }\n    userId\n    userLanguage\n    username\n    userNotes {\n      text\n      date\n      author {\n        id\n        email\n        __typename\n      }\n      __typename\n    }\n    userChosenRoles\n    userDistrictInfos {\n      id\n      uuid\n      kaid\n      adminOfSchools {\n        id\n        name\n        __typename\n      }\n      gracePeriod {\n        start\n        end\n        __typename\n      }\n      partnership {\n        ... on MetaDistrict {\n          id\n          name\n          __typename\n        }\n        ... on District {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      district {\n        id\n        name\n        isOldNWEA\n        kaLocale\n        ancestors {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      createdAt\n      deletedAt\n      updatedAt\n      cleverId\n      classlinkId\n      rosterSource\n      activationEmailSentAt\n      activatedAt\n      activationMethod\n      districtProvidedFullName\n      districtProvidedEmail\n      districtProvidedBirthMonth\n      districtProvidedBirthYear\n      primaryRole\n      isKmap\n      isKAD\n      gradeLevel\n      khanmigoShould\n      khanmigoStatus\n      khanmigoReason\n      udiAuditLogs {\n        kind\n        changes\n        actorKaid\n        createdAt\n        description\n        __typename\n      }\n      __typename\n    }\n    userMetaInfos {\n      id\n      uuid\n      kaid\n      partnership {\n        id\n        name\n        __typename\n      }\n      adminOf {\n        ... on MetaDistrict {\n          id\n          name\n          ancestors {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        ... on District {\n          id\n          name\n          ancestors {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      createdAt\n      deletedAt\n      updatedAt\n      activationEmailSentAt\n      activatedAt\n      fullName\n      email\n      umiAuditLogs {\n        kaid\n        actorKaid\n        createdAt\n        description\n        __typename\n      }\n      __typename\n    }\n    walmartId\n    walmartDivision\n    canvasUserId\n    hasCoach\n    isK4dStudent\n    isKmapStudent\n    isK4dTeacher\n    isStudentOfFormalTeacherActor\n    stripeCustomerUrl\n    __typename\n  }\n  coach: user(kaid: $kaid) {\n    id\n    countStudents: coacheeCount\n    studentLists: coachedStudentLists {\n      id\n      descriptor\n      cacheId\n      name\n      isCleverLibrarySynced\n      isK4dClassroom\n      isKmapClassroom\n      includesDistrictOwnedData\n      includesCentrallyOwnedDistrictData\n      signupCode\n      googleClassId\n      topics {\n        id\n        title\n        __typename\n      }\n      classroomDistrictInfo {\n        id\n        name\n        classWillBeRemovedInDays\n        districtProvidedIdentifier\n        rosterSource\n        cdiAuditLogs {\n          kind\n          description\n          createdAt\n          __typename\n        }\n        __typename\n      }\n      createdOn\n      studentKaids\n      primaryTeacher: coach {\n        id\n        kaid\n        email\n        __typename\n      }\n      allTeachers {\n        id\n        kaid\n        email\n        __typename\n      }\n      masteryTowerCurrentWeekScore\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserHasUsedProduct": "query getUserHasUsedProduct($examGroupId: String!, $kaid: String!) {\n  examGroup(examGroupId: $examGroupId) {\n    id\n    userHasUsedProduct(kaid: $kaid)\n    __typename\n  }\n}",
  "getUserHoverCardProfile": "query getUserHoverCardProfile($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    nickname\n    username\n    bio\n    avatar {\n      name\n      imageSrc\n      __typename\n    }\n    points\n    isPhantom\n    isActor\n    isCoachedByActor\n    userSummaryIsVisibleToActor\n    actorHasUserScopedPermission(capability: CAN_VIEW_USER_IDENTITY)\n    __typename\n  }\n}",
  "getUserInfoForLinking": "query getUserInfoForLinking($userDistrictInfoUuid: ID!) {\n  userDistrictInfo(uuid: $userDistrictInfoUuid) {\n    id\n    districtProvidedEmail\n    districtProvidedFirstName\n    districtProvidedLastName\n    districtProvidedFullName\n    districtProvidedBirthYear\n    districtProvidedBirthMonth\n    primaryRole\n    isKmap\n    kaid\n    uuid\n    cleverId\n    classlinkId\n    __typename\n  }\n}",
  "getUserInfoForSubjectProgress": "query getUserInfoForSubjectProgress($topicId: String!) {\n  user {\n    id\n    curationItemProgress(topicId: $topicId) {\n      masteryMap {\n        progressKey\n        status\n        __typename\n      }\n      currentMastery {\n        percentage\n        pointsEarned\n        pointsAvailable\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserInfoForTopicProgressMastery": "query getUserInfoForTopicProgressMastery($topicId: String!) {\n  user {\n    contentItemProgresses(queryBy: {parentTopicId: $topicId}) {\n      ...CommonContentItemProgressesFragment\n      __typename\n    }\n    ...CommonUserInfoFragment\n    __typename\n  }\n}\n\nfragment CommonContentItemProgressesFragment on ContentItemProgress {\n  bestScore {\n    numAttempted\n    numCorrect\n    completedDate\n    __typename\n  }\n  completionStatus\n  content {\n    id\n    progressKey\n    __typename\n  }\n  __typename\n}\n\nfragment CommonUserInfoFragment on User {\n  id\n  curationItemProgress(topicId: $topicId) {\n    masteryEnabled\n    subjectMasteryEnabled\n    masteryMap {\n      progressKey\n      status\n      __typename\n    }\n    currentMastery {\n      percentage\n      pointsEarned\n      pointsAvailable\n      __typename\n    }\n    __typename\n  }\n  recommendationsForUnit(unitId: $topicId) {\n    contentId\n    sourceId\n    kind\n    __typename\n  }\n  __typename\n}",
  "getUserInfoForTopicProgressNonMastery": "query getUserInfoForTopicProgressNonMastery($topicId: String!) {\n  user {\n    contentItemProgresses(queryBy: {parentTopicId: $topicId}) {\n      ...CommonContentItemProgressesFragment\n      ... on ExerciseItemProgress {\n        lastCompletedAttempt {\n          id\n          lastAttemptDate\n          numCorrect\n          numAttempted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    ...CommonUserInfoFragment\n    __typename\n  }\n}\n\nfragment CommonContentItemProgressesFragment on ContentItemProgress {\n  bestScore {\n    numAttempted\n    numCorrect\n    completedDate\n    __typename\n  }\n  completionStatus\n  content {\n    id\n    progressKey\n    __typename\n  }\n  __typename\n}\n\nfragment CommonUserInfoFragment on User {\n  id\n  curationItemProgress(topicId: $topicId) {\n    masteryEnabled\n    subjectMasteryEnabled\n    masteryMap {\n      progressKey\n      status\n      __typename\n    }\n    currentMastery {\n      percentage\n      pointsEarned\n      pointsAvailable\n      __typename\n    }\n    __typename\n  }\n  recommendationsForUnit(unitId: $topicId) {\n    contentId\n    sourceId\n    kind\n    __typename\n  }\n  __typename\n}",
  "getUserProgressDump": "query getUserProgressDump($kaid: String!, $problemLogCursor: ID, $videoProgressesCursor: ID, $pageSize: Int, $startDt: DateTime, $endDt: DateTime) {\n  user(kaid: $kaid) {\n    id\n    kaid\n    email\n    lastLoginKaLocale\n    rawLogs {\n      videoProgressesPage(\n        startDt: $startDt\n        endDt: $endDt\n        after: $videoProgressesCursor\n        pageSize: $pageSize\n      ) {\n        videoProgresses {\n          completed\n          lastSecondWatched\n          duration\n          progress\n          points\n          secondsWatched\n          lastWatched\n          content {\n            id\n            title\n            ... on Video {\n              youtubeId\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        pageInfo {\n          nextCursor\n          __typename\n        }\n        __typename\n      }\n      problemLogsPage(\n        startDt: $startDt\n        endDt: $endDt\n        after: $problemLogCursor\n        pageSize: $pageSize\n      ) {\n        problemLogs {\n          correct\n          countAttempts\n          countHints\n          exercise\n          exerciseContent {\n            id\n            title\n            __typename\n          }\n          ipAddress\n          incomingFpmLevel\n          outgoingFpmLevel\n          pointsEarned\n          problemNumber\n          problemsCorrect\n          problemsTotal\n          task {\n            id\n            isRestarted\n            creationDate\n            completedDate\n            skillLevelChanges {\n              id\n              skillId\n              after\n              __typename\n            }\n            __typename\n          }\n          taskContent {\n            id\n            title\n            __typename\n          }\n          taskKey\n          taskType\n          timeDone\n          timeTaken\n          __typename\n        }\n        pageInfo {\n          nextCursor\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserSoundOn": "query getUserSoundOn {\n  user {\n    id\n    soundOn\n    __typename\n  }\n}",
  "getUserSoundPref": "query getUserSoundPref {\n  user {\n    id\n    soundOn\n    __typename\n  }\n}",
  "getUsersWithGrants": "query getUsersWithGrants($withRoles: [String!]) {\n  usersWithGrants(withRoles: $withRoles) {\n    id\n    kaid\n    email\n    nickname\n    grants {\n      role {\n        name\n        description\n        __typename\n      }\n      grantingUserEmail\n      permissionId\n      __typename\n    }\n    __typename\n  }\n}",
  "getUsersWithGrantsForEmail": "query getUsersWithGrantsForEmail($email: String!) {\n  user(email: $email) {\n    id\n    email\n    kaid\n    nickname\n    grants {\n      permissionId\n      role {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getVideo": "query getVideo($contentId: String!) {\n  videoById(contentId: $contentId) {\n    id\n    assessmentItemTags\n    contentKind\n    defaultUrlPath\n    kind\n    nodeSlug\n    slug\n    sponsored\n    title\n    translatedDescription\n    translatedTitle\n    translatedCustomTitleTag\n    authorNames\n    authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    creationDate\n    dateAdded\n    description\n    descriptionHtml\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    relativeUrl\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    __typename\n  }\n}",
  "getVideoListAndLocalesForLiteLocale": "query getVideoListAndLocalesForLiteLocale($kaLocale: String!) {\n  videoListingForLocale(kaLocale: $kaLocale) {\n    title\n    description\n    videos {\n      id\n      youtubeId\n      title\n      description\n      __typename\n    }\n    __typename\n  }\n  localesForLanguagePicker(includeEnglish: false, includeFake: false) {\n    id\n    localName\n    kaLocale\n    __typename\n  }\n}",
  "getVideoListForLiteLocale": "query getVideoListForLiteLocale($kaLocale: String!) {\n  videoListingForLocale(kaLocale: $kaLocale) {\n    videos {\n      id\n      youtubeId\n      title\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "getVideoNameForTeacherCampaignPreview": "query getVideoNameForTeacherCampaignPreview($id: String!) {\n  video(id: $id) {\n    id\n    translatedTitle\n    __typename\n  }\n}",
  "getVideoPlayerSettings": "query getVideoPlayerSettings {\n  user {\n    id\n    hasClasses\n    hasPermission(name: \"can_moderate_users\")\n    muteVideos\n    noColorInVideos\n    showCaptions\n    playbackRate\n    __typename\n  }\n}",
  "getVideoSlug": "query getVideoSlug($contentId: String!) {\n  videoById(contentId: $contentId) {\n    id\n    slug\n    __typename\n  }\n}",
  "GetWalmartProfile": "query GetWalmartProfile($profileKeyName: String!) {\n  walmartProfile(profileKeyName: $profileKeyName) {\n    walmartId\n    nickname\n    continueUrl\n    __typename\n  }\n}",
  "gtp_getCheckpoints": "query gtp_getCheckpoints($examId: String!) {\n  checkpoints(examId: $examId) {\n    ...gtp_checkpointFragment\n    __typename\n  }\n}",
  "gtp_getDescriptors": "query gtp_getDescriptors($examId: String!, $checkpointStr: String) {\n  descriptorList(examId: $examId, requestedCheckpoint: $checkpointStr) {\n    id\n    checkpointStr\n    ...gtp_descriptorsFragment\n    __typename\n  }\n}",
  "gtp_getEGUD": "query gtp_getEGUD($examGroupId: String!) {\n  egud(examGroupId: $examGroupId) {\n    ...gtp_egudFragment\n    __typename\n  }\n}",
  "gtp_getEGUDViaExam": "query gtp_getEGUDViaExam($examId: String!) {\n  exam(examId: $examId) {\n    id\n    examGroup {\n      id\n      egud {\n        ...gtp_egudFragment\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getEmailRemindersData": "query gtp_getEmailRemindersData($listName: String!) {\n  user {\n    id\n    emailSubscriptions {\n      email\n      sailthruSubscriptionForListName(listName: $listName) {\n        checked\n        token\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getEssayScores": "query gtp_getEssayScores($examId: String!) {\n  essayScores(examId: $examId) {\n    ...gtp_essayScoresFragment\n    __typename\n  }\n}\n\nfragment gtp_essayScoresFragment on EssayScores {\n  areas {\n    translatedTitle\n    essays {\n      examCompletionDate\n      score\n      maxScore\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "gtp_getExamGroupMetadata": "query gtp_getExamGroupMetadata($examGroupId: String!) {\n  examGroup(examGroupId: $examGroupId) {\n    id\n    examGroupMetadata {\n      ...gtp_examGroupMetadataFragment\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getExamMetadata": "query gtp_getExamMetadata($examId: String!) {\n  metadata(examId: $examId) {\n    ...gtp_examMetadataFragment\n    __typename\n  }\n}",
  "gtp_getExamOnboardingLessons": "query gtp_getExamOnboardingLessons($examId: String!) {\n  exam(examId: $examId) {\n    id\n    onboardingLessons {\n      id\n      slug\n      translatedTitle\n      translatedDescription\n      content: childrenWithUnlisted {\n        ... on Video {\n          id\n          contentId\n          title\n          translatedTitle\n          slug\n          kind\n          thumbnailUrl\n          description\n          contentId\n          progressKey\n          imageUrl\n          duration\n          youtubeId\n          translatedYoutubeId\n          downloadUrls\n          translatedYoutubeLang\n          nodeUrl: relativeUrl\n          kaUrl\n          __typename\n        }\n        ... on Article {\n          id\n          contentId\n          title\n          translatedTitle\n          slug\n          kind\n          thumbnailUrl\n          description\n          contentId\n          progressKey\n          nodeUrl: relativeUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getExpressDescriptors": "query gtp_getExpressDescriptors($examId: String!) {\n  descriptorList(examId: $examId, express: true) {\n    id\n    checkpointStr\n    expressDescriptors {\n      id\n      examId\n      kaid\n      taskType\n      translatedTitle\n      exerciseName\n      taskId\n      areaId\n      taskDurationSeconds\n      startDatetime\n      completionDatetime\n      numTotal\n      numCorrect\n      numAttempted\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getFullPracticeTests": "query gtp_getFullPracticeTests($examId: String!, $examGroupId: String!) {\n  egud(examGroupId: $examGroupId) {\n    id\n    selectedExams\n    __typename\n  }\n  exam(examId: $examId) {\n    id\n    examId\n    userData {\n      id\n      practiceTests {\n        id\n        approxTestMins\n        testTitle\n        referenceTitle\n        completionStatus\n        completedAt\n        sections {\n          exerciseSlug\n          completed\n          taskId\n          __typename\n        }\n        subScores {\n          score\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getHubPageData": "query gtp_getHubPageData($examId: String!) {\n  metadata(examId: $examId) {\n    id\n    examGroupMetadata {\n      examGroupId\n      __typename\n    }\n    subExamMode\n    __typename\n  }\n  descriptorList(examId: $examId, express: true) {\n    id\n    checkpointStr\n    expressDescriptors {\n      id\n      examId\n      kaid\n      taskType\n      translatedTitle\n      exerciseName\n      taskId\n      areaId\n      taskDurationSeconds\n      startDatetime\n      completionDatetime\n      numTotal\n      numCorrect\n      numAttempted\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getOnboardingContentProgress": "query gtp_getOnboardingContentProgress($lessonId: String!) {\n  user {\n    id\n    contentItemProgresses(queryBy: {parentTopicId: $lessonId}) {\n      completionStatus\n      content {\n        id\n        progressKey\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getPracticeTestsAndTpud": "query gtp_getPracticeTestsAndTpud($examId: String!) {\n  exam(examId: $examId) {\n    id\n    userData {\n      id\n      practiceTests {\n        id\n        completionStatus\n        __typename\n      }\n      tpud {\n        id\n        schedule {\n          practiceTestDates\n          __typename\n        }\n        targetScore\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getSeedSkillLevelsBannerData": "query gtp_getSeedSkillLevelsBannerData($examId: String!) {\n  tpud(examId: $examId) {\n    id\n    diagnosticsStates {\n      type\n      state\n      __typename\n    }\n    hasSeededSkillLevels\n    __typename\n  }\n  descriptorList(examId: $examId) {\n    id\n    checkpointStr\n    expressDescriptors {\n      id\n      taskDurationSeconds\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getTaskById": "query gtp_getTaskById($taskType: String!, $taskId: String!) {\n  task(taskType: $taskType, taskId: $taskId) {\n    ...gtp_taskFragment\n    __typename\n  }\n}",
  "gtp_getTestPrepHeaderInfo": "query gtp_getTestPrepHeaderInfo($examId: String!) {\n  exam(examId: $examId) {\n    id\n    examGroup {\n      id\n      examGroupMetadata {\n        id\n        testMaker\n        testMakerLogoImg\n        kaRelationshipToTestCopy\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_getTestSectionTasks": "query gtp_getTestSectionTasks($examId: String!, $taskId: String!) {\n  testSectionTasks(examId: $examId, taskId: $taskId) {\n    ...gtp_taskFragment\n    __typename\n  }\n}",
  "gtp_getTPUD": "query gtp_getTPUD($examId: String!) {\n  checkpoints(examId: $examId) {\n    ...gtp_checkpointFragment\n    __typename\n  }\n  exam(examId: $examId) {\n    id\n    userData {\n      id\n      practiceTests {\n        ...gtp_practiceTestFragment\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  drillStage(examId: $examId) {\n    id\n    numCreditedTasks\n    creditedTaskIds\n    __typename\n  }\n  tpud(examId: $examId) {\n    ...gtp_tpudFragment\n    __typename\n  }\n}",
  "gtp_onboardingStatus": "query gtp_onboardingStatus($examGroupId: String!) {\n  egud(examGroupId: $examGroupId) {\n    id\n    selectedExams\n    __typename\n  }\n  examGroup(examGroupId: $examGroupId) {\n    id\n    exams {\n      id\n      examId\n      userData {\n        id\n        tpud {\n          id\n          onboardingState\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gtp_relatedContent": "query gtp_relatedContent($taskType: String!, $taskId: String!) {\n  relatedContent(taskType: $taskType, taskId: $taskId) {\n    id\n    taskId\n    concepts {\n      translatedTitle\n      conceptId\n      content {\n        ... on LearnableContent {\n          id\n          thumbnailUrl\n          slug\n          translatedTitle\n          kind\n          __typename\n        }\n        ... on Video {\n          translatedYoutubeId\n          duration\n          relativeUrl\n          youtubeId\n          __typename\n        }\n        ... on Article {\n          relativeUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    skills {\n      translatedTitle\n      skillId\n      content {\n        ... on LearnableContent {\n          id\n          thumbnailUrl\n          slug\n          translatedTitle\n          kind\n          __typename\n        }\n        ... on Video {\n          translatedYoutubeId\n          duration\n          relativeUrl\n          youtubeId\n          __typename\n        }\n        ... on Article {\n          relativeUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "guideTranscript": "query guideTranscript($transcriptId: String!) {\n  aiGuideThread(threadId: $transcriptId) {\n    id\n    summary\n    lastUpdatedAt\n    flagged\n    kaid\n    title\n    insights {\n      interests\n      topics\n      offTopic\n      safety\n      languages\n      title\n      summary\n      math\n      __typename\n    }\n    interactions {\n      id\n      answer\n      question\n      userInputImage\n      url\n      createdAt\n      flagged\n      flaggedCategories\n      responseWasStoppedByUser\n      traceID\n      __typename\n    }\n    blooketQuestionSet {\n      id\n      title\n      description\n      questions {\n        text\n        answers {\n          text\n          isCorrect\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    coeditingDocument {\n      id\n      snapshots {\n        id\n        createdAt\n        text {\n          prefix\n          selection\n          suffix\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "guideTranscripts": "query guideTranscripts($kaid: String!, $cursor: String, $startDate: DateTime, $endDate: DateTime, $moderationStatus: ModerationStatus) {\n  aiGuideThreads(\n    kaid: $kaid\n    cursor: $cursor\n    startDate: $startDate\n    endDate: $endDate\n    moderationStatus: $moderationStatus\n  ) {\n    threads {\n      id\n      lastUpdatedAt\n      flagged\n      title\n      interactions {\n        id\n        pageType\n        pageTitle\n        question\n        answer\n        __typename\n      }\n      coeditingDocument {\n        id\n        title\n        __typename\n      }\n      __typename\n    }\n    cursor\n    __typename\n  }\n}",
  "hasChangedAvatar": "query hasChangedAvatar($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    hasChangedAvatar\n    __typename\n  }\n}",
  "hasUsedTestPrepProductQuery": "query hasUsedTestPrepProductQuery($examGroupId: String!) {\n  examGroup(examGroupId: $examGroupId) {\n    id\n    actorHasUsedProduct\n    __typename\n  }\n}",
  "hellbanActionsyQuery": "query hellbanActionsyQuery($kaid: String!) {\n  userSummary(kaid: $kaid) {\n    hellbanActions {\n      date\n      isHellban\n      moderatorNickname\n      reason\n      urlsafeKey\n      __typename\n    }\n    __typename\n  }\n}",
  "homepageQueryV4": "query homepageQueryV4($kaid: String, $username: String) {\n  actorUser: user {\n    id\n    hasAccessToAIGuideLearner\n    isAIGuideEnabled\n    canViewAiGuideHistory: hasPermission(name: \"can_view_ai_guide_history\")\n    canManageDistrictStudent(studentKaid: $kaid)\n    __typename\n  }\n  user(kaid: $kaid, username: $username) {\n    id\n    kaid\n    isActor\n    isCoachedByActor\n    isManagedByActor\n    isAIGuideEnabled\n    canViewUserProgress: actorHasUserScopedPermission(\n      capability: CAN_VIEW_USER_PROGRESS\n    )\n    canViewTeachersAndClassrooms: actorHasUserScopedPermission(\n      capability: CAN_VIEW_TEACHERS_AND_CLASSROOMS\n    )\n    isDistrictSynced\n    isKmapSynced\n    userDistrictInfos {\n      id\n      currentMathAssessment {\n        id\n        mapTestKey\n        __typename\n      }\n      gradeLevel\n      __typename\n    }\n    homepageModules {\n      navigation {\n        myCoursesEnabled\n        interestedInLsat\n        classes {\n          classroom {\n            id\n            descriptor\n            cacheId\n            name\n            coach {\n              id\n              kaid\n              __typename\n            }\n            signupCode\n            topics {\n              id\n              __typename\n            }\n            createdOn\n            __typename\n          }\n          showAssignments\n          hasActiveAssignments\n          hasKmapGoals\n          hasNonMapGoals\n          isKmap\n          isK4d\n          latestDueDate\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  hasAccessToAIGuideDev\n}",
  "hotlist": "query hotlist($curationNodeId: String, $onlyOfficialProjectSpinoffs: Boolean!, $sort: ListProgramSortOrder, $pageInfo: ListProgramsPageInfo, $userAuthoredContentTypes: [UserAuthoredContentType!]) {\n  listTopPrograms(\n    curationNodeId: $curationNodeId\n    onlyOfficialProjectSpinoffs: $onlyOfficialProjectSpinoffs\n    sort: $sort\n    pageInfo: $pageInfo\n    userAuthoredContentTypes: $userAuthoredContentTypes\n  ) {\n    complete\n    cursor\n    programs {\n      id\n      key\n      authorKaid\n      authorNickname\n      displayableSpinoffCount\n      imagePath\n      sumVotesIncremented\n      translatedTitle: title\n      url\n      userAuthoredContentType\n      __typename\n    }\n    __typename\n  }\n}",
  "InstructionalAndRitBandsQuery": "query InstructionalAndRitBandsQuery {\n  kmapTopics {\n    id\n    key\n    title\n    domainSlug\n    band\n    bandGradeName\n    bandKey\n    strand\n    strandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "isActivityAccessibleForProfiles": "query isActivityAccessibleForProfiles {\n  user {\n    id\n    isActor\n    isCoachedByActor\n    actorHasUserScopedPermission(capability: CAN_VIEW_USER_PROGRESS)\n    __typename\n  }\n}",
  "isCleverTeacher": "query isCleverTeacher {\n  user {\n    id\n    cleverId\n    isTeacher\n    isKmapTeacher\n    isK4dTeacher\n    __typename\n  }\n}",
  "isCourseEditableByCurrentUser": "query isCourseEditableByCurrentUser($courseId: String!) {\n  isCourseEditableByCurrentUser(courseId: $courseId)\n}",
  "isDigitalSatStudent": "query isDigitalSatStudent {\n  user {\n    id\n    mathProgress: curationItemProgress(topicId: \"x0fcc98a58ba3bea7\") {\n      lastWorkedOn\n      __typename\n    }\n    readingAndWritingProgress: curationItemProgress(topicId: \"x0d47bcec73eb6c4b\") {\n      lastWorkedOn\n      __typename\n    }\n    __typename\n  }\n}",
  "isEmailInClass": "query isEmailInClass($email: String!, $classCode: String!) {\n  isEmailInClass(email: $email, classCode: $classCode) {\n    inClass\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "isHellbanned": "query isHellbanned($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    discussionBanned\n    __typename\n  }\n}",
  "isSatStudent": "query isSatStudent {\n  user {\n    id\n    isSatStudent\n    __typename\n  }\n}",
  "IssueFormGetExerciseId": "query IssueFormGetExerciseId($exerciseName: String!) {\n  exercise(name: $exerciseName) {\n    id\n    __typename\n  }\n}",
  "joinModalClassInfo": "query joinModalClassInfo($classCode: String!) {\n  joinByClassCodeInfo(classCode: $classCode) {\n    id\n    cacheId\n    name\n    __typename\n  }\n}\n",
  "KhanCoursesQuery": "query KhanCoursesQuery($adminAggregateID: ID!, $kaLocale: String!) {\n  coursesForAdminAggregate(id: $adminAggregateID, kaLocale: $kaLocale) {\n    id\n    key\n    translatedTitle\n    domain: parent {\n      id\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n}",
  "khanLibraryCourseStructure": "query khanLibraryCourseStructure($id: String!) {\n  courseById(id: $id) {\n    id\n    domainSlug\n    slug\n    title\n    creationDate\n    masteryEnabled\n    unitChildren {\n      id\n      masteryEnabled\n      title\n      allOrderedChildren {\n        ... on TopicUnitTest {\n          id\n          title\n          __typename\n        }\n        ... on TopicQuiz {\n          id\n          title\n          __typename\n        }\n        ... on Lesson {\n          id\n          title\n          allLearnableContent {\n            id\n            title\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "khanLibraryGetDomainRevision": "query khanLibraryGetDomainRevision($contentId: String!) {\n  domainRevisionById(id: $contentId) {\n    ...khanLibraryDomainRevision\n    __typename\n  }\n}\n\nfragment khanLibraryDomainRevision on DomainRevision {\n  id\n  sha\n  childrenDescriptors {\n    canonicalId\n    contentId\n    kind\n    __typename\n  }\n  __typename\n}",
  "khanLibraryGetFolder": "query khanLibraryGetFolder($id: String!) {\n  folderById(id: $id) {\n    ...Folder\n    __typename\n  }\n}\n\nfragment BaseFolder on Folder {\n  id\n  name\n  kaLocale\n  isEmpty\n  __typename\n}\n\nfragment Folder on Folder {\n  ...BaseFolder\n  courses {\n    ...PublishedCourseRevisionFragment\n    __typename\n  }\n  __typename\n}\n\nfragment PublishedCourseRevisionFragment on CourseRevision {\n  id\n  contentId\n  kaLocale\n  title\n  importable\n  allowedExerciseTypes\n  hasUnpublishedChanges\n  published {\n    id\n    slug\n    title\n    listed\n    masteryEnabled\n    domainSlug\n    domainId: parentTopicId\n    courseSnapshotId\n    __typename\n  }\n  __typename\n}",
  "khanLibraryGetFolderTranslationProgress": "query khanLibraryGetFolderTranslationProgress($folderId: String!) {\n  folderTranslationProgress(folderId: $folderId) {\n    courses {\n      ...tapCourseNode\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment tapAIGuideActivityNode on TAPAIGuideActivityNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapArticleNode on TAPArticleNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapChallengeNode on TAPChallengeNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapContentItem on TAPContentItem {\n  id\n  contentKind\n  contentId\n  sha\n  isNativeContent\n  isUnlisted\n  slug\n  title\n  translatedTitle\n  __typename\n}\n\nfragment tapContentWordCounts on TAPContentWordCounts {\n  wordCount\n  translatableWordCount\n  translatedWordCount\n  translatedWordCount\n  approvedWordCount\n  __typename\n}\n\nfragment tapCourseNode on TAPCourseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapUnitNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapExerciseNode on TAPExerciseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapInteractiveNode on TAPInteractiveNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapLessonNode on TAPLessonNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapAIGuideActivityNode\n    ...tapArticleNode\n    ...tapChallengeNode\n    ...tapExerciseNode\n    ...tapInteractiveNode\n    ...tapProjectNode\n    ...tapTalkthroughNode\n    ...tapVideoNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapMetadataWordCounts on TAPMetadataWordCounts {\n  metadataWordCount\n  metadataTranslatableWordCount\n  metadataTranslatedWordCount\n  metadataApprovedWordCount\n  __typename\n}\n\nfragment tapProjectNode on TAPProjectNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapTalkthroughNode on TAPTalkthroughNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  isSubtitled\n  youtubeId\n  __typename\n}\n\nfragment tapUnitNode on TAPUnitNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapLessonNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapVideoNode on TAPVideoNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  dubIsSubtitled\n  isSubtitled\n  translatedYoutubeId\n  youtubeId\n  __typename\n}",
  "khanLibraryGetLocalesLanguage": "query khanLibraryGetLocalesLanguage {\n  localesForLanguagePicker(includeEnglish: true, includeFake: false) {\n    id\n    kaLocale\n    displayName\n    __typename\n  }\n}",
  "khanLibraryGetMyGroup": "query khanLibraryGetMyGroup {\n  folderGroups {\n    myFolders {\n      ...BaseFolder\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BaseFolder on Folder {\n  id\n  name\n  kaLocale\n  isEmpty\n  __typename\n}",
  "khanLibraryGetOtherGroup": "query khanLibraryGetOtherGroup {\n  folderGroups {\n    otherFolders {\n      ...BaseFolder\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BaseFolder on Folder {\n  id\n  name\n  kaLocale\n  isEmpty\n  __typename\n}",
  "khanLibraryGetStatus": "query khanLibraryGetStatus {\n  contentEditingStatus {\n    editingEnabled\n    __typename\n  }\n}",
  "khanLibraryHasCourseEditorRole": "query khanLibraryHasCourseEditorRole {\n  user {\n    id\n    hasPermission(name: \"can_edit_courses\")\n    __typename\n  }\n}",
  "KmapPlacementQuery": "query KmapPlacementQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    signupCode\n    id\n    cacheId\n    kmapAssignments: subjectMasteryAssignments(filter: KMAP) {\n      id\n      studentListId\n      activeStudentData {\n        kaid\n        assignedDate\n        __typename\n      }\n      studentKaids\n      course: topic {\n        id\n        slug\n        domainSlug\n        ... on KMapTopic {\n          strandKey\n          bandKey\n          mapGrowthTest {\n            key\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      studentProgress {\n        kaid\n        currentMasteryPercentage\n        __typename\n      }\n      __typename\n    }\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      studentUserDistrictInfos {\n        uuid\n        id\n        kaid\n        gradeLevel\n        displayNameForTeacher\n        suggestedGradeBandKey\n        previousMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          mapTestKey\n          __typename\n        }\n        currentMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          mapTestKey\n          scoresReviewedDate\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  kmapTopics {\n    id\n    slug\n    strand\n    band\n    strandKey\n    bandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "KmapPlacementStudentListAdminQuery": "query KmapPlacementStudentListAdminQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    signupCode\n    kmapAssignments: subjectMasteryAssignments(filter: KMAP) {\n      id\n      studentListId\n      activeStudentData {\n        kaid\n        assignedDate\n        __typename\n      }\n      studentKaids\n      course: topic {\n        id\n        slug\n        domainSlug\n        ... on KMapTopic {\n          strandKey\n          bandKey\n          __typename\n        }\n        __typename\n      }\n      studentProgress {\n        kaid\n        currentMastery {\n          percentage\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      studentUserDistrictInfos {\n        uuid\n        id\n        kaid\n        gradeLevel\n        displayNameForTeacher\n        suggestedGradeBandKey\n        previousMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          __typename\n        }\n        currentMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  kmapTopics {\n    id\n    slug\n    strand\n    band\n    strandKey\n    bandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "KmapProgressReportQuery": "query KmapProgressReportQuery($classDescriptor: String!, $progressFrom: DateTime, $progressUpTo: DateTime) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    assignments: subjectMasteryAssignments(filter: KMAP) {\n      id\n      studentKaids\n      historicalStudentData {\n        kaid\n        __typename\n      }\n      completedStudentData {\n        kaid\n        __typename\n      }\n      course: topic {\n        id\n        ... on KMapTopic {\n          strand\n          strandKey\n          band\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  teacherKmapProgressReport: teacherMapProgressReport(\n    classroomDescriptor: $classDescriptor\n    filters: {progressFrom: $progressFrom, progressUpTo: $progressUpTo}\n  ) {\n    rows {\n      studentKaidAndNickname: studentKaidsAndNickname {\n        id\n        kaid\n        __typename\n      }\n      totalMinutes\n      assignedCourseMasteryGoalId\n      skillsLeveledUp\n      skillsWithoutProgress\n      courseMasteryGrowthPercentage\n      courseMasteryOverallPercentage\n      __typename\n    }\n    __typename\n  }\n}",
  "KmapTopicsQuery": "query KmapTopicsQuery {\n  kmapTopics {\n    id\n    key\n    title\n    domainSlug\n    slug\n    iconPath\n    masteryEnabled\n    subjectMasteryEnabled\n    isHighSchoolSubject\n    learnableContentSummary {\n      countExercises\n      __typename\n    }\n    band\n    bandGradeName\n    bandKey\n    strand\n    strandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "learnMenuTopicsQuery": "query learnMenuTopicsQuery($region: String) {\n  learnMenuTopics(region: $region) {\n    domainId\n    slug\n    translatedTitle\n    href\n    isNew\n    icon\n    children {\n      courseId\n      slug\n      translatedTitle\n      href\n      isNew\n      loggedOutHref\n      nonContentLink\n      __typename\n    }\n    __typename\n  }\n}",
  "LintTranslationsFE": "query LintTranslationsFE($translations: [TranslationLinterInput!]!) {\n  lintTranslations(translations: $translations) {\n    status\n    message\n    correction\n    __typename\n  }\n}",
  "listClassroomPrograms": "query listClassroomPrograms($pageInfo: ListProgramsPageInfo, $classroomId: String!, $onlyOfficialProgramSpinoffs: Boolean!) {\n  listClassroomPrograms(\n    pageInfo: $pageInfo\n    classroomId: $classroomId\n    onlyOfficialProgramSpinoffs: $onlyOfficialProgramSpinoffs\n  ) {\n    complete\n    cursor\n    programs {\n      id\n      key\n      authorKaid\n      authorNickname\n      displayableSpinoffCount\n      imagePath\n      sumVotesIncremented\n      translatedTitle: title\n      url\n      __typename\n    }\n    __typename\n  }\n}",
  "ListRoleChangeRecords": "query ListRoleChangeRecords($kaid: String!) {\n  listRoleChangeRecords(targetKaid: $kaid) {\n    roleChangeRecords {\n      approvalDate\n      approverDistrictID\n      approverEmail\n      approverKaid\n      approverType\n      kaid\n      removalDate\n      removerDistrictID\n      removerEmail\n      removerKaid\n      removerType\n      role\n      __typename\n    }\n    __typename\n  }\n}",
  "listTopProgramSpinoffs": "query listTopProgramSpinoffs($pageInfo: ListProgramsPageInfo, $from: SpinoffOrigin!, $sort: ListProgramSortOrder) {\n  listTopProgramSpinoffs(pageInfo: $pageInfo, from: $from, sort: $sort) {\n    complete\n    cursor\n    programs {\n      id\n      key\n      authorKaid\n      authorNickname\n      displayableSpinoffCount\n      imagePath\n      sumVotesIncremented\n      translatedTitle: title\n      url\n      __typename\n    }\n    __typename\n  }\n}",
  "LiteVideo_SlugFromYoutubeId": "query LiteVideo_SlugFromYoutubeId($youtubeId: String!) {\n  videoByYoutubeId(youtubeId: $youtubeId) {\n    id\n    defaultUrlPath\n    __typename\n  }\n}",
  "localeMappings": "query localeMappings($includeEnglish: Boolean) {\n  locales(includeEnglish: $includeEnglish) {\n    id\n    kaLocale\n    crowdinLocale\n    status\n    displayName\n    __typename\n  }\n}",
  "localesForFlagRuleQuery": "query localesForFlagRuleQuery {\n  localesForLanguagePicker(includeEnglish: false, includeFake: false) {\n    id\n    kaLocale\n    displayName\n    __typename\n  }\n}",
  "localesForI18nSuggestBannerQuery": "query localesForI18nSuggestBannerQuery {\n  localesForLanguagePicker(includeEnglish: true, includeFake: false) {\n    id\n    localName\n    kaLocale\n    displayName\n    __typename\n  }\n}",
  "localesForLangDropdownQuery": "query localesForLangDropdownQuery {\n  localesForLanguagePicker(includeEnglish: true, includeFake: false) {\n    id\n    localName\n    kaLocale\n    __typename\n  }\n}",
  "localesForLangPickerQuery": "query localesForLangPickerQuery {\n  localesForLanguagePicker(includeEnglish: true, includeFake: false) {\n    id\n    localName\n    kaLocale\n    __typename\n  }\n}",
  "LocalesForStandardsEditor": "query LocalesForStandardsEditor {\n  locales(includeEnglish: true, includeFake: false, liveOnly: true) {\n    id\n    displayName\n    __typename\n  }\n}",
  "LocalesIncludingEnglish": "query LocalesIncludingEnglish {\n  locales(includeEnglish: true) {\n    id\n    __typename\n  }\n}",
  "loggedInUserQuery": "query loggedInUserQuery {\n  user {\n    id\n    kaid\n    canAccessDistrictsHomepage\n    isTeacher\n    hasUnresolvedInvitations\n    preferredKaLocale {\n      id\n      kaLocale\n      status\n      __typename\n    }\n    __typename\n  }\n}",
  "lookupUser": "query lookupUser($kaid: String, $email: String, $username: String) {\n  user(kaid: $kaid, email: $email, username: $username) {\n    id\n    kaid\n    email\n    username\n    __typename\n  }\n}",
  "ManageFolders_CoursesInFolder": "query ManageFolders_CoursesInFolder($folderID: String!) {\n  folderById(id: $folderID) {\n    id\n    courses {\n      id\n      contentId\n      title\n      __typename\n    }\n    __typename\n  }\n}",
  "ManageFolders_UsersInFolder": "query ManageFolders_UsersInFolder($kaids: [String!]!) {\n  users(kaids: $kaids) {\n    id\n    kaid\n    email\n    username\n    nickname\n    __typename\n  }\n}",
  "manticoreEditorGetVideo": "query manticoreEditorGetVideo($enVideoSlug: String!) {\n  video(id: $enVideoSlug) {\n    id\n    title\n    description\n    youtubeId\n    translatedYoutubeId\n    hasTranslatedSubtitles\n    subtitlesEditURLForVideo: subtitlesEditURL\n    parentTopic {\n      id\n      slug\n      __typename\n    }\n    defaultUrlPath\n    listed\n    __typename\n  }\n}",
  "manticoreGetContentForDescriptors": "query manticoreGetContentForDescriptors($contentDescriptors: [String!]!) {\n  contentForDescriptors(descriptors: $contentDescriptors) {\n    id\n    slug\n    parentTopic {\n      id\n      __typename\n    }\n    __typename\n  }\n}\n",
  "masteryAssignments": "query masteryAssignments($classCode: String!) {\n  classroom(classCode: $classCode) {\n    id\n    cacheId\n    name\n    masteryAssignments(contextFilter: NO_KMAP) {\n      id\n      type: curationNodeLevel\n      dueDate\n      course {\n        id\n        translatedTitle\n        iconUrl\n        __typename\n      }\n      studentData {\n        kaid\n        status\n        __typename\n      }\n      unit {\n        id\n        translatedTitle\n        iconUrl\n        __typename\n      }\n      __typename\n    }\n    students: studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerCurrentLeaderboardQuery": "query masteryTowerCurrentLeaderboardQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerLeaderboard {\n      classDescriptor\n      masteryTowerName\n      sessionCount\n      score\n      __typename\n    }\n    masteryTowerConfiguration {\n      dateRange\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerCurrentSessionQuery": "query masteryTowerCurrentSessionQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerCurrentSession {\n      currentScore\n      secondsRemaining\n      startTime\n      startingFloors\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerCurrentWeekLeaderboardQuery": "query masteryTowerCurrentWeekLeaderboardQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerLeaderboard {\n      classDescriptor\n      masteryTowerName\n      sessionCount\n      score\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerDetailsQuery": "query masteryTowerDetailsQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    countStudents\n    masteryTowerCurrentWeekScore\n    masteryTowerCurrentWeekSessions\n    masteryTowerDifficultyOptions {\n      easy\n      medium\n      hard\n      __typename\n    }\n    masteryTowerConfiguration {\n      currentWeeklyGoal\n      masteryTowerName\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerHistoricalRankingQuery": "query masteryTowerHistoricalRankingQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerHistoricalRanking {\n      score\n      sessionCount\n      rank\n      leaderboardSize\n      startDate\n      endDate\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerPreviousWeekLeaderboardQuery": "query masteryTowerPreviousWeekLeaderboardQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerPreviousWeekLeaderboard {\n      classDescriptor\n      masteryTowerName\n      sessionCount\n      score\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryTowerSupportDetailsQuery": "query masteryTowerSupportDetailsQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $classDescriptor) {\n    id\n    cacheId\n    masteryTowerCurrentWeekScore\n    masteryTowerCurrentWeekSessions\n    masteryTowerConfiguration {\n      currentWeeklyGoal\n      masteryTowerName\n      dateRange\n      __typename\n    }\n    __typename\n  }\n}",
  "ModFeedbackByIDQuery": "query ModFeedbackByIDQuery($feedbackID: ID!, $kaid: String) {\n  feedbackByID(feedbackID: $feedbackID, kaid: $kaid) {\n    replyCount\n    appearsAsDeleted\n    author {\n      id\n      kaid\n      nickname\n      avatar {\n        name\n        imageSrc\n        __typename\n      }\n      __typename\n    }\n    content\n    date\n    definitelyNotSpam\n    deleted\n    downVoted\n    expandKey\n    feedbackType\n    flaggedBy\n    flags\n    focusUrl\n    focus {\n      kind\n      id\n      translatedTitle\n      __typename\n    }\n    fromVideoAuthor\n    key\n    lowQualityScore\n    notifyOnAnswer\n    permalink\n    qualityKind\n    replyCount\n    replyExpandKeys\n    showLowQualityNotice\n    sumVotesIncremented\n    upVoted\n    ... on QuestionFeedback {\n      hasAnswered\n      answers {\n        replyCount\n        appearsAsDeleted\n        author {\n          id\n          kaid\n          nickname\n          avatar {\n            name\n            imageSrc\n            __typename\n          }\n          __typename\n        }\n        badges {\n          name\n          icons {\n            smallUrl\n            __typename\n          }\n          description\n          __typename\n        }\n        content\n        date\n        definitelyNotSpam\n        deleted\n        downVoted\n        expandKey\n        feedbackType\n        flaggedBy\n        flaggedByUser\n        flags\n        focusUrl\n        focus {\n          kind\n          id\n          translatedTitle\n          relativeUrl\n          __typename\n        }\n        fromVideoAuthor\n        key\n        lowQualityScore\n        notifyOnAnswer\n        permalink\n        qualityKind\n        replyCount\n        replyExpandKeys\n        showLowQualityNotice\n        sumVotesIncremented\n        upVoted\n        __typename\n      }\n      isOld\n      answerCount\n      __typename\n    }\n    ... on AnswerFeedback {\n      question {\n        replyCount\n        appearsAsDeleted\n        author {\n          id\n          kaid\n          nickname\n          avatar {\n            name\n            imageSrc\n            __typename\n          }\n          __typename\n        }\n        badges {\n          name\n          icons {\n            smallUrl\n            __typename\n          }\n          description\n          __typename\n        }\n        content\n        date\n        definitelyNotSpam\n        deleted\n        downVoted\n        expandKey\n        feedbackType\n        flaggedBy\n        flaggedByUser\n        flags\n        focusUrl\n        focus {\n          kind\n          id\n          translatedTitle\n          relativeUrl\n          __typename\n        }\n        fromVideoAuthor\n        key\n        lowQualityScore\n        notifyOnAnswer\n        permalink\n        qualityKind\n        replyCount\n        replyExpandKeys\n        showLowQualityNotice\n        sumVotesIncremented\n        upVoted\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "ModFeedbackForAuthorQuery": "query ModFeedbackForAuthorQuery($kaid: String!, $feedbackType: FeedbackType!, $cursor: String, $limit: Int, $sort: Int) {\n  feedbackForAuthor(\n    kaid: $kaid\n    feedbackType: $feedbackType\n    cursor: $cursor\n    limit: $limit\n    sort: $sort\n  ) {\n    feedback {\n      replyCount\n      appearsAsDeleted\n      author {\n        id\n        kaid\n        nickname\n        avatar {\n          name\n          imageSrc\n          __typename\n        }\n        __typename\n      }\n      content\n      date\n      definitelyNotSpam\n      deleted\n      downVoted\n      expandKey\n      feedbackType\n      flaggedBy\n      flags\n      focusUrl\n      focus {\n        kind\n        id\n        translatedTitle\n        __typename\n      }\n      fromVideoAuthor\n      key\n      lowQualityScore\n      notifyOnAnswer\n      permalink\n      qualityKind\n      replyCount\n      replyExpandKeys\n      showLowQualityNotice\n      sumVotesIncremented\n      upVoted\n      ... on QuestionFeedback {\n        hasAnswered\n        answers {\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        isOld\n        answerCount\n        __typename\n      }\n      ... on AnswerFeedback {\n        question {\n          replyCount\n          appearsAsDeleted\n          author {\n            id\n            kaid\n            nickname\n            avatar {\n              name\n              imageSrc\n              __typename\n            }\n            __typename\n          }\n          badges {\n            name\n            icons {\n              smallUrl\n              __typename\n            }\n            description\n            __typename\n          }\n          content\n          date\n          definitelyNotSpam\n          deleted\n          downVoted\n          expandKey\n          feedbackType\n          flaggedBy\n          flaggedByUser\n          flags\n          focusUrl\n          focus {\n            kind\n            id\n            translatedTitle\n            relativeUrl\n            __typename\n          }\n          fromVideoAuthor\n          key\n          lowQualityScore\n          notifyOnAnswer\n          permalink\n          qualityKind\n          replyCount\n          replyExpandKeys\n          showLowQualityNotice\n          sumVotesIncremented\n          upVoted\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    isMod\n    isComplete\n    cursor\n    __typename\n  }\n}",
  "MoveTypeModalAllExerciseRevisions": "query MoveTypeModalAllExerciseRevisions {\n  allExerciseRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "MyCourses": "query MyCourses {\n  classPicker {\n    enabled\n    classesInGradeLevels {\n      id\n      subjects {\n        id\n        __typename\n      }\n      __typename\n    }\n    gradeLevelGroups {\n      title\n      levels {\n        id\n        title\n        __typename\n      }\n      __typename\n    }\n    domains {\n      slug\n      title\n      subjects {\n        id\n        key\n        slug\n        title: translatedTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  user {\n    id\n    selfSelectedGradeLevel\n    districtGradeLevel\n    cleverId\n    isDistrictSynced\n    classPickerSubjectProgresses {\n      ...CourseProgress\n      __typename\n    }\n    recentTopics(limit: 4) {\n      id\n      slug\n      title: translatedTitle\n      unit: parent {\n        id\n        title: translatedTitle\n        thumbnailUrl: largeIconPath\n        domain: domainSlug\n        nodeUrl: relativeUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseProgress on SubjectProgress {\n  topic {\n    domainSlug\n    iconPath\n    id\n    slug\n    title: translatedTitle\n    relativeUrl\n    __typename\n  }\n  unitProgresses {\n    lastWorkedOn\n    currentMastery {\n      percentage\n      __typename\n    }\n    topic {\n      id\n      iconPath\n      title: translatedTitle\n      relativeUrl\n      masteryEnabled\n      subjectMasteryEnabled\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "MyCoursesViaGateway": "query MyCoursesViaGateway {\n  classPicker {\n    enabled\n    classesInGradeLevels {\n      id\n      subjects {\n        id\n        __typename\n      }\n      __typename\n    }\n    gradeLevelGroups {\n      title\n      levels {\n        id\n        title\n        __typename\n      }\n      __typename\n    }\n    domains {\n      slug\n      title\n      subjects {\n        id\n        key\n        slug\n        title: translatedTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  user {\n    id\n    selfSelectedGradeLevel\n    districtGradeLevel\n    cleverId\n    isDistrictSynced\n    classPickerSubjectProgresses {\n      ...CourseProgress\n      __typename\n    }\n    recentTopics(limit: 4) {\n      id\n      slug\n      title: translatedTitle\n      unit: parent {\n        id\n        title: translatedTitle\n        thumbnailUrl: largeIconPath\n        domain: domainSlug\n        nodeUrl: relativeUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CourseProgress on SubjectProgress {\n  topic {\n    domainSlug\n    iconPath\n    id\n    slug\n    title: translatedTitle\n    relativeUrl\n    __typename\n  }\n  unitProgresses {\n    lastWorkedOn\n    currentMastery {\n      percentage\n      __typename\n    }\n    topic {\n      id\n      iconPath\n      title: translatedTitle\n      relativeUrl\n      masteryEnabled\n      subjectMasteryEnabled\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "NamedPermissionCheck": "query NamedPermissionCheck($name: String!, $scope: Scope) {\n  user {\n    id\n    hasPermission(name: $name, scope: $scope)\n    __typename\n  }\n}",
  "notTranslatedQuery": "query notTranslatedQuery($kaLocale: String!) {\n  locale(kaLocale: $kaLocale) {\n    id\n    localName\n    __typename\n  }\n}",
  "OverallProgressReportQuery": "query OverallProgressReportQuery($classDescriptor: String!, $progressFrom: DateTime, $progressUpTo: DateTime) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n  teacherOverallProgressReport(classroomDescriptor: $classDescriptor, filters: {progressFrom: $progressFrom, progressUpTo: $progressUpTo}) {\n    rows {\n      skillsLeveledUp\n      skillsWithoutProgress\n      studentKaidAndNickname: studentKaidsAndNickname {\n        id\n        kaid\n        __typename\n      }\n      totalMinutes\n      __typename\n    }\n    __typename\n  }\n}\n",
  "ParentQuery": "query ParentQuery {\n  user {\n    id\n    underAgeGatePendingApprovals {\n      username\n      daysUntilCutoff\n      __typename\n    }\n    childInvitations {\n      invitationType\n      email\n      requestKey\n      __typename\n    }\n    parentChildren: children {\n      id\n      coachNickname\n      kaid\n      isUnderAgeGateManagedByActor\n      avatar {\n        name\n        imageSrc\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "previewAgingParentEmail": "query previewAgingParentEmail {\n  preview: previewAgingParentEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideEnrolledEmail": "query previewAiGuideEnrolledEmail {\n  preview: previewAiGuideEnrolledEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideThreadFlaggedEmail": "query previewAiGuideThreadFlaggedEmail {\n  preview: previewChildAiGuideThreadFlaggedEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewChildAddedCoachEmail": "query previewChildAddedCoachEmail {\n  preview: previewChildAddedCoachEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewDistrictsCSVReportReadyForDownloadEmail": "query previewDistrictsCSVReportReadyForDownloadEmail {\n  preview: previewDistrictsCSVReportReadyForDownloadEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewExistingParentClaimManagedStudentEmail": "query previewExistingParentClaimManagedStudentEmail {\n  preview: previewExistingParentClaimManagedStudentEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewNewAssignmentEmail": "query previewNewAssignmentEmail {\n  preview: previewNewAssignmentEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewParentChildInviteEmail": "query previewParentChildInviteEmail {\n  preview: previewParentChildInviteEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewParentReportEmail": "query previewParentReportEmail {\n  preview: previewParentReportEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewSampleEmail": "query previewSampleEmail {\n  preview: previewSampleEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTeacherReportEmail": "query previewTeacherReportEmail {\n  preview: previewTeacherReportEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTeacherStudentInviteEmail": "query previewTeacherStudentInviteEmail {\n  preview: previewTeacherStudentInviteEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTestPrepMissedPracticeExamEmail": "query previewTestPrepMissedPracticeExamEmail {\n  preview: previewTestPrepMissedPracticeExamEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTestPrepPracticeExamEmail": "query previewTestPrepPracticeExamEmail {\n  preview: previewTestPrepPracticeExamEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTestPrepRealExamCongratsEmail": "query previewTestPrepRealExamCongratsEmail {\n  preview: previewTestPrepRealExamCongratsEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewTestPrepScheduledPracticeEmail": "query previewTestPrepScheduledPracticeEmail {\n  preview: previewTestPrepScheduledPracticeEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewUnderAgeGateParentApproveEmail": "query previewUnderAgeGateParentApproveEmail {\n  preview: previewUnderAgeGateParentApproveEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewUnderAgeGateParentReminderEmail": "query previewUnderAgeGateParentReminderEmail {\n  preview: previewUnderAgeGateParentReminderEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewUnregisteredParentClaimManagedStudentEmail": "query previewUnregisteredParentClaimManagedStudentEmail {\n  preview: previewUnregisteredParentClaimManagedStudentEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewWaitlistAddedEmail": "query previewWaitlistAddedEmail {\n  preview: previewWaitlistAddedEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewWaitlistApprovedEmail": "query previewWaitlistApprovedEmail {\n  preview: previewWaitlistApprovedEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewWaitlistApprovedReminderEmail": "query previewWaitlistApprovedReminderEmail {\n  preview: previewWaitlistApprovedReminderEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "ProblemAttemptsByStudent": "query ProblemAttemptsByStudent($studentKaids: [String], $contentDescriptor: String!, $progressAfter: DateTime) {\n  students: users(kaids: $studentKaids) {\n    id\n    contentItemProgresses(queryBy: {contentDescriptors: [$contentDescriptor]}) {\n      ... on ExerciseItemProgress {\n        logs(progressAfter: $progressAfter) {\n          ...ProblemAttemptFields\n          __typename\n        }\n        __typename\n      }\n      ... on AssessmentItemProgress {\n        logs(progressAfter: $progressAfter) {\n          ...ProblemAttemptFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ProblemAttemptFields on ProblemAttempt {\n  kaid\n  correct\n  contentId: seed\n  countAttempts\n  countHints\n  timeDone\n  attemptStates\n  __typename\n}",
  "profilePermissions": "query profilePermissions($kaid: String, $username: String) {\n  user(kaid: $kaid, username: $username) {\n    id\n    isCoachListWritable\n    isManagedByActor\n    __typename\n  }\n}",
  "programQuery": "query programQuery($programId: String!) {\n  programById(id: $programId) {\n    byChild\n    category\n    created\n    creatorProfile: author {\n      id\n      nickname\n      profileRoot\n      profile {\n        accessLevel\n        __typename\n      }\n      __typename\n    }\n    deleted\n    description\n    spinoffCount: displayableSpinoffCount\n    docsUrlPath\n    flags\n    flaggedBy: flaggedByKaids\n    flaggedByUser: isFlaggedByCurrentUser\n    height\n    hideFromHotlist\n    id\n    imagePath\n    isProjectOrFork: originIsProject\n    isOwner\n    kaid: authorKaid\n    key\n    newUrlPath\n    originScratchpad: originProgram {\n      deleted\n      translatedTitle\n      url\n      __typename\n    }\n    restrictPosting\n    revision: latestRevision {\n      id\n      code\n      configVersion\n      created\n      editorType\n      folds\n      __typename\n    }\n    slug\n    sumVotesIncremented\n    title\n    topic: parentCurationNode {\n      id\n      nodeSlug: slug\n      relativeUrl\n      slug\n      translatedTitle\n      __typename\n    }\n    translatedTitle\n    url\n    userAuthoredContentType\n    upVoted\n    width\n    __typename\n  }\n}",
  "ProgressByGradeQuery": "query ProgressByGradeQuery($districtName: String!, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $kmapStrandId: ID, $progressFrom: DateTime, $progressUpTo: DateTime) {\n  districtProgressReportByGrade(districtName: $districtName, filters: {schoolIds: $schoolIds, gradeLevels: $gradeLevels, progressFrom: $progressFrom, progressUpTo: $progressUpTo, kmapStrandId: $kmapStrandId}) {\n    avgRow {\n      avgTotalMinutes\n      avgSkillsLeveledUp\n      __typename\n    }\n    rows {\n      gradeLevel {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      totalMinutes\n      skillsLeveledUp\n      __typename\n    }\n    __typename\n  }\n}\n",
  "ProgressBySchoolQuery": "query ProgressBySchoolQuery($districtName: String!, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $progressFrom: DateTime, $progressUpTo: DateTime, $orderBy: ReportBySchoolSortableColumn, $orderDir: OrderDir, $kmapStrandId: ID, $pageSize: Int, $cursor: Int) {\n  districtProgressReportBySchool(districtName: $districtName, filters: {schoolIds: $schoolIds, gradeLevels: $gradeLevels, progressFrom: $progressFrom, progressUpTo: $progressUpTo, kmapStrandId: $kmapStrandId}, orderBy: $orderBy, orderDir: $orderDir, pageSize: $pageSize, cursor: $cursor) {\n    avgRow {\n      avgTotalMinutes\n      avgSkillsLeveledUp\n      __typename\n    }\n    rows {\n      school {\n        id\n        name\n        __typename\n      }\n      totalMinutes\n      skillsLeveledUp\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}\n",
  "ProgressByStudent": "query ProgressByStudent($assignmentFilters: CoachAssignmentFilters, $classDescriptor: String!, $pageSize: Int, $after: ID) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    descriptor\n    name\n    studentKaidsAndNicknames {\n      id\n      coachNickname\n      __typename\n    }\n    classroomDistrictInfo {\n      id\n      studentUserDistrictInfos {\n        id\n        kaid\n        sisId\n        __typename\n      }\n      __typename\n    }\n    assignmentsPage(filters: $assignmentFilters, after: $after, pageSize: $pageSize) {\n      assignments {\n        id\n        title\n        dueDate\n        contents {\n          id\n          translatedTitle\n          kind\n          defaultUrlPath\n          __typename\n        }\n        itemCompletionStates: itemCompletionStatesForAllStudents {\n          completedOn\n          studentKaid\n          bestScore {\n            numAttempted\n            numCorrect\n            __typename\n          }\n          activitySubmissions {\n            threadID\n            thread {\n              id\n              flagged\n              lastUpdatedAt\n              interactions {\n                id\n                answer\n                question\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          student {\n            id\n            kaid\n            profileRoot\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "ProgressByTeacherQuery": "query ProgressByTeacherQuery($districtName: String!, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $teacherIds: [ID!], $progressFrom: DateTime, $progressUpTo: DateTime, $orderBy: ReportByTeacherSortableColumn, $orderDir: OrderDir, $kmapStrandId: ID, $pageSize: Int, $cursor: Int) {\n  districtProgressReportByTeacher(districtName: $districtName, filters: {schoolIds: $schoolIds, gradeLevels: $gradeLevels, teacherIds: $teacherIds, progressFrom: $progressFrom, progressUpTo: $progressUpTo, kmapStrandId: $kmapStrandId}, orderBy: $orderBy, orderDir: $orderDir, pageSize: $pageSize, cursor: $cursor) {\n    avgRow {\n      avgTotalMinutes\n      avgSkillsLeveledUp\n      __typename\n    }\n    rows {\n      teacherUserDistrictInfo {\n        id\n        kaid\n        displayNameForTeacher\n        __typename\n      }\n      totalMinutes\n      skillsLeveledUp\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}\n",
  "projectsAuthoredByUser": "query projectsAuthoredByUser($kaid: String, $pageInfo: ListProgramsPageInfo, $sort: ListProgramSortOrder) {\n  user(kaid: $kaid) {\n    id\n    programs(pageInfo: $pageInfo, sort: $sort) {\n      complete\n      cursor\n      programs {\n        id\n        key\n        authorKaid\n        authorNickname\n        displayableSpinoffCount\n        imagePath\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "PublishContent": "query PublishContent($id: String!) {\n  publishContent(id: $id) {\n    changes {\n      id\n      kind\n      slug\n      title\n      cmsUrl\n      operations {\n        operation\n        parentTitle\n        __typename\n      }\n      __typename\n    }\n    diff {\n      id\n      sha\n      kind\n      slug\n      title\n      authorNickname\n      cmsUrl\n      __typename\n    }\n    isForCourse\n    __typename\n  }\n}",
  "PublishList": "query PublishList($limit: Int, $queuedFilter: PublishListFilter, $kaLocaleFilter: KALocale) {\n  publishList(\n    limit: $limit\n    queuedFilter: $queuedFilter\n    kaLocaleFilter: $kaLocaleFilter\n  ) {\n    statuses {\n      id\n      commitSha: publishedContentVersion\n      commitMessage\n      statusText\n      success\n      queued\n      queueInsertTime\n      startTime\n      endTime\n      kaLocale\n      ownerEmail\n      contentDescriptors\n      profile {\n        time\n        name\n        childEntries {\n          time\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    currentlyRunningPublishIds\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "QAExpandKeyInfo": "query QAExpandKeyInfo($encryptedKey: String) {\n  qaExpandKeyInfo(encryptedQaExpandKey: $encryptedKey) {\n    feedbackType\n    unencryptedKey\n    __typename\n  }\n}",
  "querySchoolAffiliation": "query querySchoolAffiliation {\n  coach: user {\n    id\n    schoolAffiliation {\n      id\n      __typename\n    }\n    isFormalTeacher\n    __typename\n  }\n  user {\n    id\n    tosForFormalTeacherStatus\n    __typename\n  }\n}",
  "quizAndUnitTestAttemptsQuery": "query quizAndUnitTestAttemptsQuery($topicId: String!) {\n  user {\n    id\n    latestUnitTestAttempts(unitId: $topicId) {\n      id\n      numAttempted\n      numCorrect\n      completedDate\n      canResume\n      isCompleted\n      __typename\n    }\n    latestQuizAttempts(topicId: $topicId) {\n      id\n      numAttempted\n      numCorrect\n      completedDate\n      canResume\n      isCompleted\n      positionKey\n      __typename\n    }\n    __typename\n  }\n}",
  "satMissionData": "query satMissionData {\n  curator: actorRoleScopes(role: CREATOR) {\n    contentKind\n    __typename\n  }\n  user {\n    id\n    kaid\n    isChild\n    userId\n    __typename\n  }\n  satCheats: flag(name: \"sat_cheats\") {\n    id\n    isUserPassing\n    __typename\n  }\n  chronomancer {\n    isCollegeBoardIntegrationEnabled\n    __typename\n  }\n}",
  "SatPracticeByGradeQuery": "query SatPracticeByGradeQuery($districtName: String!, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $progressFrom: DateTime, $progressUpTo: DateTime) {\n  districtSatPracticeReportByGrade(\n    districtName: $districtName\n    filters: {schoolIds: $schoolIds, gradeLevels: $gradeLevels, progressFrom: $progressFrom, progressUpTo: $progressUpTo}\n  ) {\n    avgRow {\n      avgPracticeMinutes\n      avgMathPractice\n      avgReadingAndWritingPractice\n      __typename\n    }\n    rows {\n      gradeLevel {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      practiceMinutes\n      mathPractice\n      readingAndWritingPractice\n      __typename\n    }\n    __typename\n  }\n}",
  "SatPracticeBySchoolQuery": "query SatPracticeBySchoolQuery($districtName: String!, $schoolIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $progressFrom: DateTime, $progressUpTo: DateTime, $orderBy: BySchoolSortableColumn, $orderDir: OrderDir, $pageSize: Int, $cursor: Int) {\n  districtSatPracticeReportBySchool(\n    districtName: $districtName\n    filters: {schoolIds: $schoolIds, gradeLevels: $gradeLevels, progressFrom: $progressFrom, progressUpTo: $progressUpTo}\n    orderBy: $orderBy\n    orderDir: $orderDir\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    avgRow {\n      avgPracticeMinutes\n      avgMathPractice\n      avgReadingAndWritingPractice\n      __typename\n    }\n    rows {\n      school {\n        id\n        name\n        __typename\n      }\n      practiceMinutes\n      mathPractice\n      readingAndWritingPractice\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}",
  "SatPracticeByTeacherQuery": "query SatPracticeByTeacherQuery($districtName: String!, $schoolIds: [ID!], $teacherIds: [ID!], $gradeLevels: [DistrictGradeLevel!], $progressFrom: DateTime, $progressUpTo: DateTime, $orderBy: ByTeacherSortableColumn, $orderDir: OrderDir, $pageSize: Int, $cursor: Int) {\n  districtSatPracticeReportByTeacher(\n    districtName: $districtName\n    filters: {schoolIds: $schoolIds, teacherIds: $teacherIds, gradeLevels: $gradeLevels, progressFrom: $progressFrom, progressUpTo: $progressUpTo}\n    orderBy: $orderBy\n    orderDir: $orderDir\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    avgRow {\n      avgPracticeMinutes\n      avgMathPractice\n      avgReadingAndWritingPractice\n      __typename\n    }\n    rows {\n      teacherUserDistrictInfo {\n        id\n        kaid\n        displayNameForTeacher\n        __typename\n      }\n      practiceMinutes\n      mathPractice\n      readingAndWritingPractice\n      __typename\n    }\n    totalCount\n    __typename\n  }\n}",
  "searchDonors": "query searchDonors($filterBy: DonorOrProspectFilterType!, $search: String!) {\n  donorOrProspectsByKind(filterBy: $filterBy, search: $search) {\n    id\n    kaids\n    acquisitionChannels\n    emails\n    transactions {\n      id\n      customerId\n      subscriptionId\n      medium\n      timestamp\n      amountCents\n      refunded\n      cancelled\n      transactionId\n      __typename\n    }\n    __typename\n  }\n}",
  "seoMetadataQuery": "query seoMetadataQuery($examGroupId: String!) {\n  examGroup(examGroupId: $examGroupId) {\n    id\n    examGroupMetadata {\n      id\n      seoMetadata {\n        id\n        description\n        image\n        title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "simpleCompletionQuery": "query simpleCompletionQuery($assignmentId: String!, $teacherKaid: String) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      contents {\n        id\n        translatedTitle\n        defaultUrlPath\n        kind\n        __typename\n      }\n      assignedDate\n      dueDate\n      id\n      itemCompletionStates: itemCompletionStatesForAllStudents {\n        student {\n          id\n          kaid\n          coachNickname(teacherKaid: $teacherKaid)\n          profileRoot\n          __typename\n        }\n        state\n        completedOn\n        bestScore {\n          numCorrect\n          numAttempted\n          __typename\n        }\n        bestScoreSkills {\n          numLeveledUp\n          numLeveledDown\n          levelChanges {\n            id\n            before\n            after\n            changeDirection\n            exercise {\n              id\n              translatedTitle\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        exerciseAttempts {\n          id\n          isCompleted\n          isRestarted\n          numAttempted\n          numCorrect\n          lastAttemptDate\n          __typename\n        }\n        activitySubmissions {\n          threadID\n          thread {\n            id\n            interactions {\n              id\n              answer\n              question\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      studentList {\n        id\n        cacheId\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "siteEditorCourseProperties": "query siteEditorCourseProperties($id: String!) {\n  course(id: $id) {\n    id\n    title\n    slug\n    listed\n    slugRedirects {\n      redirectType\n      oldSlug\n      contentId\n      __typename\n    }\n    legacySlugRedirects {\n      redirectType\n      oldSlug\n      contentId\n      __typename\n    }\n    __typename\n  }\n}",
  "siteEditorGetPublishQueueList": "query siteEditorGetPublishQueueList {\n  publishList {\n    statuses {\n      id\n      queued\n      contentDescriptors\n      __typename\n    }\n    __typename\n  }\n}",
  "siteEditorGetPublishStatus": "query siteEditorGetPublishStatus($kaLocale: KALocale!, $contentDescriptors: [String!]!) {\n  contentEditingStatus {\n    publishEnabled\n    __typename\n  }\n  contentStageItems(kaLocale: $kaLocale, contentDescriptors: $contentDescriptors) {\n    id\n    contentKind\n    contentId\n    sha\n    publishedSha\n    isModified\n    __typename\n  }\n}",
  "SkillsMetadataAndNoStudentsQuery": "query SkillsMetadataAndNoStudentsQuery($selectedMasteryCourseIds: [String]!) {\n  coursesByIds(ids: $selectedMasteryCourseIds) {\n    id\n    unitChildren {\n      id\n      filteredContent(kinds: [\"Exercise\"]) {\n        __typename\n        id\n        kind\n        translatedTitle\n        translatedDescription\n        defaultUrlPath\n        mappedStandards {\n          id\n          standardId\n          __typename\n        }\n        topicPaths {\n          path {\n            id\n            __typename\n          }\n          __typename\n        }\n        ... on Exercise {\n          imageUrl\n          imageUrl256\n          __typename\n        }\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SkillsMetadataAndStudentsQuery": "query SkillsMetadataAndStudentsQuery($selectedMasteryCourseIds: [String]!, $classDescriptor: String!, $region: String!, $locale: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    descriptor\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n  coursesByIds(ids: $selectedMasteryCourseIds) {\n    id\n    unitChildren {\n      id\n      filteredContent(kinds: [\"Exercise\"]) {\n        __typename\n        id\n        kind\n        translatedTitle\n        translatedDescription\n        defaultUrlPath\n        mappedStandards(region: $region, locale: $locale) {\n          id\n          standardId\n          __typename\n        }\n        topicPaths {\n          path {\n            id\n            __typename\n          }\n          __typename\n        }\n        ... on Exercise {\n          imageUrl\n          imageUrl256\n          __typename\n        }\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SkillsQuery": "query SkillsQuery($classDescriptor: String!, $skillIds: [String]!, $studentKaid: String) {\n  teacherOverallProgressReport(\n    classroomDescriptor: $classDescriptor\n    filters: {studentKaid: $studentKaid}\n  ) {\n    skillsLevels(skillIds: $skillIds) {\n      skillId\n      studentLevels {\n        skillLevel\n        studentKaid\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "StandaloneUserAssignments": "query StandaloneUserAssignments($after: ID, $pageSize: Int, $kaid: String!, $classDescriptor: String!, $orderBy: AssignmentOrder!) {\n  student: user(kaid: $kaid) {\n    id\n    assignmentsPage(\n      after: $after\n      pageSize: $pageSize\n      classroomDescriptor: $classDescriptor\n      orderBy: $orderBy\n    ) {\n      assignments {\n        id\n        title\n        contents {\n          ...TranslatedContentFields\n          __typename\n        }\n        assignedDate\n        dueDate\n        itemCompletionStates {\n          studentKaid\n          state\n          completedOn\n          bestScore {\n            numCorrect\n            numAttempted\n            __typename\n          }\n          exerciseAttempts {\n            id\n            isCompleted\n            isRestarted\n            __typename\n          }\n          activitySubmissions {\n            threadID\n            __typename\n          }\n          essaySession {\n            id\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TranslatedContentFields on LearnableContent {\n  id\n  kind\n  translatedTitle\n  defaultUrlPath\n  __typename\n}",
  "StudentKmapPlacementQuery": "query StudentKmapPlacementQuery($classDescriptor: String!, $studentKaid: String!) {\n  student: user(kaid: $studentKaid) {\n    id\n    assignments: subjectMasteryAssignments(\n      filter: KMAP\n      classroomDescriptor: $classDescriptor\n    ) {\n      id\n      studentListId\n      activeStudentData {\n        kaid\n        assignedDate\n        __typename\n      }\n      studentKaids\n      course: topic {\n        id\n        slug\n        domainSlug\n        ... on KMapTopic {\n          strandKey\n          bandKey\n          __typename\n        }\n        __typename\n      }\n      studentProgress {\n        kaid\n        currentMastery {\n          percentage\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    classroomDistrictInfo {\n      id\n      studentUserDistrictInfos(filters: {studentKaid: $studentKaid}) {\n        id\n        kaid\n        gradeLevel\n        displayNameForTeacher\n        suggestedGradeBandKey\n        previousMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          mapTestKey\n          __typename\n        }\n        currentMathAssessment {\n          id\n          isGrowthMeasure\n          testStartDate\n          termName\n          goalData {\n            id\n            strandKey\n            ritScore\n            suggestedRitScoreBandKey\n            __typename\n          }\n          mapTestKey\n          scoresReviewedDate\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  kmapTopics {\n    id\n    slug\n    strand\n    band\n    strandKey\n    bandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    __typename\n  }\n}",
  "studentListByClassCode": "query studentListByClassCode($classCode: String!) {\n  joinByClassCodeInfo(classCode: $classCode) {\n    id\n    cacheId\n    name\n    signupCode\n    descriptor\n    includesCentrallyOwnedDistrictData\n    classroomDistrictInfo {\n      id\n      emailDomains\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentListHasAssignments": "query StudentListHasAssignments($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    hasAssignments\n    hasCourseMasteryGoals\n    __typename\n  }\n}",
  "StudentListsQuery": "query StudentListsQuery {\n  coach: user {\n    id\n    studentLists: coachedStudentLists {\n      id\n      cacheId\n      name\n      signupCode\n      topics {\n        id\n        slug\n        translatedStandaloneTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentMasteryGoals": "query StudentMasteryGoals($kaid: String, $isPast: Boolean!, $classDescriptor: String) {\n  user(kaid: $kaid) {\n    id\n    hasTakenKmapExam\n    masteryAssignments(isPast: $isPast, classroomDescriptor: $classDescriptor) {\n      id\n      curationNodeLevel\n      studentData {\n        kaid\n        assignedDate\n        __typename\n      }\n      isKmap\n      isPast\n      whyPast\n      whenPast\n      whenCompleted\n      classroom {\n        id\n        cacheId\n        name\n        coach {\n          id\n          kaid\n          __typename\n        }\n        __typename\n      }\n      dueDate\n      course {\n        id\n        slug\n        domainSlug\n        translatedTitle\n        largeIconPath\n        parent {\n          id\n          translatedTitle\n          __typename\n        }\n        __typename\n      }\n      unit {\n        id\n        slug\n        domainSlug\n        translatedTitle\n        largeIconPath\n        __typename\n      }\n      currentUserProgress {\n        currentMasteryV2 {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "studentPageByDescriptorQuery": "query studentPageByDescriptorQuery($classDescriptor: String!) {\n  coach: user {\n    id\n    isFormalTeacher\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      studentUserDistrictInfos {\n        id\n        kaid\n        displayNameForTeacher\n        __typename\n      }\n      __typename\n    }\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentSkillsProgressKADQuery": "query StudentSkillsProgressKADQuery($studentKaid: String!, $progressFrom: DateTime!, $progressUpTo: DateTime!, $courseID: String!, $kaLocale: String!) {\n  districtStudentsSkillsProgressForCourses(\n    studentKaid: $studentKaid\n    progressFrom: $progressFrom\n    progressUpTo: $progressUpTo\n    courseID: $courseID\n    kaLocale: $kaLocale\n  ) {\n    exercise {\n      id\n      title: translatedTitle\n      mappedStandards {\n        id\n        setId\n        standardId\n        __typename\n      }\n      __typename\n    }\n    exerciseMinutes\n    netLevelChanges\n    skillLevel\n    workedOn\n    __typename\n  }\n  courseById(id: $courseID) {\n    id\n    title: translatedTitle\n    unitChildren {\n      unitID: id\n      unitTitle: translatedTitle\n      learnableContentPage(\n        pageParams: {pageSize: 1000, after: 0, contentKinds: [EXERCISE]}\n      ) {\n        contents {\n          exerciseID: id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentSkillsProgressMAPQuery": "query StudentSkillsProgressMAPQuery($studentKaid: String!, $progressFrom: DateTime!, $progressUpTo: DateTime!, $bands: [String!], $strandKey: String) {\n  districtStudentsSkillsProgressForCourses(\n    studentKaid: $studentKaid\n    progressFrom: $progressFrom\n    progressUpTo: $progressUpTo\n    bands: $bands\n    strandKey: $strandKey\n  ) {\n    exercise {\n      id\n      title: translatedTitle\n      mappedStandards {\n        id\n        setId\n        standardId\n        __typename\n      }\n      __typename\n    }\n    exerciseMinutes\n    netLevelChanges\n    skillLevel\n    workedOn\n    __typename\n  }\n  kmapTopics {\n    id\n    title: translatedTitle\n    band\n    bandGradeName\n    bandKey\n    strandKey\n    mapGrowthTest {\n      key\n      __typename\n    }\n    learnableContentPage(\n      pageParams: {pageSize: 1000, after: 0, contentKinds: [EXERCISE]}\n    ) {\n      contents {\n        exerciseID: id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentSubjectMasteryGoals": "query StudentSubjectMasteryGoals {\n  user {\n    id\n    goals: subjectMasteryAssignments {\n      id\n      topic {\n        id\n        slug\n        domainSlug\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SubjectMasteryAssignmentsByDescriptorQuery": "query SubjectMasteryAssignmentsByDescriptorQuery($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    assignments: subjectMasteryAssignments(filter: NO_KMAP) {\n      id\n      dueDate\n      assignedDate\n      subject: topic {\n        id\n        subjectMasteryEnabled\n        title: translatedTitle\n        __typename\n      }\n      studentKaids\n      __typename\n    }\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}",
  "TranscriptQuery": "query TranscriptQuery($videoId: String!) {\n  videoById(contentId: $videoId) {\n    id\n    title\n    augmentedTranscript\n    subtitles {\n      startTime\n      text\n      __typename\n    }\n    __typename\n  }\n}",
  "transferAuthTokenQuery": "query transferAuthTokenQuery {\n  user {\n    id\n    transferAuthToken\n    __typename\n  }\n}",
  "translationEditorEditableByUser": "query translationEditorEditableByUser($contentId: String!, $contentKind: String!) {\n  isEditableByCurrentUser(contentId: $contentId, contentKind: $contentKind)\n}",
  "translationEditorPermissions": "query translationEditorPermissions {\n  videoMapperEditor: actorRoleScopes(role: VIDEO_MAPPER_EDITOR) {\n    kaLocale\n    __typename\n  }\n  locales {\n    id\n    kaLocale\n    displayName\n    __typename\n  }\n}",
  "translationEditorTalkthroughById": "query translationEditorTalkthroughById($id: String!) {\n  talkthroughById(id: $id) {\n    id\n    title\n    translatedMp3Url\n    defaultUrlPath\n    listed\n    __typename\n  }\n}",
  "translationEditorTalkthroughRevisionById": "query translationEditorTalkthroughRevisionById($id: String!) {\n  talkthroughRevisionById(id: $id) {\n    id\n    sha\n    translatedMP3URLs\n    youtubeID\n    __typename\n  }\n}",
  "TranslationEditor_GetAllDubs": "query TranslationEditor_GetAllDubs {\n  allDubs {\n    sourceYouTubeId\n    dubYouTubeId\n    video {\n      id\n      title\n      duration\n      dateAdded\n      translatedYoutubeId\n      parentTopic {\n        id\n        title\n        relativeUrl\n        __typename\n      }\n      urlWithinTopic\n      __typename\n    }\n    __typename\n  }\n}",
  "TranslationEditor_GetArticleID": "query TranslationEditor_GetArticleID($slug: String!) {\n  article(slug: $slug) {\n    id\n    __typename\n  }\n}",
  "TranslationEditor_GetArticleStrings": "query TranslationEditor_GetArticleStrings($articleId: String!) {\n  articleStrings(articleId: $articleId) {\n    title\n    englishContent\n    jiptContent\n    translationItems {\n      assessmentItem\n      englishString\n      jiptString\n      __typename\n    }\n    __typename\n  }\n  articleById(id: $articleId) {\n    id\n    defaultUrlPath\n    listed\n    __typename\n  }\n}",
  "TranslationEditor_GetChallengeID": "query TranslationEditor_GetChallengeID($slug: String!) {\n  challenge(slug: $slug) {\n    id\n    __typename\n  }\n}",
  "TranslationEditor_GetCourseStrings": "query TranslationEditor_GetCourseStrings($courseId: String!) {\n  courseStrings(courseId: $courseId) {\n    id\n    slug\n    renderType\n    title\n    translatedTitle\n    description\n    translatedDescription\n    __typename\n  }\n}",
  "TranslationEditor_GetCurationNodeID": "query TranslationEditor_GetCurationNodeID($slug: String!) {\n  topic(slug: $slug) {\n    id\n    __typename\n  }\n}\n",
  "TranslationEditor_GetDescriptionStrings": "query TranslationEditor_GetDescriptionStrings($curationNodeId: String!) {\n  curationNodeDescriptionStrings(curationNodeId: $curationNodeId) {\n    id\n    slug\n    contentKind\n    title\n    translatedTitle\n    standaloneTitle\n    translatedStandaloneTitle\n    description\n    translatedDescription\n    __typename\n  }\n}",
  "TranslationEditor_GetExerciseID": "query TranslationEditor_GetExerciseID($slug: String!) {\n  exercise(name: $slug) {\n    id\n    __typename\n  }\n}",
  "TranslationEditor_GetExerciseStrings": "query TranslationEditor_GetExerciseStrings($exerciseId: String!) {\n  exerciseStrings(exerciseId: $exerciseId) {\n    orderedProblemTypes {\n      name\n      assessmentItems\n      __typename\n    }\n    problemTypes {\n      key\n      value\n      __typename\n    }\n    translationItems {\n      assessmentItem\n      englishString\n      jiptString\n      __typename\n    }\n    translatedAssessmentItems {\n      key\n      value\n      __typename\n    }\n    __typename\n  }\n  exerciseById(id: $exerciseId) {\n    id\n    title\n    defaultUrlPath\n    listed\n    __typename\n  }\n}",
  "TranslationEditor_GetPlatformStrings": "query TranslationEditor_GetPlatformStrings($category: String!) {\n  platformStrings(category: $category) {\n    title\n    strings {\n      english\n      translation\n      __typename\n    }\n    __typename\n  }\n}",
  "TranslationEditor_GetProgramStrings": "query TranslationEditor_GetProgramStrings($programKind: ProgramStringsKind!, $programId: String!, $contentDescriptor: String!) {\n  programStrings(programKind: $programKind, programId: $programId) {\n    title\n    strings {\n      english\n      translation\n      __typename\n    }\n    __typename\n  }\n  contentForDescriptors(descriptors: [$contentDescriptor]) {\n    id\n    defaultUrlPath\n    listed\n    __typename\n  }\n}",
  "TranslationEditor_GetProjectID": "query TranslationEditor_GetProjectID($slug: String!) {\n  project(slug: $slug) {\n    id\n    __typename\n  }\n}",
  "TranslationEditor_GetVideosByIDs": "query TranslationEditor_GetVideosByIDs($ids: [String!]!) {\n  videosByIds(ids: $ids) {\n    id\n    title\n    duration\n    dateAdded\n    translatedYoutubeId\n    parentTopic {\n      id\n      title\n      relativeUrl\n      __typename\n    }\n    urlWithinTopic\n    __typename\n  }\n}",
  "TranslationEditor_GetVideoTranslationStatus": "query TranslationEditor_GetVideoTranslationStatus($kaLocale: String!) {\n  allVideoTranslationProgressForKaLocale(kaLocale: $kaLocale) {\n    id\n    slug\n    title\n    isDubbed\n    dubIsSubtitled\n    isSubtitled\n    revisionStatus\n    upstreamDuration\n    youtubeId\n    upstreamYoutubeId\n    lesson {\n      id\n      slug\n      title\n      unit: parent {\n        id\n        slug\n        title\n        course: parent {\n          id\n          slug\n          title\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "TranslationPipelineQuery": "query TranslationPipelineQuery {\n  crowdinLocales\n  currentPipelines {\n    timestamp\n    crowdinLocale\n    priority\n    archiveId\n    pipelines {\n      stage\n      status\n      startTime\n      endTime\n      message\n      attempts\n      __typename\n    }\n    __typename\n  }\n  historicalPipelines {\n    timestamp\n    crowdinLocale\n    priority\n    archiveId\n    pipelines {\n      stage\n      status\n      startTime\n      endTime\n      message\n      attempts\n      __typename\n    }\n    __typename\n  }\n}",
  "translationPortalContentProgress": "query translationPortalContentProgress($contentDescriptors: [String!]!, $contentLocale: String!) {\n  contentTranslationProgress(\n    contentDescriptors: $contentDescriptors\n    contentKALocale: $contentLocale\n  ) {\n    content {\n      ...tapAIGuideActivityNode\n      ...tapArticleNode\n      ...tapChallengeNode\n      ...tapExerciseNode\n      ...tapInteractiveNode\n      ...tapProjectNode\n      ...tapTalkthroughNode\n      ...tapVideoNode\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment tapAIGuideActivityNode on TAPAIGuideActivityNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapArticleNode on TAPArticleNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapChallengeNode on TAPChallengeNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapContentItem on TAPContentItem {\n  id\n  contentKind\n  contentId\n  sha\n  isNativeContent\n  isUnlisted\n  slug\n  title\n  translatedTitle\n  __typename\n}\n\nfragment tapContentWordCounts on TAPContentWordCounts {\n  wordCount\n  translatableWordCount\n  translatedWordCount\n  translatedWordCount\n  approvedWordCount\n  __typename\n}\n\nfragment tapExerciseNode on TAPExerciseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapInteractiveNode on TAPInteractiveNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapMetadataWordCounts on TAPMetadataWordCounts {\n  metadataWordCount\n  metadataTranslatableWordCount\n  metadataTranslatedWordCount\n  metadataApprovedWordCount\n  __typename\n}\n\nfragment tapProjectNode on TAPProjectNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapTalkthroughNode on TAPTalkthroughNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  isSubtitled\n  youtubeId\n  __typename\n}\n\nfragment tapVideoNode on TAPVideoNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  dubIsSubtitled\n  isSubtitled\n  translatedYoutubeId\n  youtubeId\n  __typename\n}",
  "translationPortalCourseContentProgress": "query translationPortalCourseContentProgress($courseId: String!, $contentLocale: String!) {\n  courseTranslationProgress(courseId: $courseId, contentKALocale: $contentLocale) {\n    course {\n      ...tapCourseNode\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment tapAIGuideActivityNode on TAPAIGuideActivityNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapArticleNode on TAPArticleNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapChallengeNode on TAPChallengeNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapContentItem on TAPContentItem {\n  id\n  contentKind\n  contentId\n  sha\n  isNativeContent\n  isUnlisted\n  slug\n  title\n  translatedTitle\n  __typename\n}\n\nfragment tapContentWordCounts on TAPContentWordCounts {\n  wordCount\n  translatableWordCount\n  translatedWordCount\n  translatedWordCount\n  approvedWordCount\n  __typename\n}\n\nfragment tapCourseNode on TAPCourseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapUnitNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapExerciseNode on TAPExerciseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapInteractiveNode on TAPInteractiveNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapLessonNode on TAPLessonNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapAIGuideActivityNode\n    ...tapArticleNode\n    ...tapChallengeNode\n    ...tapExerciseNode\n    ...tapInteractiveNode\n    ...tapProjectNode\n    ...tapTalkthroughNode\n    ...tapVideoNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapMetadataWordCounts on TAPMetadataWordCounts {\n  metadataWordCount\n  metadataTranslatableWordCount\n  metadataTranslatedWordCount\n  metadataApprovedWordCount\n  __typename\n}\n\nfragment tapProjectNode on TAPProjectNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapTalkthroughNode on TAPTalkthroughNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  isSubtitled\n  youtubeId\n  __typename\n}\n\nfragment tapUnitNode on TAPUnitNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapLessonNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapVideoNode on TAPVideoNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  dubIsSubtitled\n  isSubtitled\n  translatedYoutubeId\n  youtubeId\n  __typename\n}",
  "translationPortalCourseContentProgressCached": "query translationPortalCourseContentProgressCached($courseId: String!, $contentLocale: String!) {\n  courseTranslationProgress(courseId: $courseId, contentKALocale: $contentLocale) {\n    course {\n      ...tapCourseNode\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment tapAIGuideActivityNode on TAPAIGuideActivityNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapArticleNode on TAPArticleNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapChallengeNode on TAPChallengeNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapContentItem on TAPContentItem {\n  id\n  contentKind\n  contentId\n  sha\n  isNativeContent\n  isUnlisted\n  slug\n  title\n  translatedTitle\n  __typename\n}\n\nfragment tapContentWordCounts on TAPContentWordCounts {\n  wordCount\n  translatableWordCount\n  translatedWordCount\n  translatedWordCount\n  approvedWordCount\n  __typename\n}\n\nfragment tapCourseNode on TAPCourseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapUnitNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapExerciseNode on TAPExerciseNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapInteractiveNode on TAPInteractiveNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapLessonNode on TAPLessonNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapAIGuideActivityNode\n    ...tapArticleNode\n    ...tapChallengeNode\n    ...tapExerciseNode\n    ...tapInteractiveNode\n    ...tapProjectNode\n    ...tapTalkthroughNode\n    ...tapVideoNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapMetadataWordCounts on TAPMetadataWordCounts {\n  metadataWordCount\n  metadataTranslatableWordCount\n  metadataTranslatedWordCount\n  metadataApprovedWordCount\n  __typename\n}\n\nfragment tapProjectNode on TAPProjectNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  ...tapContentWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapTalkthroughNode on TAPTalkthroughNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  isSubtitled\n  youtubeId\n  __typename\n}\n\nfragment tapUnitNode on TAPUnitNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  children {\n    ...tapLessonNode\n    __typename\n  }\n  __typename\n}\n\nfragment tapVideoNode on TAPVideoNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  isDubbed\n  dubIsSubtitled\n  isSubtitled\n  translatedYoutubeId\n  youtubeId\n  __typename\n}",
  "translationPortalCourseTitlesByIds": "query translationPortalCourseTitlesByIds($ids: [String]!) {\n  topicsById(ids: $ids) {\n    id\n    title\n    domainSlug\n    courseSnapshotId\n    __typename\n  }\n}",
  "translationPortalFolders": "query translationPortalFolders($kaLocale: String!) {\n  allFolders(kaLocalesFilter: [$kaLocale]) {\n    id\n    name\n    kaLocale\n    courseIds\n    __typename\n  }\n}",
  "translationPortalPlatformAndDomainsProgress": "query translationPortalPlatformAndDomainsProgress($locale: String!) {\n  domainsTranslationProgress(contentKALocale: $locale) {\n    domains {\n      ...tapDomainNode\n      __typename\n    }\n    __typename\n  }\n  platformTranslationProgress {\n    platform {\n      ...tapPlatformNode\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment tapContentItem on TAPContentItem {\n  id\n  contentKind\n  contentId\n  sha\n  isNativeContent\n  isUnlisted\n  slug\n  title\n  translatedTitle\n  __typename\n}\n\nfragment tapContentWordCounts on TAPContentWordCounts {\n  wordCount\n  translatableWordCount\n  translatedWordCount\n  translatedWordCount\n  approvedWordCount\n  __typename\n}\n\nfragment tapDomainNode on TAPDomainNode {\n  ...tapContentItem\n  ...tapMetadataWordCounts\n  fingerprint\n  __typename\n}\n\nfragment tapMetadataWordCounts on TAPMetadataWordCounts {\n  metadataWordCount\n  metadataTranslatableWordCount\n  metadataTranslatedWordCount\n  metadataApprovedWordCount\n  __typename\n}\n\nfragment tapPlatformNode on TAPPlatformNode {\n  ...tapContentWordCounts\n  id\n  slug\n  title\n  __typename\n}",
  "translationPortalTranslationFreshness": "query translationPortalTranslationFreshness {\n  platformTranslationProgress {\n    ...tapTranslationFreshness\n    __typename\n  }\n}\n\nfragment tapTranslationFreshness on TAPTranslationFreshness {\n  lastStringsUpdateDate\n  lastDubsUpdateDate\n  lastSubtitlesUpdateDate\n  oldestSubtitlesDate\n  updateDate\n  __typename\n}",
  "TranslationSearchQuery": "query TranslationSearchQuery($query: String!, $type: QueryType!) {\n  stringSearch(query: $query, type: $type) {\n    snapshotId\n    filename\n    entry {\n      msgKey\n      msgId\n      msgIdPlural\n      comment\n      occurrences {\n        file\n        line\n        __typename\n      }\n      flags\n      timestamp\n      isPlatform\n      deleted\n      __typename\n    }\n    translations {\n      crowdinLocale\n      msgStr\n      approved\n      lintError\n      __typename\n    }\n    __typename\n  }\n}",
  "translationsVideosGetVideo": "query translationsVideosGetVideo($youtubeId: String!) {\n  videoByYoutubeId(youtubeId: $youtubeId) {\n    id\n    contentId\n    description\n    __typename\n  }\n}",
  "translationsVideosGetVideos": "query translationsVideosGetVideos($youtubeIds: [String!]!) {\n  videosByYoutubeIds(youtubeIds: $youtubeIds) {\n    id\n    contentId\n    __typename\n  }\n}",
  "unitProgressForSubject": "query unitProgressForSubject($subjectId: String!) {\n  topicById(id: $subjectId) {\n    id\n    slug\n    title\n    masteryEnabled\n    masteryChallenge {\n      id\n      timeEstimate {\n        lowerBound\n        upperBound\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  user {\n    id\n    latestCourseChallengeAttempt(courseId: $subjectId) {\n      id\n      canResume\n      completedDate\n      __typename\n    }\n    exerciseData {\n      masteryChallengeStatus(courseId: $subjectId) {\n        totalQuestions\n        isEligible\n        currentAttempt {\n          id\n          canResume\n          timeLeftSeconds\n          expirationTime\n          expirationPeriodHours\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    subjectProgress(topicId: $subjectId) {\n      notification {\n        dismissalKey\n        modifiedUnits {\n          id\n          __typename\n        }\n        __typename\n      }\n      unitProgresses {\n        masteryEnabled\n        currentMastery {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        topic {\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "unprocessedAIGuideWaitlistEntries": "query unprocessedAIGuideWaitlistEntries($cursor: String, $eligibility: Boolean, $stableRandomOrder: Boolean) {\n  unprocessedAIGuideWaitlistEntries(\n    cursor: $cursor\n    eligibility: $eligibility\n    stableRandomOrder: $stableRandomOrder\n  ) {\n    cursor\n    entries {\n      id\n      isEligible\n      isProcessed\n      joinDate\n      user {\n        id\n        age\n        nickname\n        email\n        children {\n          id\n          underAgeGate {\n            parentEmail\n            __typename\n          }\n          classrooms {\n            id\n            cacheId\n            __typename\n          }\n          __typename\n        }\n        discussionBanned\n        isMVAL\n        isParent\n        isTeacher\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "UntranslatedContentCheck": "query UntranslatedContentCheck($path: String!, $countryCode: String!) {\n  contentRoute(path: $path, countryCode: $countryCode) {\n    resolvedPath\n    __typename\n  }\n}",
  "UserAfterUDIDeactivationQuery": "query UserAfterUDIDeactivationQuery($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    userDistrictInfos {\n      id\n      __typename\n    }\n    authEmails\n    userAdminLogs {\n      adminKaid\n      adminEmail\n      date\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "UserAssignments": "query UserAssignments($after: ID, $dueAfter: DateTime, $dueBefore: DateTime, $pageSize: Int, $orderBy: AssignmentOrder!, $studentListId: String, $coachKaid: String) {\n  user {\n    id\n    hasAccessToAIGuideLearner\n    isAIGuideEnabled\n    kaid\n    assignmentsPage(\n      after: $after\n      dueAfter: $dueAfter\n      dueBefore: $dueBefore\n      pageSize: $pageSize\n      orderBy: $orderBy\n      studentListId: $studentListId\n      coachKaid: $coachKaid\n    ) {\n      assignments {\n        id\n        key\n        subjectSlug\n        title\n        contents {\n          ...ContentFields\n          __typename\n        }\n        assignedDate\n        dueDate\n        studentList {\n          id\n          cacheId\n          signupCode\n          name\n          __typename\n        }\n        totalCompletionStates: itemCompletionStates {\n          student {\n            id\n            kaid\n            __typename\n          }\n          state\n          completedOn\n          bestScore {\n            numCorrect\n            numAttempted\n            __typename\n          }\n          essaySession {\n            id\n            __typename\n          }\n          __typename\n        }\n        exerciseConfig {\n          itemPickerStrategy\n          __typename\n        }\n        domainId\n        courseId\n        unitId\n        lessonId\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ContentFields on LearnableContent {\n  contentId: id\n  id\n  kind\n  title: translatedTitle\n  defaultUrlPath\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  description: translatedDescription\n  thumbnailUrl\n  slug\n  ... on Exercise {\n    expectedDoNCount: exerciseLength\n    timeEstimate {\n      lowerBound\n      upperBound\n      __typename\n    }\n    __typename\n  }\n  ... on Video {\n    youtubeId\n    translatedYoutubeId\n    duration\n    __typename\n  }\n  __typename\n}",
  "UserAssignmentsForContent": "query UserAssignmentsForContent($classroomDescriptor: String!, $contentDescriptors: [String!]!) {\n  user {\n    id\n    assignmentDueNextForContentDescriptors(\n      classroomDescriptor: $classroomDescriptor\n      contentDescriptors: $contentDescriptors\n    ) {\n      ...AssignmentData\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentData on Assignment {\n  id\n  title\n  contents {\n    id\n    contentDescriptor\n    contentKind\n    slug\n    translatedTitle\n    parentTopic {\n      id\n      parent {\n        id\n        masteryEnabled\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    topicPaths {\n      path {\n        id\n        slug\n        kind\n        __typename\n      }\n      __typename\n    }\n    urlWithinCurationNode\n    ... on TopicQuiz {\n      index\n      __typename\n    }\n    __typename\n  }\n  courseId\n  domainId\n  dueDate\n  exerciseConfig {\n    itemPickerStrategy\n    __typename\n  }\n  itemCompletionStates {\n    state\n    exerciseAttempts {\n      id\n      isCompleted\n      isRestarted\n      lastAttemptDate\n      numCorrect\n      numAttempted\n      __typename\n    }\n    __typename\n  }\n  key\n  lesson {\n    id\n    parent {\n      id\n      masteryEnabled\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n  lessonId\n  unit {\n    id\n    masteryEnabled\n    translatedTitle\n    __typename\n  }\n  unitId\n  __typename\n}",
  "UserAssignmentsPage": "query UserAssignmentsPage($classroomDescriptor: String!, $dueAfterISO: DateTime, $pageSize: Int!, $cursor: ID) {\n  user {\n    id\n    assignmentsPage(\n      dueAfter: $dueAfterISO\n      orderBy: DUE_DATE_ASC\n      pageSize: $pageSize\n      classroomDescriptor: $classroomDescriptor\n      after: $cursor\n    ) {\n      assignments {\n        ...AssignmentData\n        __typename\n      }\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentData on Assignment {\n  id\n  title\n  contents {\n    id\n    contentDescriptor\n    contentKind\n    slug\n    translatedTitle\n    parentTopic {\n      id\n      parent {\n        id\n        masteryEnabled\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    topicPaths {\n      path {\n        id\n        slug\n        kind\n        __typename\n      }\n      __typename\n    }\n    urlWithinCurationNode\n    ... on TopicQuiz {\n      index\n      __typename\n    }\n    __typename\n  }\n  courseId\n  domainId\n  dueDate\n  exerciseConfig {\n    itemPickerStrategy\n    __typename\n  }\n  itemCompletionStates {\n    state\n    exerciseAttempts {\n      id\n      isCompleted\n      isRestarted\n      lastAttemptDate\n      numCorrect\n      numAttempted\n      __typename\n    }\n    __typename\n  }\n  key\n  lesson {\n    id\n    parent {\n      id\n      masteryEnabled\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n  lessonId\n  unit {\n    id\n    masteryEnabled\n    translatedTitle\n    __typename\n  }\n  unitId\n  __typename\n}",
  "UserClassroomsInfo": "query UserClassroomsInfo($teacherKaid: String) {\n  user(kaid: $teacherKaid) {\n    id\n    coachedClassrooms {\n      cacheId\n      id\n      name\n      descriptor\n      __typename\n    }\n    __typename\n  }\n}",
  "userDataForNewContentPermission": "query userDataForNewContentPermission($email: String!) {\n  user(email: $email) {\n    id\n    kaid\n    email\n    username\n    nickname\n    __typename\n  }\n}",
  "userDistrictInfoByEmailAndClassCode": "query userDistrictInfoByEmailAndClassCode($email: String!, $classCode: String!) {\n  userDistrictInfoByEmailAndClassCode(email: $email, classCode: $classCode) {\n    error {\n      debugMessage\n      code\n      __typename\n    }\n    userDistrictInfo {\n      id\n      districtProvidedEmail\n      districtProvidedFirstName\n      districtProvidedLastName\n      districtProvidedFullName\n      districtProvidedBirthYear\n      districtProvidedBirthMonth\n      primaryRole\n      isKmap\n      kaid\n      uuid\n      __typename\n    }\n    __typename\n  }\n}",
  "UserDistrictInfosQuery": "query UserDistrictInfosQuery($email: String, $rosterID: String) {\n  userDistrictInfos(email: $email, rosterID: $rosterID) {\n    id\n    uuid\n    kaid\n    adminOfSchools {\n      id\n      name\n      __typename\n    }\n    gracePeriod {\n      start\n      end\n      __typename\n    }\n    partnership {\n      ... on MetaDistrict {\n        id\n        name\n        __typename\n      }\n      ... on District {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    district {\n      id\n      name\n      isOldNWEA\n      kaLocale\n      ancestors {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    createdAt\n    deletedAt\n    updatedAt\n    cleverId\n    classlinkId\n    rosterSource\n    activationEmailSentAt\n    activatedAt\n    activationMethod\n    districtProvidedFullName\n    districtProvidedEmail\n    districtProvidedBirthMonth\n    districtProvidedBirthYear\n    primaryRole\n    isKmap\n    isKAD\n    gradeLevel\n    khanmigoShould\n    khanmigoStatus\n    khanmigoReason\n    udiAuditLogs {\n      kind\n      changes\n      actorKaid\n      createdAt\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "UserDistrictStudentsQuery": "query UserDistrictStudentsQuery($classDescriptor: String!) {\n  classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    signupCode\n    classroomDistrictInfo {\n      id\n      isNweaMapSynced\n      studentUserDistrictInfos {\n        id\n        kaid\n        uuid\n        displayNameForTeacher\n        districtProvidedEmail\n        __typename\n      }\n      __typename\n    }\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}",
  "UserDowngradedQuery": "query UserDowngradedQuery {\n  user {\n    id\n    userDistrictInfos(includeDeleted: true) {\n      id\n      district {\n        id\n        name\n        __typename\n      }\n      deletedAt\n      primaryRole\n      rosterSource\n      __typename\n    }\n    __typename\n  }\n}",
  "UserEmailsQuery": "query UserEmailsQuery {\n  user {\n    id\n    authEmails\n    __typename\n  }\n}",
  "userForConversationNotice": "query userForConversationNotice {\n  user {\n    id\n    hasParents\n    hasCoach\n    __typename\n  }\n}",
  "UserHasDismissedQuery": "query UserHasDismissedQuery($itemName: String!) {\n  dismissedItem(itemName: $itemName) {\n    id\n    isDismissed\n    __typename\n  }\n}",
  "UserNextUpcomingAssignment": "query UserNextUpcomingAssignment($contentDescriptors: [String!]!) {\n  user {\n    id\n    assignmentDueNext {\n      id\n      studentList {\n        ...Classroom\n        __typename\n      }\n      __typename\n    }\n    assignmentsPageForContentItems(contentDescriptors: $contentDescriptors) {\n      assignments {\n        id\n        studentList {\n          ...Classroom\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Classroom on StudentList {\n  cacheId\n  coachKaid\n  descriptor\n  hasAssignments\n  id\n  name\n  signupCode\n  __typename\n}",
  "UserPermissionsByEmail": "query UserPermissionsByEmail($email: String!) {\n  user(email: $email) {\n    id\n    userKaid: kaid\n    userEmail: email\n    userName: username\n    permissions: contentPermissions {\n      id\n      kind\n      role\n      folderId\n      granterEmail\n      locale: kaLocale\n      canPublish\n      __typename\n    }\n    __typename\n  }\n}",
  "UserPermissionsForContent": "query UserPermissionsForContent {\n  user {\n    id\n    canEdit: hasPermission(name: \"can_edit_content\", scope: ANY_ON_CURRENT_LOCALE)\n    __typename\n  }\n}",
  "userProgressForAssignments": "query userProgressForAssignments($contentDescriptors: [String!]!) {\n  user {\n    id\n    contentItemProgresses(queryBy: {contentDescriptors: $contentDescriptors}) {\n      ...BasicContentItemProgress\n      ... on ExerciseItemProgress {\n        lastCompletedAttempt {\n          id\n          lastAttemptDate\n          numCorrect\n          numAttempted\n          __typename\n        }\n        updatedMasteryLevel\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BasicContentItemProgress on ContentItemProgress {\n  bestScore {\n    numAttempted\n    numCorrect\n    completedDate\n    __typename\n  }\n  completionStatus\n  content {\n    id\n    contentKind\n    contentDescriptor\n    progressKey\n    __typename\n  }\n  __typename\n}",
  "userProgressForLesson": "query userProgressForLesson($lessonId: String!, $unitId: String!, $masteryEnabled: Boolean!) {\n  user {\n    id\n    contentItemProgresses(queryBy: {parentTopicId: $lessonId}) {\n      ...BasicContentItemProgress\n      ... on ExerciseItemProgress @include(if: $masteryEnabled) {\n        lastCompletedAttempt {\n          id\n          lastAttemptDate\n          numCorrect\n          numAttempted\n          __typename\n        }\n        updatedMasteryLevel\n        __typename\n      }\n      __typename\n    }\n    latestQuizAttempts(topicId: $unitId) {\n      id\n      numCorrect\n      numAttempted\n      isCompleted\n      positionKey\n      __typename\n    }\n    latestUnitTestAttempts(unitId: $unitId) {\n      id\n      numCorrect\n      numAttempted\n      isCompleted\n      topicId\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment BasicContentItemProgress on ContentItemProgress {\n  bestScore {\n    numAttempted\n    numCorrect\n    completedDate\n    __typename\n  }\n  completionStatus\n  content {\n    id\n    contentKind\n    contentDescriptor\n    progressKey\n    __typename\n  }\n  __typename\n}",
  "userProgressForPrograms": "query userProgressForPrograms($contentDescriptors: [String!]!) {\n  user {\n    id\n    contentItemProgresses(queryBy: {contentDescriptors: $contentDescriptors}) {\n      completionStatus\n      content {\n        id\n        contentKind\n        __typename\n      }\n      ... on ChallengeItemProgress {\n        currentStep\n        points\n        stashedCode\n        __typename\n      }\n      ... on InteractiveItemProgress {\n        points\n        __typename\n      }\n      ... on ProjectItemProgress {\n        points\n        stashedCode\n        __typename\n      }\n      ... on TalkthroughItemProgress {\n        points\n        lastMsWatched\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "userSpinoffsOfProgram": "query userSpinoffsOfProgram($spinoffOrigin: SpinoffOrigin!, $pageInfo: ListProgramsPageInfo, $sort: ListProgramSortOrder) {\n  user {\n    id\n    programSpinoffs(from: $spinoffOrigin, pageInfo: $pageInfo, sort: $sort) {\n      complete\n      cursor\n      programs {\n        id\n        key\n        authorKaid\n        authorNickname\n        displayableSpinoffCount\n        imagePath\n        sumVotesIncremented\n        translatedTitle: title\n        url\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "userStatisticsQuery": "query userStatisticsQuery($kaid: String!) {\n  userSummary(kaid: $kaid) {\n    statistics {\n      answers\n      comments\n      projectanswers\n      projectquestions\n      questions\n      replies\n      votes\n      __typename\n    }\n    __typename\n  }\n}",
  "userSummaryQuery": "query userSummaryQuery($kaid: String!) {\n  userSummary(kaid: $kaid) {\n    answers {\n      ...SharedFeedbackFields\n      __typename\n    }\n    comments {\n      ...SharedFeedbackFields\n      __typename\n    }\n    projectanswers {\n      ...SharedFeedbackFields\n      __typename\n    }\n    projectquestions {\n      ...SharedFeedbackFields\n      __typename\n    }\n    questions {\n      ...SharedFeedbackFields\n      __typename\n    }\n    replies {\n      ...SharedFeedbackFields\n      __typename\n    }\n    badges {\n      count\n      badge {\n        absoluteUrl\n        badgeCategory\n        description\n        fullDescription\n        hideContext\n        icons {\n          compactUrl\n          emailUrl\n          largeUrl\n          smallUrl\n          __typename\n        }\n        isCustom\n        isRetired\n        name\n        points\n        relativeUrl\n        slug\n        __typename\n      }\n      __typename\n    }\n    statistics {\n      answers\n      comments\n      flags\n      projectanswers\n      projectquestions\n      questions\n      replies\n      votes\n      __typename\n    }\n    hellbanActions {\n      date\n      isHellban\n      moderatorNickname\n      reason\n      urlsafeKey\n      __typename\n    }\n    __typename\n  }\n  user(kaid: $kaid) {\n    id\n    notifications(notificationClass: MOD_NOTIFICATION) {\n      notifications {\n        date\n        read\n        ... on ModeratorNotification {\n          text\n          mod {\n            id\n            nickname\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment SharedFeedbackFields on Feedback {\n  __typename\n  appearsAsDeleted\n  content\n  date\n  definitelyNotSpam\n  deleted\n  downVoted\n  expandKey\n  feedbackType\n  focusUrl\n  fromVideoAuthor\n  key\n  lowQualityScore\n  notifyOnAnswer\n  permalink\n  relativeUrl\n  replyCount\n  restrictPosting\n  showLowQualityNotice\n  sumVotesIncremented\n  upVoted\n  focus {\n    id\n    kind\n    relativeUrl\n    translatedTitle\n    __typename\n  }\n}",
  "validateAiGuideToken": "query validateAiGuideToken($token: String!) {\n  validateAiGuideToken(token: $token) {\n    kaid\n    email\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "validateResetToken": "query validateResetToken($token: String!) {\n  validateResetToken(token: $token) {\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "verifyThirdPartyAuth": "query verifyThirdPartyAuth($oauthType: ThirdPartyOAuthType!, $accessToken: String!) {\n  verifyThirdPartyAuth(oauthType: $oauthType, accessToken: $accessToken) {\n    error {\n      code\n      __typename\n    }\n    email\n    __typename\n  }\n}",
  "videoByReadableId": "query videoByReadableId($videoId: String!) {\n  video(id: $videoId) {\n    id\n    title\n    youtubeId\n    contentId\n    __typename\n  }\n}",
  "videoByYoutubeId": "query videoByYoutubeId($youtubeId: String!) {\n  video: videoByYoutubeId(youtubeId: $youtubeId) {\n    id\n    assessmentItemTags\n    contentKind\n    defaultUrlPath\n    kind\n    nodeSlug\n    slug\n    sponsored\n    title\n    translatedDescription\n    translatedTitle\n    translatedCustomTitleTag\n    authorNames\n    authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    creationDate\n    dateAdded\n    description\n    descriptionHtml\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    relativeUrl\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    __typename\n  }\n}",
  "videoDataYoutubeId": "query videoDataYoutubeId($videoId: String!) {\n  video: videoByYoutubeId(youtubeId: $videoId) {\n    id\n    title\n    youtubeId\n    contentId\n    __typename\n  }\n}",
  "videoEditorQuery": "query videoEditorQuery($contentId: String!) {\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isEditableByCurrentUser(contentId: $contentId, contentKind: \"Video\")\n  isPublishableByCurrentUser(contentId: $contentId, contentKind: \"Video\")\n  videoRevisionById(id: $contentId) {\n    ...VideoRevision\n    __typename\n  }\n}\n\nfragment VideoRevision on VideoRevision {\n  id\n  contentId\n  contentKind\n  creationDate\n  sha\n  authorKey\n  customDescriptionTag\n  customTitleTag\n  description\n  descriptionHtml: description\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  readableId: slug\n  title\n  sponsored\n  thumbnailCache\n  thumbnailData\n  alternateSlugs\n  assessmentItemTags\n  augmentedTranscript\n  authorNames\n  clarificationsEnabled\n  duration\n  kaUserLicense\n  keywords\n  youtubeId\n  listed\n  __typename\n}",
  "WhatNextPrompt": "query WhatNextPrompt($assignmentsPageSize: Int, $assignmentsOrderBy: AssignmentOrder!, $assignmentsDueAfter: DateTime!) {\n  user {\n    id\n    kaid\n    assignmentsPage(\n      pageSize: $assignmentsPageSize\n      orderBy: $assignmentsOrderBy\n      dueAfter: $assignmentsDueAfter\n    ) {\n      assignments {\n        id\n        contents {\n          id\n          contentKind\n          translatedTitle\n          topicPaths {\n            path {\n              id\n              slug\n              kind\n              __typename\n            }\n            __typename\n          }\n          urlWithinCurationNode\n          __typename\n        }\n        courseId\n        domainId\n        dueDate\n        exerciseConfig {\n          itemPickerStrategy\n          __typename\n        }\n        key\n        lessonId\n        unitId\n        classroom {\n          id\n          cacheId\n          signupCode\n          __typename\n        }\n        itemCompletionStates {\n          state\n          bestScore {\n            numCorrect\n            numAttempted\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    courseMasteryAssignments(isPast: false) {\n      id\n      dueDate\n      currentUserProgressV2 {\n        currentMasteryV2 {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        unitProgresses {\n          ...UnitProgressFields\n          __typename\n        }\n        __typename\n      }\n      topic {\n        ...TopicFields\n        __typename\n      }\n      __typename\n    }\n    classPickerCourseProgresses {\n      lastWorkedOn\n      topic {\n        ...TopicFields\n        __typename\n      }\n      unitProgresses {\n        ...UnitProgressFields\n        __typename\n      }\n      __typename\n    }\n    recommendations(queryParams: {}) {\n      content {\n        id\n        title\n        defaultUrlPath\n        __typename\n      }\n      reason\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment TopicFields on Topic {\n  contentId: id\n  id\n  contentKind\n  title: translatedTitle\n  relativeUrl\n  slug\n  __typename\n}\n\nfragment UnitProgressFields on UnitProgress {\n  lastWorkedOn\n  currentMasteryV2 {\n    percentage\n    pointsEarned\n    pointsAvailable\n    __typename\n  }\n  topic {\n    ...TopicFields\n    __typename\n  }\n  __typename\n}",
  "WhatNextUnitDataQuery": "query WhatNextUnitDataQuery($unitID: String!) {\n  unitById(id: $unitID) {\n    id\n    allOrderedChildren {\n      ... on Lesson {\n        id\n        contentKind\n        contentItems {\n          id\n          kind\n          __typename\n        }\n        relativeUrl\n        translatedTitle\n        __typename\n      }\n      ... on TopicQuiz {\n        id\n        contentKind\n        translatedTitle\n        urlWithinCurationNode(ancestorId: $unitID)\n        __typename\n      }\n      ... on TopicUnitTest {\n        id\n        contentKind\n        translatedTitle\n        urlWithinCurationNode(ancestorId: $unitID)\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  user {\n    id\n    kaid\n    contentItemProgresses(queryBy: {courseOrUnitId: $unitID}) {\n      completionStatus\n      content {\n        id\n        contentId\n        contentKind\n        urlWithinCurationNode(ancestorId: $unitID)\n        translatedTitle\n        __typename\n      }\n      ... on ExerciseItemProgress {\n        updatedMasteryLevel\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "youtubeVideoInfoAddContent": "query youtubeVideoInfoAddContent($youtubeId: String!) {\n  youtubeVideoInfo(youtubeId: $youtubeId) {\n    description\n    readableId: slug\n    title\n    duration\n    keywords: keywordsString\n    ... on YoutubeVideoInfoFromExistingContent {\n      videoRevision {\n        id\n        __typename\n      }\n      kaUserLicense\n      __typename\n    }\n    __typename\n  }\n}",
  "contentSearchArticle": "query contentSearchArticle($contentId: String!) {\n  articleById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchChallenge": "query contentSearchChallenge($contentId: String!) {\n  challengeById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchCourse": "query contentSearchCourse($contentId: String!) {\n  courseById(id: $contentId) {\n    id\n    slug\n    title\n    listed\n    relativeUrl\n    masteryEnabled\n    linkedCourseStructure\n    __typename\n  }\n}",
  "contentSearchExercise": "query contentSearchExercise($contentId: String!) {\n  exerciseById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchInteractive": "query contentSearchInteractive($contentId: String!) {\n  interactiveById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchProject": "query contentSearchProject($contentId: String!) {\n  projectById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchPrototype": "query contentSearchPrototype($queryString: String!) {\n  contentSearch(queryString: $queryString) {\n    results {\n      contentKind\n      contentId\n      facets\n      score\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "contentSearchTalkthrough": "query contentSearchTalkthrough($contentId: String!) {\n  talkthroughById(id: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "contentSearchVideo": "query contentSearchVideo($contentId: String!) {\n  videoById(contentId: $contentId) {\n    ...contentSearchLearnableContent\n    __typename\n  }\n}\n\nfragment contentSearchLearnableContent on LearnableContent {\n  id\n  slug\n  title\n  listed\n  defaultUrlPath\n  __typename\n}",
  "videoByReadableID": "query videoByReadableID($id: String!) {\n  video(id: $id) {\n    id\n    assessmentItemTags\n    contentKind\n    defaultUrlPath\n    kind\n    nodeSlug\n    slug\n    sponsored\n    title\n    translatedDescription\n    translatedTitle\n    translatedCustomTitleTag\n    authorNames\n    authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    creationDate\n    dateAdded\n    description\n    descriptionHtml\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    relativeUrl\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    __typename\n  }\n}",
  "getEotCardDetails": "query getEotCardDetails($taskId: String!) {\n  user {\n    id\n    exerciseData {\n      practiceAttempt(taskId: $taskId) {\n        id\n        numAttempted\n        numCorrect\n        startingFpmLevel\n        endingFpmLevel\n        masteryLevelChange\n        pointsEarned\n        bonusNumCorrect\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getGradesProgress": "query getGradesProgress($filters: DistrictCourseProgressFilters!) {\n  districtCourseProgressByGrade(filters: $filters) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    learningMinutesTarget {\n      minutesPerWeek\n      __typename\n    }\n    skillsLeveledUp {\n      skillsPerWeek\n      __typename\n    }\n    skillsToProficient {\n      skillsPerWeek\n      __typename\n    }\n    rows {\n      gradeLevel {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "guidePreferences": "query guidePreferences {\n  user {\n    id\n    aiGuidePreferences {\n      readingLevel\n      guideLanguageCode\n      __typename\n    }\n    __typename\n  }\n}",
  "MappedStandardsForContent": "query MappedStandardsForContent($contentDescriptor: String!, $locale: String, $region: String) {\n  standards: standardMappingsForContent(\n    contentDescriptor: $contentDescriptor\n    locale: $locale\n    region: $region\n  ) {\n    setId\n    id\n    standardId\n    description\n    relativeUrl\n    setOfStandards {\n      id\n      isDiscoverable\n      __typename\n    }\n    __typename\n  }\n}",
  "masteryAssignmentsDevAdmin": "query masteryAssignmentsDevAdmin($classCode: String!, $activeFilter: MasteryAssignmentActiveFilter, $curationNodeLevel: MasteryAssignmentCurationNodeLevel) {\n  classroom(classCode: $classCode) {\n    id\n    cacheId\n    masteryAssignments(\n      activeFilter: $activeFilter\n      curationNodeLevel: $curationNodeLevel\n    ) {\n      id\n      type: curationNodeLevel\n      archivedDate\n      assignedDate\n      createdDate\n      dueDate\n      course {\n        id\n        translatedTitle\n        iconUrl\n        relativeUrl\n        __typename\n      }\n      isArchived\n      studentData {\n        kaid\n        status\n        assignedDate\n        completedDate\n        unassignedDate\n        __typename\n      }\n      studentProgress {\n        kaid\n        lastWorkedOn\n        currentMasteryV2 {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        __typename\n      }\n      unit {\n        id\n        translatedTitle\n        iconUrl\n        __typename\n      }\n      __typename\n    }\n    students: studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}",
  "unitMasteryAssignmentChanges": "query unitMasteryAssignmentChanges($assignmentID: ID!, $maxNumChanges: Int!) {\n  unitMasteryAssignmentChanges(\n    assignmentID: $assignmentID\n    maxNumChanges: $maxNumChanges\n  ) {\n    assignmentID\n    type\n    timestamp\n    actor {\n      id\n      kaid\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "getCoachedClassrooms": "query getCoachedClassrooms {\n  user {\n    id\n    coachedClassrooms {\n      id\n      cacheId\n      name\n      descriptor\n      students: studentKaidsAndNicknames {\n        id\n        nickname: coachNickname\n        __typename\n      }\n      countStudents\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictCourseProgressByStudent": "query getDistrictCourseProgressByStudent($filters: DistrictCourseProgressFilters!, $studentKaid: String!, $getKmapTopics: Boolean!, $classroomDescriptor: String!) {\n  districtCourseProgressByCourseForStudent(\n    filters: $filters\n    studentKaid: $studentKaid\n    classroomDescriptor: $classroomDescriptor\n  ) {\n    dateInfo {\n      lastUpdatedDate\n      from\n      upTo\n      __typename\n    }\n    rows {\n      course {\n        id\n        title: translatedTitle\n        __typename\n      }\n      info {\n        averageMinutes\n        activeLearners\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        averageSkillsWorkedOn\n        averageSkillsLeveledUp\n        averageSkillsLeveledToProficient\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  kmapTopics @include(if: $getKmapTopics) {\n    id\n    band\n    bandKey\n    strand\n    strandKey\n    title\n    __typename\n  }\n}",
  "getProgressByTeacher": "query getProgressByTeacher($filters: DistrictCourseProgressFilters!) {\n  districtCourseProgressByTeacher(filters: $filters) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    learningMinutesTarget {\n      minutesPerWeek\n      __typename\n    }\n    skillsLeveledUp {\n      skillsPerWeek\n      __typename\n    }\n    skillsToProficient {\n      skillsPerWeek\n      __typename\n    }\n    rows {\n      user {\n        id\n        kaid\n        userDistrictInfos {\n          id\n          displayNameForTeacher\n          __typename\n        }\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserKhanmigoDonation": "query getUserKhanmigoDonation($kaid: String!) {\n  khanmigoDonation(kaid: $kaid) {\n    donationAmount\n    donationStatus\n    lastModifiedDate\n    __typename\n  }\n}",
  "aiGuideDrafts": "query aiGuideDrafts {\n  aiGuidePrompts {\n    id\n    name\n    latestVersion {\n      id\n      versionNumber\n      __typename\n    }\n    draft {\n      hash\n      isReadyForReview\n      releaseNotes\n      promptText\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuidePrompt": "query aiGuidePrompt($name: String!) {\n  aiGuidePrompt(name: $name) {\n    id\n    name\n    description\n    questions {\n      id\n      questionText\n      __typename\n    }\n    versions {\n      id\n      versionNumber\n      releaseNotes\n      promptText\n      configJSON\n      tokenCount\n      __typename\n    }\n    draft {\n      hash\n      isReadyForReview\n      releaseNotes\n      promptText\n      configJSON\n      tokenCount\n      __typename\n    }\n    source\n    __typename\n  }\n}",
  "aiGuidePrompts": "query aiGuidePrompts {\n  aiGuidePrompts {\n    id\n    name\n    description\n    source\n    latestVersion {\n      id\n      versionNumber\n      tokenCount\n      configJSON\n      __typename\n    }\n    __typename\n  }\n}",
  "classroomStudentNames": "query classroomStudentNames($classroomDescriptor: String!) {\n  classroomByDescriptorV2(descriptor: $classroomDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}\n",
  "getPrecachedDateRanges": "query getPrecachedDateRanges($selectedNodeID: String!) {\n  districtCourseProgressDates(selectedNodeID: $selectedNodeID) {\n    lastUpdatedDate\n    startDate: from\n    endDate: upTo\n    numDays\n    isCustom\n    isInProgress\n    rangeType\n    __typename\n  }\n}",
  "contentPermissionsReport_getUsersWithGrants": "query contentPermissionsReport_getUsersWithGrants($withRoles: [String!]) {\n  usersWithGrants(withRoles: $withRoles) {\n    id\n    kaid\n    email\n    nickname\n    grants {\n      role {\n        name\n        description\n        __typename\n      }\n      scope {\n        contentKind\n        kaLocale\n        __typename\n      }\n      grantingUserEmail\n      permissionId\n      __typename\n    }\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailByUser": "query previewAiGuideDisabledEmailByUser($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailGeneric": "query previewAiGuideDisabledEmailGeneric($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailInsufficientDonation": "query previewAiGuideDisabledEmailInsufficientDonation($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailLapsedDonation": "query previewAiGuideDisabledEmailLapsedDonation($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailModeration": "query previewAiGuideDisabledEmailModeration($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideNotEligibleEmailModeration": "query previewAiGuideNotEligibleEmailModeration($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideNotEligibleEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideNotEligibleEmailNotAnAdult": "query previewAiGuideNotEligibleEmailNotAnAdult($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideNotEligibleEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideNotEligibleEmailTooManyChildren": "query previewAiGuideNotEligibleEmailTooManyChildren($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideNotEligibleEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "previewAiGuideNotEligibleEmailUnsupportedCountry": "query previewAiGuideNotEligibleEmailUnsupportedCountry($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideNotEligibleEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "GetProgressByCourseForStudent": "query GetProgressByCourseForStudent($filters: TeacherOverviewReportFilters!, $studentKaid: String!) {\n  teacherOverviewByCourseForStudentReport(\n    filters: $filters\n    studentKaid: $studentKaid\n  ) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    rows {\n      course {\n        id\n        translatedTitle\n        __typename\n      }\n      info {\n        minutes\n        leveledToProficient\n        leveledUp\n        workedOn\n        attempted\n        familiar\n        proficient\n        mastered\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetProgressByStudent": "query GetProgressByStudent($filters: TeacherOverviewReportFilters!, $classDescriptor: String!) {\n  teacherOverviewByStudentReport(filters: $filters) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    learningMinutesTarget {\n      minutesPerWeek\n      __typename\n    }\n    skillsLeveledUp {\n      skillsPerWeek\n      __typename\n    }\n    skillsToProficient {\n      skillsPerWeek\n      __typename\n    }\n    rows {\n      user {\n        id\n        kaid\n        __typename\n      }\n      info {\n        minutes\n        leveledToProficient\n        leveledUp\n        workedOn\n        attempted\n        familiar\n        proficient\n        mastered\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    id\n    cacheId\n    studentKaidsAndNicknames {\n      id\n      kaid\n      coachNickname\n      __typename\n    }\n    __typename\n  }\n}",
  "getNonProfileKhanmigoEligibilityData": "query getNonProfileKhanmigoEligibilityData {\n  user {\n    id\n    isAIGuideEnabled\n    aiGuideDisabledReason\n    isEnrolledInAIGuide\n    children {\n      id\n      classrooms {\n        id\n        cacheId\n        __typename\n      }\n      __typename\n    }\n    age\n    hasKhanmigoViaClassy\n    hasKhanmigoViaStripe\n    __typename\n  }\n}",
  "GetProgressBySkillForStudentForCourse": "query GetProgressBySkillForStudentForCourse($filters: TeacherOverviewReportFilters!, $studentKaid: String!, $courseId: String!) {\n  teacherOverviewBySkillForStudentForCourseReport(\n    filters: $filters\n    studentKaid: $studentKaid\n  ) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    rows {\n      skill {\n        id\n        translatedTitle\n        __typename\n      }\n      info {\n        leveledUp\n        leveledToProficient\n        attempted\n        familiar\n        proficient\n        mastered\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  courseById(id: $courseId) {\n    id\n    unitChildren {\n      id\n      translatedTitle\n      filteredContent(kinds: [\"Exercise\"]) {\n        __typename\n        id\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailTrialEnded": "query previewAiGuideDisabledEmailTrialEnded($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "allClassroomCoachedStudentNames": "query allClassroomCoachedStudentNames {\n  user {\n    id\n    coachedClassrooms {\n      descriptor\n      cacheId\n      id\n      studentKaidsAndNicknames {\n        id\n        coachNickname\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "previewAiGuideDisabledEmailChildrenInClassroom": "query previewAiGuideDisabledEmailChildrenInClassroom($reason: ReasonForDisablingAIGuide!) {\n  preview: previewAiGuideDisabledEmail(reason: $reason) {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "getMasteryAssignmentStudentProgress": "query getMasteryAssignmentStudentProgress($classCode: String!, $descriptors: [MasteryAssignmentDescriptor!]!) {\n  classroom(classCode: $classCode) {\n    id\n    cacheId\n    masteryAssignments: masteryAssignmentsByDescriptors(descriptors: $descriptors) {\n      id\n      type: curationNodeLevel\n      studentProgress {\n        kaid\n        currentMasteryV2 {\n          percentage\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "CourseIntroContent": "query CourseIntroContent($descriptor: String!) {\n  learnableContentByDescriptors(contentDescriptors: [$descriptor]) {\n    id\n    defaultUrlPath\n    contentKind\n    ... on Video {\n      duration\n      thumbnailUrl\n      __typename\n    }\n    __typename\n  }\n}",
  "CourseIntroCurationNode": "query CourseIntroCurationNode($id: String!) {\n  topicById(id: $id) {\n    id\n    relativeUrl\n    __typename\n  }\n}",
  "getUserInterests": "query getUserInterests($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    isCollectingInterests\n    aiGuideUserInterests {\n      interest\n      combinedKey\n      __typename\n    }\n    __typename\n  }\n}",
  "GetAllSetsOfStandardsForRegion": "query GetAllSetsOfStandardsForRegion($regionSlug: String!, $domain: String!, $isDiscoverable: Boolean) {\n  standardRegions(isDiscoverable: $isDiscoverable, slug: $regionSlug) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    standardRegion {\n      id\n      imageUrl\n      isDiscoverable\n      __typename\n    }\n    __typename\n  }\n  allSetsOfStandards(\n    domain: $domain\n    isDiscoverable: $isDiscoverable\n    regionSlug: $regionSlug\n  ) {\n    id\n    name\n    courseEntities {\n      id\n      relativeUrl\n      standaloneTitle\n      __typename\n    }\n    standards {\n      id\n      setId\n      standardId\n      description\n      children\n      relativeUrl\n      mappedContent {\n        ... on LearnableContent {\n          id\n          contentKind\n          title\n          defaultUrlPath\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    domains\n    __typename\n  }\n}",
  "GetSetOfStandards": "query GetSetOfStandards($setId: String!, $region: String) {\n  setOfStandards(setId: $setId, region: $region) {\n    id\n    isDiscoverable\n    name\n    standardRegionIds\n    domains\n    standards {\n      id\n      standardId\n      description\n      coverage\n      children\n      groupLabel\n      mappedContent {\n        ... on LearnableContent {\n          id\n          contentKind\n          title\n          urlWithinStandardSet(setId: $setId)\n          defaultUrlPath\n          __typename\n        }\n        ... on Exercise {\n          interimAssessmentType\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetStandardRegionsForUS": "query GetStandardRegionsForUS($isDiscoverable: Boolean) {\n  standardRegions(isDiscoverable: $isDiscoverable) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    standardRegion {\n      id\n      isDiscoverable\n      slug\n      __typename\n    }\n    __typename\n  }\n}\n",
  "courseProgress": "query courseProgress($ids: [String!]!) {\n  user {\n    id\n    courseProgressesV2(courseIds: $ids) {\n      topic {\n        domainSlug\n        iconPath\n        id\n        slug\n        title\n        relativeUrl\n        __typename\n      }\n      unitProgresses {\n        lastWorkedOn\n        topic {\n          id\n          iconPath\n          title\n          relativeUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseProgressQuery": "query courseProgressQuery($topicId: String!) {\n  user {\n    id\n    courseProgress(topicId: $topicId) {\n      currentMasteryV2 {\n        percentage\n        pointsEarned\n        __typename\n      }\n      masteryMap {\n        progressKey\n        status\n        __typename\n      }\n      unitProgresses {\n        currentMasteryV2 {\n          percentage\n          pointsEarned\n          __typename\n        }\n        unitId\n        __typename\n      }\n      __typename\n    }\n    exerciseData {\n      masteryChallengeStatus(courseId: $topicId) {\n        totalQuestions\n        isEligible\n        currentAttempt {\n          id\n          canResume\n          timeLeftSeconds\n          expirationTime\n          expirationPeriodHours\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    latestCourseChallengeAttempt(courseId: $topicId) {\n      id\n      numAttempted\n      numCorrect\n      completedDate\n      canResume\n      isCompleted\n      __typename\n    }\n    __typename\n  }\n}",
  "districtHasKhanmigo": "query districtHasKhanmigo($districtId: ID!) {\n  districtById(districtId: $districtId) {\n    id\n    hasKhanmigo\n    __typename\n  }\n}",
  "isEligibleForMasteryChallenge": "query isEligibleForMasteryChallenge($courseId: String!) {\n  user {\n    id\n    exerciseData {\n      masteryChallengeStatus(courseId: $courseId) {\n        isEligible\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "standardRegionsForRegionPickerQuery": "query standardRegionsForRegionPickerQuery {\n  standardRegions {\n    standardRegion {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "AllContentIcons": "query AllContentIcons {\n  allDomains {\n    id\n    iconUrl\n    relativeUrl\n    courseChildren {\n      id\n      iconUrl\n      relativeUrl\n      unitChildren {\n        id\n        iconUrl\n        relativeUrl\n        lessonChildren {\n          id\n          iconUrl\n          relativeUrl\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "StudentKMapGoals": "query StudentKMapGoals($kaid: String, $isPast: Boolean!, $classDescriptor: String) {\n  user(kaid: $kaid) {\n    id\n    hasTakenKmapExam\n    courseMasteryAssignments(\n      filter: KMAP\n      isPast: $isPast\n      classroomDescriptor: $classDescriptor\n    ) {\n      id\n      activeStudentDataV2 {\n        kaid\n        assignedDate\n        __typename\n      }\n      isKmap\n      isPast\n      whyPastV2\n      whenPast\n      whenCompleted\n      classroom {\n        id\n        cacheId\n        name\n        coach {\n          id\n          kaid\n          __typename\n        }\n        __typename\n      }\n      dueDate\n      topic {\n        ... on KMapTopic {\n          strandKey\n          band\n          strand\n          mapGrowthTest {\n            key\n            __typename\n          }\n          __typename\n        }\n        id\n        slug\n        domainSlug\n        translatedTitle\n        largeIconPath\n        __typename\n      }\n      currentUserProgressV2 {\n        currentMasteryV2 {\n          percentage\n          pointsEarned\n          pointsAvailable\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "classroomCreatedOnQuery": "query classroomCreatedOnQuery($classCode: String!) {\n  classroom(classCode: $classCode) {\n    cacheId\n    createdOn\n    id\n    __typename\n  }\n}",
  "districtLastNKhanmigoJobs": "query districtLastNKhanmigoJobs($districtId: ID!, $includedDryRun: Boolean!, $numJobs: Int!) {\n  districtById(districtId: $districtId) {\n    id\n    lastNKhanmigoJobs(includeDryRun: $includedDryRun, numJobs: $numJobs) {\n      createdAt\n      rosterSource\n      timeSpentSeconds\n      dryRunStatus\n      khanmigoStudents\n      khanmigoAddedStudents\n      khanmigoRemovedStudents\n      khanmigoTeachers\n      khanmigoAddedTeachers\n      khanmigoRemovedTeachers\n      khanmigoSchoolAdmins\n      khanmigoAddedSchoolAdmins\n      khanmigoRemovedSchoolAdmins\n      khanmigoDistrictAdmins\n      khanmigoAddedDistrictAdmins\n      khanmigoRemovedDistrictAdmins\n      khanmigoTotal\n      khanmigoAddedTotal\n      khanmigoRemovedTotal\n      __typename\n    }\n    __typename\n  }\n}",
  "getStandardsDataForLocaleRegionAndDomain": "query getStandardsDataForLocaleRegionAndDomain($locale: String, $region: String, $domain: String) {\n  allSetsOfStandards(locale: $locale, region: $region, domain: $domain) {\n    id\n    isDiscoverable\n    name\n    shortName\n    standards {\n      id\n      standardId\n      description\n      children\n      relativeUrl\n      __typename\n    }\n    __typename\n  }\n}",
  "allProducts": "query allProducts {\n  allProducts {\n    id\n    name\n    isActive\n    description\n    extProductID\n    validationBillingCountries\n    __typename\n  }\n}",
  "product": "query product($id: ID) {\n  product(id: $id) {\n    id\n    name\n    isActive\n    description\n    extProductID\n    validationBillingCountries\n    prices {\n      currency\n      extProductID\n      id\n      recurringInterval\n      recurringIntervalCount\n      type\n      unitAmount\n      __typename\n    }\n    __typename\n  }\n}",
  "GetStandardRegionsForCountry": "query GetStandardRegionsForCountry($country: String!, $isDiscoverable: Boolean) {\n  standardRegions(country: $country, isDiscoverable: $isDiscoverable) {\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    standardRegion {\n      id\n      isDiscoverable\n      slug\n      __typename\n    }\n    __typename\n  }\n}",
  "TranslationEditor_GetContentForDescriptors": "query TranslationEditor_GetContentForDescriptors($contentDescriptors: [String!]!) {\n  contentForDescriptors(descriptors: $contentDescriptors) {\n    id\n    parentTopic {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "ActivitiesQuery": "query ActivitiesQuery {\n  courseById(id: \"x1b615e2cf0b0f17f\") {\n    id\n    unitChildren {\n      id\n      listed\n      translatedTitle\n      lessonChildren {\n        id\n        iconUrl\n        translatedTitle\n        allLearnableContent {\n          id\n          slug\n          translatedTitle\n          defaultUrlPath\n          contentDescriptor\n          ... on AIGuideActivity {\n            persona\n            activityType\n            isAssignable\n            worksInMobileApp\n            worksOnSmallLayouts\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getStudentExerciseContentReport_CourseChallenge": "query getStudentExerciseContentReport_CourseChallenge($assignmentId: String!) {\n  student: user {\n    id\n    kaid\n    nickname\n    assignment(id: $assignmentId) {\n      id\n      assignedDate\n      contents {\n        id\n        translatedTitle\n        __typename\n      }\n      itemCompletionStates {\n        assessmentItemsForAssessment {\n          id\n          contentId\n          itemData\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "hasCooldown": "query hasCooldown {\n  user {\n    id\n    hasCooldown\n    __typename\n  }\n}",
  "ContentCarouselContent": "query ContentCarouselContent($descriptors: [String!]!) {\n  learnableContentByDescriptors(contentDescriptors: $descriptors) {\n    id\n    translatedTitle\n    contentKind\n    thumbnailUrl\n    urlWithinCurationNode(ancestorId: \"xf191fa455939c8e1\")\n    ... on Video {\n      duration\n      __typename\n    }\n    parentTopic {\n      id\n      slug\n      translatedTitle\n      parent {\n        id\n        relativeUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTokenCount": "query getTokenCount($promptText: String!) {\n  getTokenCount(promptText: $promptText)\n}",
  "devadminStringTranslation": "query devadminStringTranslation($message: String!, $messageContext: String, $kaLocale: KALocale!) {\n  stringTranslationUncached(\n    message: $message\n    messageContext: $messageContext\n    kaLocale: $kaLocale\n  ) {\n    found\n    isAITranslated\n    isNewTranslation\n    translation\n    __typename\n  }\n}",
  "getInterestsCollectionStatus": "query getInterestsCollectionStatus {\n  user {\n    id\n    isCollectingInterests\n    __typename\n  }\n}",
  "Content_GetPrerequisiteExercises": "query Content_GetPrerequisiteExercises($slugs: [String!]!) {\n  exercisesBySlugs(slugs: $slugs) {\n    id\n    slug\n    translatedTitle\n    translatedDescription\n    mappedStandards {\n      id\n      standardId\n      __typename\n    }\n    __typename\n  }\n}",
  "getKhanmigoEnabled": "query getKhanmigoEnabled {\n  user {\n    id\n    hasAccessToAIGuideLearner\n    isAIGuideEnabled\n    __typename\n  }\n}",
  "getMasteryAssignmentMedianProgress": "query getMasteryAssignmentMedianProgress($classCode: String!, $id: ID!, $curationNodeLevel: MasteryAssignmentCurationNodeLevel!) {\n  classroom(classCode: $classCode) {\n    id\n    cacheId\n    masteryAssignments: masteryAssignmentsByDescriptors(\n      descriptors: [{id: $id, curationNodeLevel: $curationNodeLevel}]\n    ) {\n      id\n      studentProgressMedian\n      __typename\n    }\n    __typename\n  }\n}",
  "learnableContentPathQuery": "query learnableContentPathQuery($id: String!, $kind: String!) {\n  learnableContent(id: $id, kind: $kind) {\n    id\n    defaultUrlPath\n    __typename\n  }\n}",
  "getStringTranslation": "query getStringTranslation($message: String!, $messageContext: String, $messageLocation: String!, $kaLocale: KALocale!) {\n  stringTranslation(\n    message: $message\n    messageContext: $messageContext\n    messageLocation: $messageLocation\n    kaLocale: $kaLocale\n  ) {\n    translation\n    found\n    isAITranslated\n    isNewTranslation\n    __typename\n  }\n}",
  "contentEditorGetChallengeRevision": "query contentEditorGetChallengeRevision($id: String!) {\n  challengeRevisionById(id: $id) {\n    id\n    contentId\n    contentKind\n    description\n    listed\n    title\n    sha\n    code\n    tests\n    doNotPublish\n    __typename\n  }\n}",
  "previewAiGuideDisabledDuringDistrictActivationEmail": "query previewAiGuideDisabledDuringDistrictActivationEmail {\n  preview: previewAiGuideDisabledDuringDistrictActivationEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "TranslationEditor_GetAIGuideActivityStrings": "query TranslationEditor_GetAIGuideActivityStrings($contentDescriptor: String!) {\n  contentForDescriptors(descriptors: [$contentDescriptor]) {\n    id\n    defaultUrlPath\n    listed\n    title\n    __typename\n  }\n}",
  "previewDistrictKhamigoSevereFlagNotificationEmail": "query previewDistrictKhamigoSevereFlagNotificationEmail {\n  preview: previewDistrictKhamigoSevereFlagNotificationEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "challengeEditorQuery": "query challengeEditorQuery($contentId: String!) {\n  challengeRevisionById(id: $contentId) {\n    ...ChallengeRevision\n    __typename\n  }\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isEditableByCurrentUser(contentId: $contentId, contentKind: \"Challenge\")\n  isPublishableByCurrentUser(contentId: $contentId, contentKind: \"Challenge\")\n}\n\nfragment ChallengeRevision on ChallengeRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  authorName\n  code\n  codeFormat\n  tests\n  testsFormat\n  height\n  width\n  userAuthoredContentType\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "projectEditorQuery": "query projectEditorQuery($contentId: String!) {\n  projectRevisionById(id: $contentId) {\n    ...ProjectRevision\n    __typename\n  }\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isEditableByCurrentUser(contentId: $contentId, contentKind: \"Project\")\n  isPublishableByCurrentUser(contentId: $contentId, contentKind: \"Project\")\n}\n\nfragment ProjectRevision on ProjectRevision {\n  id\n  contentId\n  contentKind\n  sha\n  doNotPublish\n  slug\n  listed\n  title\n  description\n  projectEval\n  authorName\n  code\n  codeFormat\n  customTitleTag\n  customDescriptionTag\n  sourceKaLocale\n  __typename\n}",
  "getAdminsForDistrict": "query getAdminsForDistrict($districtID: String!) {\n  getAdminsForDistrict(districtID: $districtID) {\n    id\n    uuid\n    displayNameForTeacher\n    districtProvidedEmail\n    kaid\n    moderatorOfSchools {\n      id\n      __typename\n    }\n    adminOfSchools {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "getKhanmigoModeratorsForDistrict": "query getKhanmigoModeratorsForDistrict($districtID: String!) {\n  getKhanmigoModeratorsForDistrict(districtID: $districtID) {\n    id\n    uuid\n    displayNameForTeacher\n    kaid\n    moderatorOfSchools {\n      id\n      name\n      __typename\n    }\n    adminOfSchools {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "LearnPrototype_UserClassrooms": "query LearnPrototype_UserClassrooms {\n  user {\n    id\n    classrooms {\n      id\n      cacheId\n      name\n      descriptor\n      topics {\n        id\n        translatedTitle\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideOwnedSwagQuery": "query aiGuideOwnedSwagQuery {\n  user {\n    id\n    aiGuideSwagOwned {\n      id\n      name\n      altText\n      description\n      price\n      __typename\n    }\n    __typename\n  }\n}",
  "aiGuideSwagQuery": "query aiGuideSwagQuery {\n  aiGuideSwag {\n    id\n    name\n    altText\n    description\n    price\n    __typename\n  }\n}",
  "activeEssaySession": "query activeEssaySession {\n  activeEssaySession {\n    draft {\n      feedbackList {\n        _: id\n        feedbackID\n        dimension\n        feedbackText\n        isPositive\n        isResolved\n        relevantParagraphId\n        relevantQuotedText\n        thread {\n          id\n          interactions {\n            answer\n            annotations\n            flagged\n            id\n            question\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      id\n      submittedText\n      __typename\n    }\n    essayInstructions\n    id\n    mostRecentEditedText\n    essayVersion\n    paragraphIDToParagraphNumbers {\n      paragraphID\n      paragraphNumbers\n      __typename\n    }\n    studentGradeLevel\n    __typename\n  }\n}",
  "getUserAdminOfSchools": "query getUserAdminOfSchools {\n  user {\n    id\n    userDistrictInfos {\n      id\n      adminOfSchools {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminGetKhanmigoModeratorsForDistrict": "query devadminGetKhanmigoModeratorsForDistrict($districtID: String!) {\n  getKhanmigoModeratorsForDistrict(districtID: $districtID) {\n    id\n    displayNameForTeacher\n    moderatorOfSchools {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "AssignmentsPageForContentItems": "query AssignmentsPageForContentItems($contentDescriptors: [String!]!, $cursor: ID, $pageSize: Int) {\n  user {\n    id\n    assignmentsPageForContentItems(\n      contentDescriptors: $contentDescriptors\n      after: $cursor\n      pageSize: $pageSize\n    ) {\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      assignments {\n        id\n        dueDate\n        title\n        itemCompletionStates {\n          studentKaid\n          completedOn\n          __typename\n        }\n        contents {\n          ... on AIGuideActivity {\n            id\n            contentId\n            slug\n            translatedTitle\n            activityType\n            defaultUrlPath\n            __typename\n          }\n          __typename\n        }\n        classroom {\n          cacheId\n          id\n          name\n          descriptor\n          coach {\n            id\n            nickname\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictDisallowDiscussions": "query getDistrictDisallowDiscussions {\n  user {\n    id\n    districtDisallowDiscussions\n    __typename\n  }\n}",
  "getIndexedContentSearchResults": "query getIndexedContentSearchResults($query: String!, $allowedTopicAncestors: [String], $contentKinds: [String], $pageNum: Int) {\n  searchPage(\n    query: $query\n    allowedTopicAncestors: $allowedTopicAncestors\n    contentKinds: $contentKinds\n    pageNum: $pageNum\n  ) {\n    metadata {\n      currentPage\n      numPages\n      resultCount\n      __typename\n    }\n    pageInfo {\n      nextCursor\n      __typename\n    }\n    results {\n      contentId\n      kind\n      curationNode {\n        id\n        iconPath\n        title\n        translatedTitle\n        description\n        translatedDescription\n        domainSlug\n        contentKind\n        relativeUrl\n        parent {\n          id\n          iconPath\n          contentKind\n          title\n          translatedTitle\n          parent {\n            id\n            iconPath\n            contentKind\n            title\n            translatedTitle\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      learnableContent {\n        id\n        title\n        translatedTitle\n        description\n        translatedDescription\n        defaultUrlPath\n        parentTopic {\n          id\n          domainSlug\n          title\n          translatedTitle\n          contentKind\n          iconPath\n          parent {\n            id\n            title\n            translatedTitle\n            contentKind\n            relativeUrl\n            iconPath\n            parent {\n              id\n              title\n              translatedTitle\n              contentKind\n              relativeUrl\n              iconPath\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "exerciseEditorQuery": "query exerciseEditorQuery($contentId: String!) {\n  exerciseRevisionById(id: $contentId) {\n    ...ExerciseRevision\n    __typename\n  }\n  exerciseById(id: $contentId) {\n    id\n    contentId\n    assessmentItems {\n      id\n      contentId\n      sha\n      __typename\n    }\n    __typename\n  }\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isEditableByCurrentUser(contentId: $contentId, contentKind: \"Exercise\")\n  isPublishableByCurrentUser(contentId: $contentId, contentKind: \"Exercise\")\n  user {\n    id\n    nickname\n    __typename\n  }\n}\n\nfragment AssessmentItemRevision on AssessmentItemRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  name\n  authorNames\n  itemData\n  itemShapeType\n  perseusApiMajorVersion\n  requiresScreenOrMouse\n  aiGenerated\n  tags\n  __typename\n}\n\nfragment ExerciseRevision on ExerciseRevision {\n  id\n  contentKind\n  contentId\n  sha\n  creationDate\n  authorKey\n  doNotPublish\n  sourceKaLocale\n  sourceLanguage: sourceKaLocale\n  slug\n  name: slug\n  title\n  displayName: title\n  prettyDisplayName: title\n  description\n  descriptionHtml: description\n  customTitleTag\n  customDescriptionTag\n  thumbnailData\n  thumbnailCache\n  sponsored\n  alternateSlugs\n  authorName\n  covers\n  prerequisites\n  relatedContent\n  assessmentItemTags\n  difficultyLevel\n  suggestedCompletionCriteria\n  trackingDocumentUrl\n  problemTypeKind\n  interimAssessmentType\n  numQuestionsPerProblemType\n  problemTypes {\n    contentId\n    name\n    relatedVideos\n    items {\n      id\n      sha\n      perseusApiMajorVersion\n      requiresScreenOrMouse\n      aiGenerated\n      __typename\n    }\n    __typename\n  }\n  assessmentItems {\n    ...AssessmentItemRevision\n    __typename\n  }\n  listed\n  hasLintErrors\n  __typename\n}",
  "getSatAccountSettings": "query getSatAccountSettings($targetKaid: String) {\n  target: user(kaid: $targetKaid) {\n    id\n    isChild\n    isSatStudent\n    satStudent(id: $targetKaid) {\n      id\n      cbLinked\n      extraTimeSections\n      timePercentMultiplier\n      __typename\n    }\n    __typename\n  }\n  chronomancer {\n    isCollegeBoardIntegrationEnabled\n    __typename\n  }\n}",
  "allCoacheeNames": "query allCoacheeNames {\n  user {\n    id\n    coachedClassrooms {\n      descriptor\n      cacheId\n      id\n      studentKaidsAndNicknames {\n        id\n        coachNickname\n        __typename\n      }\n      __typename\n    }\n    children {\n      id\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "courseChallengeCsvQuery": "query courseChallengeCsvQuery($assignmentId: String!, $teacherKaid: String) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      id\n      itemCompletionStates: itemCompletionStatesForAllStudents {\n        completedOn\n        student {\n          id\n          coachNickname(teacherKaid: $teacherKaid)\n          __typename\n        }\n        bestScoreSkills {\n          levelChanges {\n            id\n            after\n            changeDirection\n            exercise {\n              id\n              translatedTitle\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      studentList {\n        id\n        cacheId\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "ActivitySessionsV2Query": "query ActivitySessionsV2Query($studentKaid: String!, $endDate: Date, $startDate: Date, $courseType: String, $activityKind: String, $after: ID, $pageSize: Int) {\n  user(kaid: $studentKaid) {\n    id\n    activityLogV2(\n      endDate: $endDate\n      startDate: $startDate\n      courseType: $courseType\n      activityKind: $activityKind\n    ) {\n      time {\n        exerciseMinutes\n        totalMinutes\n        __typename\n      }\n      activitySessions(pageSize: $pageSize, after: $after) {\n        sessions {\n          ...ActivitySession\n          ... on BasicActivitySession {\n            aiGuideThread {\n              title\n              id\n              __typename\n            }\n            essaySession {\n              essayTitle\n              id\n              __typename\n            }\n            __typename\n          }\n          ... on MasteryActivitySession {\n            correctCount\n            problemCount\n            skillLevels {\n              ...ActivitySessionSkillLevels\n              exercise {\n                id\n                translatedTitle\n                __typename\n              }\n              __typename\n            }\n            task {\n              id\n              isRestarted\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        pageInfo {\n          nextCursor\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ActivitySession on ActivitySession {\n  id\n  title\n  subtitle\n  activityKind {\n    id\n    __typename\n  }\n  durationMinutes\n  eventTimestamp\n  skillType\n  __typename\n}\n\nfragment ActivitySessionSkillLevels on SkillLevelChange {\n  id\n  before\n  after\n  __typename\n}",
  "aiGuideConversionTrialInfo": "query aiGuideConversionTrialInfo {\n  user {\n    id\n    age\n    aiGuideAccessPlans {\n      id\n      isActive\n      enrollmentGroup\n      __typename\n    }\n    isAIGuideEnabled\n    includesDistrictOwnedData\n    __typename\n  }\n}",
  "pythonProgramQuery": "query pythonProgramQuery($programId: String!) {\n  program: programById(id: $programId) {\n    byChild\n    category\n    codeFormat\n    created\n    author {\n      id\n      nickname\n      profileRoot\n      profile {\n        accessLevel\n        __typename\n      }\n      __typename\n    }\n    hiddenEverywhere: deleted\n    description\n    spinoffCount: displayableSpinoffCount\n    docsUrlPath\n    flags\n    flaggedByKaids\n    isFlaggedByCurrentUser\n    height\n    hiddenFromHotlist: hideFromHotlist\n    id\n    imagePath\n    originIsProject\n    isOwner\n    authorKaid\n    key\n    newUrlPath\n    originProgram {\n      deleted\n      translatedTitle\n      url\n      __typename\n    }\n    restrictPosting\n    latestRevision {\n      id\n      code\n      configVersion\n      created\n      editorType\n      folds\n      __typename\n    }\n    slug\n    sumVotesIncremented\n    title\n    parentCurationNode {\n      id\n      slug\n      relativeUrl\n      slug\n      translatedTitle\n      __typename\n    }\n    translatedTitle\n    url\n    userAuthoredContentType\n    upVoted\n    width\n    definitelyNotSpam\n    __typename\n  }\n}",
  "allFolders": "query allFolders {\n  allFolders {\n    id\n    name\n    __typename\n  }\n}",
  "khanLibraryCanCreateCourses": "query khanLibraryCanCreateCourses($folderId: String!) {\n  user {\n    id\n    canCreateCourses: hasContentPermission(\n      name: \"can_create_courses\"\n      contentScope: {contentKind: TOPIC, folderId: $folderId}\n    )\n    canEditDomains: hasPermission(\n      name: \"can_edit_domain_properties\"\n      scope: ANY_ON_CURRENT_LOCALE\n    )\n    __typename\n  }\n}",
  "getFocusModeByClass": "query getFocusModeByClass($descriptor: String!) {\n  classroom: classroomByDescriptorV2(descriptor: $descriptor) {\n    id\n    cacheId\n    classroomDistrictInfo {\n      id\n      district {\n        id\n        __typename\n      }\n      __typename\n    }\n    students {\n      id\n      kaid\n      coachNickname\n      isAIGuideEnabled\n      cooldownStatus {\n        hasTeacherDirectedCooldown\n        teacherDirectedCooldownExpiresAt\n        teacherDirectedCooldownStartedBy {\n          id\n          kaid\n          nickname\n          __typename\n        }\n        __typename\n      }\n      userDistrictInfos {\n        id\n        district {\n          id\n          __typename\n        }\n        khanmigoShould\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCooldownStatus": "query getCooldownStatus {\n  user {\n    id\n    hasCooldown\n    cooldownStatus {\n      hasAntiCheatCooldown\n      lastAntiCheatCooldownExpiresAt\n      hasTeacherDirectedCooldown\n      teacherDirectedCooldownExpiresAt\n      teacherDirectedCooldownStartedBy {\n        id\n        kaid\n        nickname\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorAdminCourseSnapshotJsons": "query courseEditorAdminCourseSnapshotJsons($courseId: String!) {\n  courseSnapshotJsonsByCourseId(id: $courseId)\n}",
  "GuideExtensionAllowedUrls": "query GuideExtensionAllowedUrls {\n  allowedUrlList {\n    allowedURLS {\n      pattern\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorAdminCourseOperationJsons": "query courseEditorAdminCourseOperationJsons($courseId: String!) {\n  courseOperationJsonsByCourseId(id: $courseId)\n}",
  "GuideExtensionIsUserK4DStudent": "query GuideExtensionIsUserK4DStudent {\n  user {\n    id\n    kaid\n    isK4dStudent\n    __typename\n  }\n}",
  "khanmigoEnabledForUserQuery": "query khanmigoEnabledForUserQuery {\n  coach: user {\n    id\n    isAIGuideEnabled\n    __typename\n  }\n}",
  "getAdminsForInProductAdminRostering": "query getAdminsForInProductAdminRostering($partnershipID: ID!, $districtID: ID!) {\n  getVisibleAdminUDIs(\n    partnershipID: $partnershipID\n    districtID: $districtID\n    allowPartial: true\n  ) {\n    id\n    displayNameForTeacher\n    districtProvidedEmail\n    districtProvidedFirstName\n    districtProvidedLastName\n    district {\n      id\n      name\n      __typename\n    }\n    primaryRole\n    canManageAdmins\n    canSeeAllSchools\n    activationEmailSentAt\n    rosterSource\n    cleverId\n    classlinkId\n    kaid\n    adminOfSchools(onlyVisible: true) {\n      id\n      name\n      __typename\n    }\n    hasAdminDirectedInfo\n    __typename\n  }\n  getVisibleUMIs(partnershipID: $partnershipID) {\n    id\n    email\n    firstName\n    lastName\n    displayName\n    canManageAdmins\n    activationEmailSentAt\n    kaid\n    adminOf(administeredOnly: true) {\n      ... on MetaDistrict {\n        id\n        name\n        __typename\n      }\n      ... on District {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    adminOfHeight\n    __typename\n  }\n}",
  "getKhanmigoCheckoutVideo": "query getKhanmigoCheckoutVideo($contentId: String!) {\n  videoById(contentId: $contentId) {\n    id\n    assessmentItemTags\n    contentKind\n    defaultUrlPath\n    kind\n    nodeSlug\n    slug\n    sponsored\n    title\n    translatedDescription\n    translatedTitle\n    translatedCustomTitleTag\n    authorNames\n    authorList {\n      name\n      __typename\n    }\n    clarificationsEnabled\n    creationDate\n    dateAdded\n    description\n    descriptionHtml\n    downloadUrls\n    duration\n    imageUrl\n    kaUrl\n    kaUserLicense\n    keywords\n    readableId\n    relativeUrl\n    sha\n    thumbnailUrls {\n      category\n      url\n      __typename\n    }\n    translatedDescriptionHtml\n    translatedYoutubeId\n    translatedYoutubeLang\n    youtubeId\n    augmentedTranscript\n    __typename\n  }\n}",
  "getNonProfileKhanmigoCheckoutEligibilityData": "query getNonProfileKhanmigoCheckoutEligibilityData {\n  user {\n    id\n    children {\n      id\n      __typename\n    }\n    age\n    hasKhanmigoViaStripe\n    __typename\n  }\n}",
  "contentEditorGetAIGuideActivityRevision": "query contentEditorGetAIGuideActivityRevision($id: String!) {\n  aiGuideActivityRevisionById(id: $id) {\n    ...AIGuideActivityRevision\n    __typename\n  }\n}\n\nfragment AIGuideActivityRevision on AIGuideActivityRevision {\n  id\n  contentId\n  contentKind\n  slug\n  sha\n  listed\n  __typename\n}",
  "GuideExtensionUserDistrictStatus": "query GuideExtensionUserDistrictStatus {\n  user {\n    id\n    kaid\n    isK4dStudent\n    isKmapStudent\n    isK4dTeacher\n    isKmapTeacher\n    __typename\n  }\n}",
  "assignmentData": "query assignmentData($assignmentID: String!) {\n  user {\n    id\n    assignment(id: $assignmentID) {\n      id\n      title\n      itemCompletionStates {\n        studentKaid\n        completedOn\n        activitySubmissions {\n          threadID\n          __typename\n        }\n        __typename\n      }\n      classroom {\n        id\n        cacheId\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoActivity": "query districtKhanmigoActivity($filter: KhanmigoDistrictFilters!) {\n  districtKhanmigoActivity(filter: $filter) {\n    totalUsers\n    rows {\n      activityType\n      aIGuideActivity {\n        id\n        translatedTitle\n        __typename\n      }\n      aiReportingLabel {\n        id\n        translatedTitle\n        __typename\n      }\n      totalUsers\n      userPercentage\n      courseRows {\n        course {\n          id\n          translatedTitle\n          __typename\n        }\n        totalUsers\n        userPercentage\n        unitRows {\n          unit {\n            id\n            translatedTitle\n            __typename\n          }\n          totalUsers\n          userPercentage\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetPartnership": "query GetPartnership($partnershipID: ID!) {\n  getPartnershipById(partnershipId: $partnershipID) {\n    ... on MetaDistrict {\n      id\n      name\n      ancestors {\n        id\n        name\n        __typename\n      }\n      levelLabel\n      levelHeight\n      countryCode\n      descendants {\n        ... on MetaDistrict {\n          id\n          parent {\n            id\n            __typename\n          }\n          name\n          levelLabel\n          levelHeight\n          __typename\n        }\n        ... on District {\n          id\n          parent {\n            id\n            __typename\n          }\n          name\n          levelLabel\n          levelHeight\n          countryCode\n          rosterSyncingEnabled\n          khanmigoPreference\n          isTest\n          goLiveDate\n          schoolYearStart\n          schoolYearEnd\n          schools {\n            id\n            name\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    ... on District {\n      id\n      name\n      ancestors {\n        id\n        name\n        __typename\n      }\n      levelLabel\n      levelHeight\n      countryCode\n      rosterSyncingEnabled\n      khanmigoPreference\n      isTest\n      goLiveDate\n      schoolYearStart\n      schoolYearEnd\n      schools {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetPartnerships": "query GetPartnerships($countryCodes: [String!], $includeDeleted: Boolean!, $onlyTeacherDirected: Boolean!) {\n  getPartnerships(\n    countryCodes: $countryCodes\n    includeDeleted: $includeDeleted\n    onlyTeacherDirected: $onlyTeacherDirected\n  ) {\n    ... on MetaDistrict {\n      id\n      name\n      countryCode\n      inferredAttributes {\n        rosterSyncingEnabled\n        isRosterSyncingEnabledConsistent\n        khanmigoPreference\n        isKhanmigoPreferenceConsistent\n        isTest\n        isTestConsistent\n        goLiveDate\n        isGoLiveDateConsistent\n        schoolYearStart\n        isSchoolYearStartConsistent\n        schoolYearEnd\n        isSchoolYearEndConsistent\n        __typename\n      }\n      __typename\n    }\n    ... on District {\n      id\n      name\n      countryCode\n      rosterSyncingEnabled\n      khanmigoPreference\n      isTest\n      goLiveDate\n      schoolYearStart\n      schoolYearEnd\n      __typename\n    }\n    __typename\n  }\n}",
  "getExerciseProblemTypeKind": "query getExerciseProblemTypeKind($exerciseIds: [String!]!) {\n  exercises: exercisesByIds(ids: $exerciseIds) {\n    id\n    problemTypeKind\n    __typename\n  }\n}",
  "aiGuideSwagAppliedQuery": "query aiGuideSwagAppliedQuery {\n  user {\n    id\n    aiGuideSwagApplied {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "GuidePreferences": "query GuidePreferences {\n  user {\n    id\n    aiGuidePreferences {\n      readingLevel\n      guideLanguageCode\n      guideVoiceDescriptor\n      showDABs\n      __typename\n    }\n    __typename\n  }\n}",
  "ExerciseEditorPermissionQuery": "query ExerciseEditorPermissionQuery($contentId: String!) {\n  isEditable: isEditableByCurrentUser(\n    contentId: $contentId\n    contentKind: \"Exercise\"\n  )\n  isPublishable: isPublishableByCurrentUser(\n    contentId: $contentId\n    contentKind: \"Exercise\"\n  )\n  user {\n    id\n    nickname\n    __typename\n  }\n}",
  "TranslationEditor_CanPublish": "query TranslationEditor_CanPublish($kaLocale: String!, $contentKind: ContentKind!) {\n  user {\n    id\n    hasContentPermission(\n      contentScope: {kaLocale: $kaLocale, contentKind: $contentKind}\n      name: \"can_publish_content\"\n    )\n    __typename\n  }\n}",
  "allEssaySessions": "query allEssaySessions($contentDescriptor: String!) {\n  allEssaySessions {\n    id\n    essayTitle\n    lastUpdated\n    currentStage\n    assignmentId: assignmentID\n    completed\n    sampleEssayName\n    essayMode\n    __typename\n  }\n  user {\n    id\n    assignmentsForContent(contentDescriptor: $contentDescriptor) {\n      id\n      title\n      dueDate\n      configuredActivityInputs\n      __typename\n    }\n    __typename\n  }\n}",
  "essaySession": "query essaySession($id: String!) {\n  essaySession(essaySessionID: $id) {\n    draft {\n      feedbackList {\n        dimension\n        feedbackID\n        feedbackText\n        _: id\n        isPositive\n        isResolved\n        relevantParagraphId\n        relevantQuotedText\n        thread {\n          id\n          interactions {\n            annotations\n            answer\n            flagged\n            id\n            question\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      id\n      submittedText\n      __typename\n    }\n    essayInstructions\n    essayTitle\n    essayVersion\n    id\n    mostRecentEditedText\n    paragraphIDToParagraphNumbers {\n      paragraphID\n      paragraphNumbers\n      __typename\n    }\n    studentGradeLevel\n    __typename\n  }\n}",
  "districtKhanmigoTotalUsage": "query districtKhanmigoTotalUsage($filter: KhanmigoDistrictFilters!) {\n  districtKhanmigoUsage(filter: $filter) {\n    groupType\n    overall {\n      possibleUsers\n      usersWithUsage\n      percentUsersWithUsage\n      chats\n      avgChatsPerUsersWithUsage\n      avgChatsPerPossibleUsers\n      flaggedChats\n      avgFlaggedChatsPerUsersWithUsage\n      avgFlaggedChatsPerPossibleUsers\n      messages\n      avgMessagesPerChat\n      avgMessagesPerUserWithUsage\n      avgMessagesPerPossibleUsers\n      targetStatus\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    bySchool {\n      school {\n        id\n        name\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        targetStatus\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoUsageByClass": "query districtKhanmigoUsageByClass($filter: KhanmigoDistrictFilters!, $schoolID: String!) {\n  districtKhanmigoUsage(filter: $filter) {\n    byClass(schoolID: $schoolID) {\n      classroom {\n        id\n        cacheId\n        name\n        coachKaid\n        descriptor\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        targetStatus\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoUsageByStudent": "query districtKhanmigoUsageByStudent($filter: KhanmigoDistrictFilters!, $classroomDescriptor: String!) {\n  districtKhanmigoUsage(filter: $filter) {\n    byStudent(classroomDescriptor: $classroomDescriptor) {\n      user {\n        id\n        kaid\n        userDistrictInfos {\n          id\n          displayNameForTeacher\n          __typename\n        }\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoUsageByTeacher": "query districtKhanmigoUsageByTeacher($filter: KhanmigoDistrictFilters!, $schoolID: String!) {\n  districtKhanmigoUsage(filter: $filter) {\n    byTeacher(schoolID: $schoolID) {\n      user {\n        id\n        kaid\n        userDistrictInfos {\n          id\n          displayNameForTeacher\n          __typename\n        }\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoUsageOvertime": "query districtKhanmigoUsageOvertime($filter: KhanmigoDistrictFilters!) {\n  districtKhanmigoUsage(filter: $filter) {\n    groupType\n    overTime {\n      rangeStartDate\n      rangeEndDate\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        avgChatsPerUsersWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherKhanmigoAccess": "query getTeacherKhanmigoAccess {\n  user {\n    id\n    isFormalTeacher\n    userDistrictInfos {\n      id\n      district {\n        id\n        khanmigoIncludeStudents\n        __typename\n      }\n      __typename\n    }\n    aiGuideAccessPlans {\n      id\n      isActive\n      enrollmentGroup\n      __typename\n    }\n    __typename\n  }\n}",
  "FoldersLibraryPermissionCheck": "query FoldersLibraryPermissionCheck {\n  user {\n    id\n    canCreateFolders: hasPermission(name: \"can_create_folders\")\n    canEditFolders: hasPermission(name: \"can_edit_folders\")\n    canDeleteFolders: hasPermission(name: \"can_delete_folders\")\n    canGrantContentRoles: hasPermission(name: \"can_grant_content_roles\")\n    canEditInterimAssessments: hasPermission(\n      name: \"can_edit_interim_assessments\"\n      scope: ANY_ON_CURRENT_LOCALE\n    )\n    __typename\n  }\n}",
  "getTeacherAIEligibilityData": "query getTeacherAIEligibilityData {\n  user {\n    id\n    age\n    isFormalTeacher\n    isK4dTeacher\n    __typename\n  }\n}",
  "courseMetadata": "query courseMetadata($path: String!, $countryCode: String!) {\n  contentRoute(path: $path, countryCode: $countryCode) {\n    resolvedPath\n    listedPathData {\n      course {\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      domain {\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      __typename\n    }\n    unlistedPathData {\n      course {\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      domain {\n        id\n        translatedTitle\n        relativeUrl\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "programsGalleryGetDomain": "query programsGalleryGetDomain($id: String!) {\n  domainById(id: $id) {\n    id\n    translatedTitle\n    relativeUrl\n    __typename\n  }\n}",
  "freeForTeachersEnrollEligibility": "query freeForTeachersEnrollEligibility($agreesToTerms: Boolean) {\n  user {\n    id\n    aiGuideAccessPlans {\n      id\n      enrollmentGroup\n      isActive\n      __typename\n    }\n    age\n    birthdate\n    email\n    username\n    aiGuideFreeForTeachersEligibility(agreesToAIGuideTermsOfService: $agreesToTerms) {\n      age\n      aiGuideTermsOfService\n      isTeacher\n      kadStudent\n      __typename\n    }\n    __typename\n  }\n}",
  "getContentSearchResults": "query getContentSearchResults($query: String!, $allowedTopicAncestors: [String], $contentKinds: [String], $numResults: Int) {\n  searchPage(\n    query: $query\n    allowedTopicAncestors: $allowedTopicAncestors\n    contentKinds: $contentKinds\n    numResults: $numResults\n  ) {\n    results {\n      contentId\n      kind\n      learnableContent {\n        id\n        translatedTitle\n        contentDescriptor\n        translatedDescription\n        mappedStandards {\n          id\n          setId\n          standardId\n          __typename\n        }\n        parentTopic {\n          id\n          translatedTitle\n          contentKind\n          parent {\n            id\n            translatedTitle\n            contentKind\n            parent {\n              id\n              translatedTitle\n              contentKind\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "UserPurchases": "query UserPurchases($kaid: String, $isActive: Boolean) {\n  userPurchases(kaid: $kaid, isActive: $isActive) {\n    id\n    kind\n    isActive\n    cancelAt\n    endedAt\n    cancelAtPeriodEnd\n    expiresAt\n    extId\n    kaid\n    extProductID\n    extUpdatedAt\n    extCustomerID\n    __typename\n  }\n}",
  "ActivityCompletionThreadQuery": "query ActivityCompletionThreadQuery($threadId: String!) {\n  aiGuideThread(threadId: $threadId) {\n    id\n    summary\n    flagged\n    kaid\n    interactions {\n      id\n      answer\n      question\n      __typename\n    }\n    __typename\n  }\n}",
  "LearnerWhatNextPrompt": "query LearnerWhatNextPrompt {\n  user {\n    id\n    kaid\n    recommendations(queryParams: {}) {\n      content {\n        id\n        title\n        defaultUrlPath\n        __typename\n      }\n      reason\n      __typename\n    }\n    __typename\n  }\n}",
  "isKADorKADTeacherQuery": "query isKADorKADTeacherQuery {\n  user {\n    id\n    userDistrictInfos {\n      id\n      isKAD\n      isKmap\n      __typename\n    }\n    __typename\n  }\n}",
  "AITeacherTools_ArticleDetails": "query AITeacherTools_ArticleDetails($articleId: String) {\n  articleById(id: $articleId) {\n    id\n    translatedTitle\n    defaultUrlPath\n    translatedPerseusContent\n    parentTopic {\n      id\n      domainSlug\n      allLearnableContent(includeUnlisted: false) {\n        id\n        translatedTitle\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "AITeacherTools_ExerciseDetails": "query AITeacherTools_ExerciseDetails($exerciseId: String!) {\n  exerciseById(id: $exerciseId) {\n    id\n    translatedTitle\n    prerequisites\n    defaultUrlPath\n    parentTopic {\n      id\n      domainSlug\n      allLearnableContent(includeUnlisted: false) {\n        id\n        translatedTitle\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    assessmentItems {\n      id\n      itemShapeType\n      itemData\n      problemType\n      __typename\n    }\n    __typename\n  }\n}",
  "AITeacherTools_VideoDetails": "query AITeacherTools_VideoDetails($videoId: String) {\n  videoById(contentId: $videoId) {\n    id\n    translatedTitle\n    defaultUrlPath\n    parentTopic {\n      id\n      domainSlug\n      allLearnableContent(includeUnlisted: false) {\n        id\n        translatedTitle\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    subtitles {\n      text\n      __typename\n    }\n    __typename\n  }\n}",
  "getShowDiscussionsForDistrict": "query getShowDiscussionsForDistrict($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    showDiscussions\n    enableImageInput\n    __typename\n  }\n}",
  "DistrictAdminPermissionsQuery": "query DistrictAdminPermissionsQuery {\n  user {\n    id\n    hasPermission(name: \"CAN_ACT_LIKE_A_DISTRICT_ADMIN\", scope: ANY)\n    userDistrictInfos {\n      id\n      district {\n        id\n        __typename\n      }\n      activatedAt\n      canSeeAllSchools\n      canManageAdmins\n      isKmap\n      isSuperAdmin\n      __typename\n    }\n    __typename\n  }\n}",
  "activityByContentDescriptor": "query activityByContentDescriptor($activityID: String!, $activityKind: String!) {\n  learnableContent(id: $activityID, kind: $activityKind) {\n    id\n    contentId\n    contentKind\n    topicPaths {\n      path {\n        id\n        kind\n        slug\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getItemIdForGroupedExercise": "query getItemIdForGroupedExercise($exerciseId: String!) {\n  assessmentItemsForGroupedItemTaskWithError(\n    exerciseId: $exerciseId\n    nextProblemNumber: 1\n    previouslyReservedItemIds: []\n  ) {\n    value {\n      id\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "districtId": "query districtId {\n  user {\n    id\n    userDistrictInfos {\n      id\n      district {\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "coeditingLatestSnapshot": "query coeditingLatestSnapshot($threadId: String!) {\n  aiGuideThread(threadId: $threadId) {\n    id\n    coeditingDocument {\n      id\n      title\n      latestSnapshot {\n        id\n        text {\n          prefix\n          selection\n          suffix\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getAiGuideThreads": "query getAiGuideThreads($kaid: String!, $hasCoeditor: Boolean!, $limit: Int!) {\n  aiGuideThreads(kaid: $kaid, hasCoeditor: $hasCoeditor, limit: $limit) {\n    threads {\n      id\n      coeditingDocument(excludeArchived: true) {\n        id\n        title\n        configName\n        threadId\n        persona\n        latestSnapshot {\n          id\n          createdAt\n          __typename\n        }\n        __typename\n      }\n      blooketQuestionSet {\n        id\n        title\n        threadId\n        persona\n        lastUpdatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "gettingStartedEssaySession": "query gettingStartedEssaySession($id: String!) {\n  essaySession(essaySessionID: $id) {\n    essayInstructions\n    essayTitle\n    essayType\n    gettingStartedThreadID\n    id\n    minimumWordCount\n    studentGradeLevel\n    __typename\n  }\n}",
  "writingCoachEssaySession": "query writingCoachEssaySession($id: String!) {\n  essaySession(essaySessionID: $id) {\n    kaid\n    assignmentID\n    draft {\n      feedbackList {\n        dimension\n        feedbackID\n        feedbackText\n        _USE_feedbackID_INSTEAD_: id\n        isPositive\n        isResolved\n        relevantParagraphId\n        relevantQuotedText\n        thread {\n          id\n          interactions {\n            annotations\n            answer\n            flagged\n            id\n            question\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      id\n      submittedText\n      __typename\n    }\n    completed\n    draftingThreadID\n    essayInstructions\n    essayMode\n    essayTitle\n    essayType\n    essayVersion\n    gettingStartedThreadID\n    id\n    mostRecentEditedText\n    minimumWordCount\n    outline\n    outlineVersion\n    outliningThreadID\n    paragraphIDToParagraphNumbers {\n      paragraphID\n      paragraphNumbers\n      __typename\n    }\n    studentGradeLevel\n    sampleEssayName\n    __typename\n  }\n}",
  "getUserEmailByKaid": "query getUserEmailByKaid($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    email\n    __typename\n  }\n}",
  "districtGrowthByClassroom": "query districtGrowthByClassroom($teacherKaid: String!, $schoolID: String!, $filters: DistrictGrowthFilters!) {\n  districtGrowthByClassroom(\n    teacherKaid: $teacherKaid\n    schoolID: $schoolID\n    filters: $filters\n  ) {\n    classroom {\n      id\n      cacheId\n      descriptor\n      name\n      coachKaid\n      classroomDistrictInfo {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    info {\n      numStudents\n      medianCMPercent\n      wowPercentChange\n      eoyPercentGuess\n      targetStatus\n      __typename\n    }\n    __typename\n  }\n}",
  "districtGrowthBySchool": "query districtGrowthBySchool($filters: DistrictGrowthFilters!) {\n  districtGrowthBySchool(filters: $filters) {\n    school {\n      id\n      name\n      __typename\n    }\n    info {\n      numStudents\n      medianCMPercent\n      wowPercentChange\n      eoyPercentGuess\n      course {\n        id\n        __typename\n      }\n      targetStatus\n      __typename\n    }\n    target {\n      course {\n        id\n        __typename\n      }\n      percentage\n      gradeLevels\n      __typename\n    }\n    __typename\n  }\n}",
  "districtGrowthByStudent": "query districtGrowthByStudent($classroomDescriptor: String!, $filters: DistrictGrowthFilters!) {\n  districtGrowthByStudent(\n    classroomDescriptor: $classroomDescriptor\n    filters: $filters\n  ) {\n    user {\n      id\n      kaid\n      userDistrictInfos {\n        id\n        displayNameForTeacher\n        __typename\n      }\n      __typename\n    }\n    info {\n      numStudents\n      medianCMPercent\n      wowPercentChange\n      eoyPercentGuess\n      targetStatus\n      __typename\n    }\n    __typename\n  }\n}",
  "districtGrowthByTeacher": "query districtGrowthByTeacher($schoolID: String!, $filters: DistrictGrowthFilters!) {\n  districtGrowthByTeacher(schoolID: $schoolID, filters: $filters) {\n    user {\n      id\n      kaid\n      userDistrictInfos {\n        id\n        displayNameForTeacher\n        __typename\n      }\n      __typename\n    }\n    info {\n      numStudents\n      medianCMPercent\n      wowPercentChange\n      eoyPercentGuess\n      targetStatus\n      __typename\n    }\n    __typename\n  }\n}",
  "districtGrowthByWeek": "query districtGrowthByWeek($filters: DistrictGrowthFilters!) {\n  districtGrowthByWeek(filters: $filters) {\n    weekEndDate\n    weekStartDate\n    overallMedianCMPercent\n    selectedSchoolsMedianCMPercent\n    targetPercentage\n    __typename\n  }\n}",
  "allEmailTemplates": "query allEmailTemplates {\n  allEmailTemplates {\n    id\n    name\n    htmlTemplate\n    textTemplate\n    exampleData\n    __typename\n  }\n}",
  "emailTemplate": "query emailTemplate($id: ID!) {\n  emailTemplate(id: $id) {\n    id\n    name\n    htmlTemplate\n    textTemplate\n    exampleData\n    __typename\n  }\n}",
  "previewEmail": "query previewEmail($email: SendEmailInput!) {\n  previewEmail(email: $email) {\n    htmlContent\n    textContent\n    __typename\n  }\n}",
  "findUsersByNickname": "query findUsersByNickname($nickname: String!) {\n  usersSearchByNickname(nickname: $nickname) {\n    users {\n      ...UserFields\n      ...FilterFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment FilterFields on User {\n  id\n  nickname\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  joined\n  discussionBanned\n  isChild\n  points\n  __typename\n}\n\nfragment UserFields on User {\n  id\n  kaid\n  lastLogin\n  points\n  profileRoot\n  nickname\n  joined\n  authEmails\n  userId\n  username\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  __typename\n}",
  "userBirthMonthYear": "query userBirthMonthYear {\n  user {\n    id\n    birthMonthYear\n    __typename\n  }\n}",
  "districtAdminName": "query districtAdminName {\n  user {\n    id\n    kaid\n    nickname\n    userDistrictInfos {\n      id\n      districtProvidedFirstName\n      __typename\n    }\n    __typename\n  }\n}",
  "perseusTemplateCompletionQuery": "query perseusTemplateCompletionQuery($exemplar: String!, $exerciseTitle: String!, $exerciseDescription: String!, $standardsDescriptions: String!, $additionalInstructions: String) {\n  perseusTemplateCompletion(\n    exemplar: $exemplar\n    exerciseDetails: {title: $exerciseTitle, description: $exerciseDescription, standardsDescriptions: $standardsDescriptions}\n    additionalInstructions: $additionalInstructions\n  ) {\n    completion {\n      template\n      misconceptions\n      placeholderNames\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDashboardLearningMinutes": "query districtDashboardLearningMinutes($filters: DistrictDashboardFilters!) {\n  districtDashboardLearningMinutes(filters: $filters) {\n    header {\n      yearFirstWeekStart\n      yearFirstWeekEnd\n      yearLastWeekStart\n      yearLastWeekEnd\n      numberOfWeeksInTheSchoolYear\n      lastWeekAvg\n      yearToDateAvg\n      __typename\n    }\n    target {\n      percentage\n      minutesPerWeek\n      domains\n      __typename\n    }\n    percentAtTarget\n    rows {\n      weekStart\n      weekEnd\n      totalStudents\n      totalMinutes\n      avgMinutes\n      numWith0\n      percent0\n      numWith1to14\n      percent1to14\n      numWith15to29\n      percent15to29\n      num30Plus\n      percent30Plus\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDashboardActivation": "query districtDashboardActivation($filters: DistrictDashboardFilters!) {\n  districtDashboardActivation(filters: $filters) {\n    numRosteredStudents\n    numRosteredTeachers\n    numTeachersWithAnAccount\n    percentTeachersWithAnAccount\n    numWithAnAccount\n    percentWithAnAccount\n    numStartedAnActivity\n    percentStartedAnActivity\n    lastUpdatedDate\n    target {\n      percentage\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDashboardSkillsLeveledUp": "query districtDashboardSkillsLeveledUp($filters: DistrictDashboardFilters!, $upToProficient: Boolean!) {\n  districtDashboardSkillsLeveledUp(\n    filters: $filters\n    upToProficient: $upToProficient\n  ) {\n    header {\n      yearFirstWeekStart\n      yearFirstWeekEnd\n      yearLastWeekStart\n      yearLastWeekEnd\n      numberOfWeeksInTheSchoolYear\n      lastWeekAvg\n      yearToDateAvg\n      __typename\n    }\n    target {\n      skillsPerWeek\n      domains\n      __typename\n    }\n    rows {\n      weekStart\n      weekEnd\n      avgSkills\n      __typename\n    }\n    __typename\n  }\n}",
  "districtById": "query districtById($districtId: String!, $excludeTeacherDirected: Boolean!) {\n  districts(filter: $districtId, excludeTeacherDirected: $excludeTeacherDirected) {\n    id\n    name\n    ancestors {\n      id\n      name\n      __typename\n    }\n    goal {\n      type\n      __typename\n    }\n    rosterID\n    rosterSource\n    nweaID\n    ncesID\n    rosterSyncingEnabled\n    sendActivationEmails\n    rosterDistrictAdmins\n    deletedAt\n    isDowngraded\n    isTest\n    onlySevereAIModeration\n    isKmapDistrict\n    isK4dDistrict\n    lastRostered\n    lastTestPull\n    goLiveDate\n    isOldNWEA\n    region\n    countryCode\n    createdBy {\n      id\n      kaid\n      email\n      __typename\n    }\n    districtAuditLogs {\n      createdAt\n      description\n      kind\n      __typename\n    }\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      khanmigoPreference\n      allOnGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      allOffGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      subsetGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      __typename\n    }\n    schoolYearDates {\n      start {\n        nthWeek\n        dayOfWeek\n        month\n        __typename\n      }\n      end {\n        nthWeek\n        dayOfWeek\n        month\n        __typename\n      }\n      __typename\n    }\n    schoolYearStart\n    schoolYearEnd\n    hasKhanmigo\n    khanmigoPreference\n    khanmigoIncludeNonStudents\n    khanmigoIncludeStudents\n    khanmigoStudents\n    khanmigoAdmins\n    khanmigoTeachers\n    khanmigoTotal\n    khanmigoUDIsShould\n    khanmigoUDIsHave\n    khanmigoTokenCapacity\n    khanmigoTokenUsage\n    khanmigoStart\n    khanmigoEnd\n    khanmigoIncludedUsers {\n      id\n      districtProvidedEmail\n      primaryRole\n      __typename\n    }\n    khanmigoExcludedUsers {\n      id\n      districtProvidedEmail\n      primaryRole\n      __typename\n    }\n    khanmigoGradeEnrollment {\n      id\n      districtID\n      allOnGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      allOffGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      subsetGrades {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      __typename\n    }\n    hasAssessments\n    researchOptOut\n    hasLMSConnect\n    __typename\n  }\n}",
  "devadminEssayHistory": "query devadminEssayHistory($essaySessionId: String!, $pageSize: Int!, $offset: Int!) {\n  essaySession(essaySessionID: $essaySessionId) {\n    id\n    history(pageSize: $pageSize, offset: $offset) {\n      hasMore\n      snapshots {\n        snapshotIndex\n        details {\n          firstIncludedVersion\n          firstIncludedEditTimestamp\n          lastIncludedVersion\n          lastIncludedEditTimestamp\n          content\n          __typename\n        }\n        ... on UserEssayTextSnapshot {\n          learningTimeSeconds\n          stage\n          pasteMetadata {\n            selectionStart\n            selectionEnd\n            text\n            __typename\n          }\n          __typename\n        }\n        ... on UserEssayOutlineSnapshot {\n          learningTimeSeconds\n          pasteMetadata {\n            location\n            jsonPointer\n            selectionStart\n            selectionEnd\n            text\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminEssayAuthor": "query devadminEssayAuthor($essaySessionId: String!) {\n  essaySession(essaySessionID: $essaySessionId) {\n    id\n    kaid\n    __typename\n  }\n}",
  "devadminWritingCoachTime": "query devadminWritingCoachTime($essaySessionId: String!) {\n  essaySession(essaySessionID: $essaySessionId) {\n    id\n    learningTime {\n      promptReviewingSeconds\n      outliningSeconds\n      draftingSeconds\n      revisingSeconds\n      __typename\n    }\n    __typename\n  }\n}",
  "listAIGuideConversationTestCases": "query listAIGuideConversationTestCases {\n  listAIGuideConversationTestCases {\n    id\n    owningTeam\n    name\n    description\n    interactions {\n      threadId\n      interactionId\n      name\n      success\n      __typename\n    }\n    __typename\n  }\n}",
  "fetchAllLegalDocs": "query fetchAllLegalDocs($isArchived: Boolean) {\n  legalDocuments(isArchived: $isArchived) {\n    id\n    name\n    slug\n    isArchived\n    kaLocales\n    countryCodes\n    draftContent\n    __typename\n  }\n}",
  "getTeacherTools": "query getTeacherTools {\n  aiGuideTeacherTools(order: TEACHER_TOOLS_PAGE) {\n    id\n    configName\n    __typename\n  }\n}",
  "fetchEssayPasteLog": "query fetchEssayPasteLog($essaySessionId: ID!) {\n  userEssayPasteLog(essaySessionID: $essaySessionId) {\n    pasteEvents {\n      text\n      location\n      timestamp\n      __typename\n    }\n    __typename\n  }\n}",
  "LearnerAssignableAIActivitiesQuery": "query LearnerAssignableAIActivitiesQuery {\n  courseById(id: \"x1b615e2cf0b0f17f\") {\n    id\n    unitChildren {\n      id\n      listed\n      translatedTitle\n      lessonChildren {\n        id\n        translatedTitle\n        allLearnableContent {\n          id\n          translatedTitle\n          defaultUrlPath\n          contentDescriptor\n          ... on AIGuideActivity {\n            isAssignable\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "legalDocByID": "query legalDocByID($id: ID!) {\n  legalDocument(id: $id) {\n    id\n    name\n    slug\n    isArchived\n    kaLocales\n    countryCodes\n    draftContent\n    lastUpdatedByKaid\n    versions {\n      id\n      content\n      publishedByKaid\n      publishedAt\n      __typename\n    }\n    __typename\n  }\n}",
  "getAllEkbEntries": "query getAllEkbEntries {\n  getExpandedKnowledgeBaseEntries {\n    entries {\n      id\n      metadata {\n        category\n        url\n        text\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDashboardKhanmigo": "query districtDashboardKhanmigo($filters: DistrictDashboardFilters!, $userType: DistrictUserTypeFilter) {\n  districtDashboardKhanmigo(filters: $filters, userType: $userType) {\n    lastWeekStart\n    lastWeekEnd\n    lastWeekUsage {\n      usersWithUsage\n      percentUsersWithUsage\n      avgChats\n      avgMessagesPerChat\n      __typename\n    }\n    priorWeekUsage {\n      usersWithUsage\n      percentUsersWithUsage\n      avgChats\n      avgMessagesPerChat\n      __typename\n    }\n    top5Activities {\n      activityType\n      aIGuideActivity {\n        id\n        translatedTitle\n        __typename\n      }\n      aiReportingLabel {\n        id\n        translatedTitle\n        __typename\n      }\n      userPercentage\n      chatPercent\n      totalChats\n      totalUsers\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminEssayOriginalityFlags": "query devadminEssayOriginalityFlags($essaySessionId: String!) {\n  essaySession(essaySessionID: $essaySessionId) {\n    id\n    originalityFlags {\n      ... on UserEssayOriginalityFlagPasteIntoOutline {\n        timestamp\n        location\n        wordCount\n        __typename\n      }\n      ... on UserEssayOriginalityFlagPasteIntoText {\n        timestamp\n        stage\n        wordCount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "legalDocBySlug": "query legalDocBySlug($slug: String!) {\n  legalDocumentContent(slug: $slug) {\n    id\n    content\n    __typename\n  }\n}",
  "teacherKhanmigoActivity": "query teacherKhanmigoActivity($filter: KhanmigoTeacherFilters!) {\n  teacherKhanmigoActivity(filter: $filter) {\n    totalChats\n    rows {\n      activityType\n      aIGuideActivity {\n        id\n        translatedTitle\n        __typename\n      }\n      aiReportingLabel {\n        id\n        translatedTitle\n        __typename\n      }\n      totalChats\n      chatPercent\n      courseRows {\n        course {\n          id\n          translatedTitle\n          __typename\n        }\n        totalChats\n        chatPercent\n        unitRows {\n          unit {\n            id\n            translatedTitle\n            __typename\n          }\n          totalChats\n          chatPercent\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "PerseusItemCompletionQuery": "query PerseusItemCompletionQuery($exerciseDetails: ExerciseDetailsInput!, $templateDetails: PerseusTemplateInput!, $numItems: Int!, $additionalInstructions: String) {\n  perseusItemCompletion(\n    exerciseDetails: $exerciseDetails\n    templateDetails: $templateDetails\n    numItems: $numItems\n    additionalInstructions: $additionalInstructions\n  ) {\n    items\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "khanLibraryCanEditInterimAssessments": "query khanLibraryCanEditInterimAssessments {\n  user {\n    id\n    canEditInterimAssessments: hasPermission(\n      name: \"can_edit_interim_assessments\"\n      scope: ANY_ON_CURRENT_LOCALE\n    )\n    __typename\n  }\n}",
  "configurableInputsForActivity": "query configurableInputsForActivity($contentID: String!) {\n  aiGuideActivityById(id: $contentID) {\n    id\n    configurableInputs\n    __typename\n  }\n}",
  "teacherKhanmigoTotalUsage": "query teacherKhanmigoTotalUsage($filter: KhanmigoTeacherFilters!) {\n  teacherKhanmigoUsage(filter: $filter) {\n    overall {\n      possibleUsers\n      usersWithUsage\n      percentUsersWithUsage\n      chats\n      avgChatsPerUsersWithUsage\n      avgChatsPerPossibleUsers\n      flaggedChats\n      avgFlaggedChatsPerUsersWithUsage\n      avgFlaggedChatsPerPossibleUsers\n      messages\n      avgMessagesPerChat\n      avgMessagesPerUserWithUsage\n      avgMessagesPerPossibleUsers\n      __typename\n    }\n    byStudent {\n      student {\n        id\n        kaid\n        coachNickname\n        __typename\n      }\n      chats\n      flaggedChats\n      messages\n      avgMessagesPerChat\n      activities\n      __typename\n    }\n    __typename\n  }\n}",
  "teacherKhanmigoUsageOvertime": "query teacherKhanmigoUsageOvertime($filter: KhanmigoTeacherFilters!) {\n  teacherKhanmigoUsage(filter: $filter) {\n    groupType\n    overTime {\n      rangeStartDate\n      rangeEndDate\n      usage {\n        usersWithUsage\n        percentUsersWithUsage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "GetManagedPartnerships": "query GetManagedPartnerships {\n  user {\n    id\n    homepageUrl\n    userChosenRoles\n    __typename\n  }\n  getPartnerships(includeDeleted: false, onlyTeacherDirected: false) {\n    ... on MetaDistrict {\n      id\n      name\n      countryCode\n      levelHeight\n      __typename\n    }\n    ... on District {\n      id\n      name\n      isTest\n      isKmapDistrict\n      isK4dDistrict\n      countryCode\n      levelHeight\n      __typename\n    }\n    __typename\n  }\n}",
  "GetPartnershipForAdminDashboard": "query GetPartnershipForAdminDashboard($partnershipID: ID!) {\n  getPartnershipById(partnershipId: $partnershipID) {\n    ... on MetaDistrict {\n      id\n      name\n      countryCode\n      levelLabel\n      levelHeight\n      treeLabels {\n        singular\n        generalized\n        __typename\n      }\n      descendants {\n        ... on MetaDistrict {\n          id\n          parent {\n            id\n            __typename\n          }\n          name\n          levelLabel\n          levelHeight\n          __typename\n        }\n        ... on District {\n          id\n          parent {\n            id\n            __typename\n          }\n          name\n          levelLabel\n          levelHeight\n          isK4dDistrict\n          isKmapDistrict\n          schools {\n            id\n            name\n            isKADSchool\n            isKmapSchool\n            __typename\n          }\n          isTest\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    ... on District {\n      id\n      name\n      countryCode\n      levelLabel\n      treeLabels {\n        singular\n        generalized\n        __typename\n      }\n      schools {\n        id\n        name\n        isKADSchool\n        isKmapSchool\n        __typename\n      }\n      levelHeight\n      isTest\n      __typename\n    }\n    __typename\n  }\n}",
  "AccountDeletionRequests": "query AccountDeletionRequests($kaid: String!) {\n  accountDeletionRequests(targetKaid: $kaid) {\n    user {\n      id\n      __typename\n    }\n    reason\n    processOnDate\n    __typename\n  }\n}",
  "getTeacherReferralEligibilityData": "query getTeacherReferralEligibilityData {\n  user {\n    id\n    hasAccessToAIGuideTeacher\n    isAIGuideEnabled\n    __typename\n  }\n}",
  "khanmigoForTeachersPersonalReferralCode": "query khanmigoForTeachersPersonalReferralCode {\n  user {\n    id\n    khanmigoForTeachersReferralCode\n    __typename\n  }\n}",
  "SkillsToProficient_CourseProficiency": "query SkillsToProficient_CourseProficiency($courseId: String!) {\n  user {\n    id\n    courseProgress(topicId: $courseId) {\n      proficiencyLevel\n      masteryMap {\n        progressKey\n        status\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "previewLearnerParentAIGuideActivatedEmail": "query previewLearnerParentAIGuideActivatedEmail {\n  preview: previewLearnerParentAIGuideActivatedEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "interimAssessmentCheckQuery": "query interimAssessmentCheckQuery($contentId: String!) {\n  revision: exerciseRevisionById(id: $contentId) {\n    id\n    interimAssessmentType\n    __typename\n  }\n  user {\n    id\n    canEditInterimAssessments: hasPermission(\n      name: \"can_edit_interim_assessments\"\n      scope: ANY_ON_CURRENT_LOCALE\n    )\n    __typename\n  }\n}",
  "StreakQuery": "query StreakQuery {\n  user {\n    id\n    stpStreak {\n      length\n      isExpiring\n      longestLength\n      __typename\n    }\n    __typename\n  }\n}",
  "essaySessionHistory": "query essaySessionHistory($essaySessionID: String!, $pageSize: Int!, $offset: Int!) {\n  essaySession(essaySessionID: $essaySessionID) {\n    id\n    history(pageSize: $pageSize, offset: $offset) {\n      hasMore\n      snapshots {\n        snapshotIndex\n        details {\n          firstIncludedVersion\n          firstIncludedEditTimestamp\n          lastIncludedVersion\n          lastIncludedEditTimestamp\n          content\n          __typename\n        }\n        ... on UserEssayTextSnapshot {\n          stage\n          learningTimeSeconds\n          pasteMetadata {\n            selectionStart\n            selectionEnd\n            text\n            __typename\n          }\n          feedbackRequestedAt\n          __typename\n        }\n        ... on UserEssayOutlineSnapshot {\n          learningTimeSeconds\n          pasteMetadata {\n            location\n            jsonPointer\n            selectionStart\n            selectionEnd\n            text\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCoachAssignmentReport": "query getCoachAssignmentReport($assignmentId: String!, $teacherKaid: String!) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      id\n      contentDescriptors\n      title\n      assignedDate\n      dueDate\n      configuredActivityInputs\n      students {\n        id\n        kaid\n        coachNickname(teacherKaid: $teacherKaid)\n        __typename\n      }\n      classroom {\n        id\n        cacheId\n        name\n        signupCode\n        __typename\n      }\n      contents {\n        ...ExerciseContentFields\n        __typename\n      }\n      exerciseConfig {\n        itemPickerStrategy\n        assessmentItemIds\n        __typename\n      }\n      itemCompletionStatesForAllStudents {\n        studentKaid\n        exerciseAttempts {\n          id\n          isCompleted\n          numAttempted\n          __typename\n        }\n        assessmentItemsForAssessment {\n          id\n          contentId\n          itemData\n          __typename\n        }\n        student {\n          id\n          kaid\n          coachNickname(teacherKaid: $teacherKaid)\n          __typename\n        }\n        essaySession {\n          id\n          currentStage\n          completed\n          lastUpdated\n          wordCount\n          draft {\n            id\n            feedbackList {\n              id\n              isResolved\n              isPositive\n              __typename\n            }\n            __typename\n          }\n          learningTime {\n            promptReviewingSeconds\n            outliningSeconds\n            draftingSeconds\n            revisingSeconds\n            __typename\n          }\n          originalityFlags {\n            isCritical\n            ... on UserEssayOriginalityFlagPasteIntoOutline {\n              location\n              wordCount\n              outlineVersionBeforePaste\n              __typename\n            }\n            ... on UserEssayOriginalityFlagPasteIntoText {\n              stage\n              wordCount\n              essayVersionBeforePaste\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        completedOn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ExerciseContentFields on LearnableContent {\n  id\n  kind\n  slug\n  ... on Exercise {\n    translatedTitle: translatedDisplayName\n    exerciseLength\n    assessmentItems {\n      id\n      contentId\n      itemData\n      __typename\n    }\n    __typename\n  }\n  ... on TopicQuiz {\n    id\n    translatedTitle\n    exerciseLength\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on TopicUnitTest {\n    translatedTitle\n    exerciseLength\n    coveredExercises(includeCoveredSkills: true) {\n      id\n      assessmentItems {\n        id\n        contentId\n        itemData\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  ... on LearnableCourseChallenge {\n    translatedTitle\n    exerciseLength\n    __typename\n  }\n  __typename\n}",
  "previewTeacherToolsActivatedEmail": "query previewTeacherToolsActivatedEmail {\n  preview: previewTeacherToolsActivatedEmail {\n    textContent\n    htmlContent\n    __typename\n  }\n}",
  "SkillsToProficient_OverallProficiency": "query SkillsToProficient_OverallProficiency {\n  user {\n    id\n    countExercisesProficient\n    overallProficiencyLevel\n    __typename\n  }\n}",
  "ActiveAssignmentsAndGoalsQuery": "query ActiveAssignmentsAndGoalsQuery($classDescriptor: String!, $dueAfter: DateTime!, $userKaid: String!) {\n  user(kaid: $userKaid) {\n    id\n    isKmapStudent\n    assignmentsPage(\n      classroomDescriptor: $classDescriptor\n      dueAfter: $dueAfter\n      orderBy: DUE_DATE_ASC\n    ) {\n      assignments {\n        id\n        dueDate\n        __typename\n      }\n      __typename\n    }\n    masteryAssignments(classroomDescriptor: $classDescriptor, isPast: false) {\n      id\n      dueDate\n      __typename\n    }\n    __typename\n  }\n}",
  "localesForTeacherToolsBanner": "query localesForTeacherToolsBanner {\n  localesForLanguagePicker(includeEnglish: false, includeFake: false) {\n    id\n    localName\n    kaLocale\n    __typename\n  }\n}",
  "DistrictActivationBySchoolContainer": "query DistrictActivationBySchoolContainer($districtId: ID!, $schoolIds: [ID!]) {\n  activationReportBySchool(districtId: $districtId, schoolIds: $schoolIds) {\n    rows {\n      school {\n        id\n        name\n        __typename\n      }\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      numStudentsStartedAnActivity\n      studentTargetStatus\n      teacherTargetStatus\n      __typename\n    }\n    updatedAt\n    totalRow {\n      numStudentsTotal\n      numStudentsActivated\n      numTeachersTotal\n      numTeachersActivated\n      numStudentsStartedAnActivity\n      studentTargetStatus\n      teacherTargetStatus\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    __typename\n  }\n}",
  "SkillsToProficient_RecentCourses": "query SkillsToProficient_RecentCourses($pageSize: Int!) {\n  user {\n    id\n    recentCourses(pageSize: $pageSize) {\n      results {\n        content {\n          id\n          isListedForLearners\n          masteryEnabled\n          relativeUrl\n          translatedTitle\n          ... on Course {\n            masterableExercises(includeDuplicates: true) {\n              id\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "AssessmentStatus": "query AssessmentStatus($slug: String!) {\n  user {\n    id\n    assessmentData {\n      assessmentStatus(assessmentSlug: $slug) {\n        status\n        assessment {\n          id\n          name\n          surveyURL\n          __typename\n        }\n        task {\n          id\n          expirationTime\n          questionsCompleted\n          estimatedQuestionsRemaining\n          hasSubmittedLearnerInsightsFeedback\n          surveyMonkeyID\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    nickname\n    __typename\n  }\n}",
  "getUserActiveEnrollmentGroups": "query getUserActiveEnrollmentGroups {\n  user {\n    id\n    aiGuideActiveEnrollmentGroups\n    __typename\n  }\n}",
  "SkillsToProficient_ClassRecommendations": "query SkillsToProficient_ClassRecommendations($courseId: String, $classroomDescriptor: String) {\n  user {\n    id\n    recommendations(\n      queryParams: {courseId: $courseId, classroomDescriptor: $classroomDescriptor}\n    ) {\n      content {\n        id\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "ClassroomDistrictInfoByRosterIdQuery": "query ClassroomDistrictInfoByRosterIdQuery($rosterID: ID!) {\n  classroomDistrictInfoByRosterId(rosterId: $rosterID) {\n    id\n    keyNameID\n    name\n    studentsHaveAccessToKhanmigo\n    district {\n      id\n      name\n      __typename\n    }\n    rosterSource\n    districtProvidedIdentifier\n    createdAt\n    updatedAt\n    emailDomains\n    isNweaMapSynced\n    schoolKey\n    school {\n      id\n      __typename\n    }\n    classroom {\n      id\n      cacheId\n      __typename\n    }\n    classRemovalDate\n    classWillBeRemovedInDays\n    courseSISNumber\n    courseSISName\n    sectionSIS\n    sisSubjct\n    cdiAuditLogs {\n      createdAt\n      kind\n      description\n      __typename\n    }\n    studentsHaveAccessToKhanmigo\n    isManuallyUnmarked\n    __typename\n  }\n}",
  "classroomDistrictInfoByKeyNameIdQuery": "query classroomDistrictInfoByKeyNameIdQuery($keyNameID: ID!) {\n  classroomDistrictInfoByKeyNameID(keyNameID: $keyNameID) {\n    id\n    keyNameID\n    name\n    studentsHaveAccessToKhanmigo\n    district {\n      id\n      name\n      __typename\n    }\n    rosterSource\n    districtProvidedIdentifier\n    createdAt\n    updatedAt\n    emailDomains\n    isNweaMapSynced\n    schoolKey\n    school {\n      id\n      __typename\n    }\n    classroom {\n      id\n      cacheId\n      __typename\n    }\n    classRemovalDate\n    classWillBeRemovedInDays\n    courseSISNumber\n    courseSISName\n    sectionSIS\n    sisSubjct\n    cdiAuditLogs {\n      createdAt\n      kind\n      description\n      __typename\n    }\n    studentsHaveAccessToKhanmigo\n    isManuallyUnmarked\n    __typename\n  }\n}",
  "userCertificate": "query userCertificate($courseID: String!) {\n  userCertificate(courseID: $courseID) {\n    id\n    kaid\n    courseID\n    createdAt\n    __typename\n  }\n}",
  "getTeacherAccessGroups": "query getTeacherAccessGroups {\n  user {\n    id\n    hasAccessToAIGuideDistrictClassroomTeacher\n    __typename\n  }\n}",
  "getFavoritedTeacherTools": "query getFavoritedTeacherTools {\n  aiGuideFavoritedTeacherTools {\n    id\n    configName\n    __typename\n  }\n}",
  "exerciseEditorConflictQuery": "query exerciseEditorConflictQuery($contentId: String!) {\n  latestRevision: exerciseRevisionById(id: $contentId) {\n    id\n    sha\n    creationDate\n    createdBy {\n      id\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentForWritingCoach": "query assignmentForWritingCoach($assignmentID: String!) {\n  user {\n    id\n    assignment(id: $assignmentID) {\n      id\n      dueDate\n      classroom {\n        cacheId\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "snapshotForOutlinePasteEvent": "query snapshotForOutlinePasteEvent($essaySessionID: String!, $version: Int!) {\n  essaySession(essaySessionID: $essaySessionID) {\n    id\n    snapshot: snapshotForOutlinePasteEvent(outlineVersionBeforePaste: $version) {\n      snapshotIndex\n      __typename\n    }\n    __typename\n  }\n}",
  "snapshotForTextPasteEvent": "query snapshotForTextPasteEvent($essaySessionID: String!, $version: Int!) {\n  essaySession(essaySessionID: $essaySessionID) {\n    id\n    snapshot: snapshotForTextPasteEvent(essayVersionBeforePaste: $version) {\n      snapshotIndex\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentInfoForWritingCoach": "query assignmentInfoForWritingCoach($kaid: String!, $assignmentID: String!) {\n  user(kaid: $kaid) {\n    id\n    assignment(id: $assignmentID) {\n      id\n      dueDate\n      classroom {\n        cacheId\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "essaySessionProgress": "query essaySessionProgress($teacherKaid: String!, $essaySessionID: String!) {\n  essaySession(essaySessionID: $essaySessionID) {\n    id\n    kaid\n    author {\n      id\n      coachNickname(teacherKaid: $teacherKaid)\n      __typename\n    }\n    gettingStartedThread {\n      id\n      lastUpdatedAt\n      __typename\n    }\n    outliningThreadID\n    draftingThreadID\n    assignmentId: assignmentID\n    essayInstructions\n    essayMode\n    essayTitle\n    essayType\n    minimumWordCount\n    studentGradeLevel\n    mostRecentEditedText\n    completed\n    completedOn\n    currentStage\n    lastUpdated\n    wordCount\n    originalityFlags {\n      isCritical\n      ... on UserEssayOriginalityFlagPasteIntoOutline {\n        location\n        wordCount\n        outlineVersionBeforePaste\n        __typename\n      }\n      ... on UserEssayOriginalityFlagPasteIntoText {\n        stage\n        wordCount\n        essayVersionBeforePaste\n        __typename\n      }\n      __typename\n    }\n    draft {\n      id\n      submittedText\n      feedbackList {\n        dimension\n        feedbackID\n        feedbackText\n        _USE_feedbackID_INSTEAD_: id\n        isPositive\n        isResolved\n        relevantParagraphId\n        relevantQuotedText\n        thread {\n          id\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    learningTime {\n      understandingSeconds: promptReviewingSeconds\n      outliningSeconds\n      draftingSeconds\n      revisingSeconds\n      __typename\n    }\n    latestSnapshot {\n      snapshotIndex\n      __typename\n    }\n    __typename\n  }\n}",
  "SkillsToProficient_LearnerRecommendations": "query SkillsToProficient_LearnerRecommendations($courseId: String, $classroomDescriptor: String, $numRecs: Int) {\n  user {\n    id\n    recommendations(\n      queryParams: {courseId: $courseId, classroomDescriptor: $classroomDescriptor, numRecs: $numRecs}\n    ) {\n      content {\n        id\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getDistrictRosteredGrades": "query getDistrictRosteredGrades($districtID: ID!) {\n  grades: activationReportByGradeLevel(districtId: $districtID, schoolIds: []) {\n    rows {\n      gradeLevel {\n        id\n        name\n        sortIndex\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "SchoolsByRosterId": "query SchoolsByRosterId($rosterID: [ID!]!) {\n  eduOrgsAreInPartnership(eduOrgIDs: $rosterID) {\n    id\n    name\n    isKmapSchool\n    isKADSchool\n    khanmigoPreference\n    allOnGrades {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    allOffGrades {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    subsetGrades {\n      id\n      name\n      sortIndex\n      __typename\n    }\n    eduOrg {\n      id\n      name\n      locality\n      administrativeAreaLevel2\n      administrativeAreaLevel1\n      postalCode\n      country\n      location\n      __typename\n    }\n    schoolAuditLogs {\n      createdAt\n      kind\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherToolbarTools": "query getTeacherToolbarTools {\n  aiGuideTeacherTools(order: TEACHER_TOOLBAR) {\n    id\n    configName\n    __typename\n  }\n}",
  "guideLanguages": "query guideLanguages {\n  khanmigoSupportedKALocales {\n    id\n    khanmigoSupport\n    displayName\n    localName\n    __typename\n  }\n}",
  "getAIInsightsForThread": "query getAIInsightsForThread($assignmentId: String!, $threadId: String!) {\n  user {\n    id\n    assignmentByThisUser(id: $assignmentId) {\n      id\n      aiInsights(threadId: $threadId) {\n        summary\n        onTopic\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getAllCoursesForRegion": "query getAllCoursesForRegion($region: String!) {\n  groups: studentListTopics(region: $region) {\n    groupTitle: translatedTitle\n    courses: topics {\n      id\n      title: translatedTitle\n      domainSlug\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherType": "query getTeacherType($targetKaid: String!) {\n  user(kaid: $targetKaid) {\n    id\n    isK4dTeacher\n    isKmapTeacher\n    __typename\n  }\n}",
  "getParentKhanmigoEligibility": "query getParentKhanmigoEligibility($targetKaid: String!) {\n  user(kaid: $targetKaid) {\n    id\n    aiGuideDisabledReason\n    aiGuideAccessPlans {\n      id\n      enrollmentGroup\n      isActive\n      __typename\n    }\n    __typename\n  }\n}",
  "getLearnerKhanmigoEligibility": "query getLearnerKhanmigoEligibility {\n  user {\n    id\n    aiGuideDisabledReason\n    aiGuideActiveEnrollmentGroups\n    __typename\n  }\n}",
  "SkillsToProficient_UnitRecommendations": "query SkillsToProficient_UnitRecommendations($courseId: String, $numRecs: Int, $unitId: String) {\n  user {\n    id\n    recommendations(\n      queryParams: {courseId: $courseId, numRecs: $numRecs, unitId: $unitId}\n    ) {\n      content {\n        id\n        defaultUrlPath\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "UserForDistrictSignup": "query UserForDistrictSignup {\n  user {\n    id\n    kaid\n    canAccessDistrictsHomepage\n    isTeacher\n    hasUnresolvedInvitations\n    preferredKaLocale {\n      id\n      kaLocale\n      status\n      __typename\n    }\n    age\n    nickname\n    __typename\n  }\n}",
  "getUserIsSubscribedToAllEmails": "query getUserIsSubscribedToAllEmails($kaid: String) {\n  user(kaid: $kaid) {\n    id\n    emailSubscriptions {\n      allEmailSubscription {\n        checked\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtDashboardCourseMastery": "query districtDashboardCourseMastery($filters: DistrictGrowthFilters!) {\n  districtDashboardCourseMastery(filters: $filters) {\n    header {\n      yearFirstWeekStart\n      yearFirstWeekEnd\n      yearLastWeekStart\n      yearLastWeekEnd\n      numberOfWeeksInTheSchoolYear\n      lastWeekAvg\n      yearToDateAvg\n      noData\n      __typename\n    }\n    rows {\n      weekStartDate\n      weekEndDate\n      overallMedianCMPercent\n      selectedSchoolsMedianCMPercent\n      targetPercentage\n      __typename\n    }\n    __typename\n  }\n}",
  "getContentItem": "query getContentItem($descriptors: [String!]!) {\n  contentForDescriptors(descriptors: $descriptors) {\n    id\n    contentDescriptor\n    contentKind\n    translatedTitle\n    translatedDescription\n    mappedStandards {\n      id\n      setId\n      standardId\n      __typename\n    }\n    lesson: parentTopic {\n      id\n      translatedTitle\n      unit: parent {\n        id\n        translatedTitle\n        course: parent {\n          id\n          translatedTitle\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCourseMasteryTargets": "query getCourseMasteryTargets($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    goal {\n      courseMasteryTargets {\n        course {\n          id\n          translatedTitle\n          __typename\n        }\n        gradeLevels\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtActivationTarget": "query districtActivationTarget($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    goal {\n      activationTarget {\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCoeditingDocument": "query getCoeditingDocument($documentID: String!) {\n  coeditingDocument(documentID: $documentID) {\n    id\n    ownerKaid\n    threadId\n    configName\n    title\n    persona\n    latestSnapshot {\n      id\n      text {\n        prefix\n        selection\n        suffix\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getUserData": "query getUserData {\n  user {\n    id\n    hasAccessToAIGuideDistrictClassroomTeacher\n    __typename\n  }\n}",
  "getCurriculumAlignedCoursesForDistrict": "query getCurriculumAlignedCoursesForDistrict($districtId: ID!) {\n  districtById(districtId: $districtId) {\n    id\n    curriculumAlignedCourses {\n      id\n      title: translatedTitle\n      domainSlug\n      __typename\n    }\n    __typename\n  }\n}",
  "getAiGuideAssignableActivities": "query getAiGuideAssignableActivities {\n  aiGuideAssignableActivities {\n    id\n    configName\n    contentID\n    teacherToolData {\n      description\n      title\n      urlSlug\n      __typename\n    }\n    __typename\n  }\n}",
  "DistrictWithUserPermissionsQuery": "query DistrictWithUserPermissionsQuery($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    partnership {\n      ... on MetaDistrict {\n        id\n        __typename\n      }\n      ... on District {\n        id\n        __typename\n      }\n      __typename\n    }\n    name\n    createdAt\n    rosterSource\n    isTest\n    hasKhanmigo\n    isKmapDistrict\n    isK4dDistrict\n    isCentrallyRostered\n    region\n    activeGrades {\n      id\n      sortIndex\n      name\n      __typename\n    }\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      __typename\n    }\n    schoolYearStart\n    schoolYearEnd\n    kaLocale\n    ancestors {\n      id\n      levelHeight\n      name\n      __typename\n    }\n    countryCode\n    levelHeight\n    goal {\n      type\n      createdBy {\n        id\n        kaid\n        __typename\n      }\n      __typename\n    }\n    schoolYearStart\n    __typename\n  }\n  user {\n    id\n    hasPermission(name: \"CAN_ACT_LIKE_A_DISTRICT_ADMIN\", scope: ANY)\n    userDistrictInfos {\n      id\n      district {\n        id\n        __typename\n      }\n      activatedAt\n      canSeeAllSchools\n      canManageAdmins\n      isKmap\n      isSuperAdmin\n      __typename\n    }\n    userMetaInfos {\n      id\n      partnership {\n        id\n        descendants(administeredOnly: true) {\n          ... on MetaDistrict {\n            id\n            __typename\n          }\n          ... on District {\n            id\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      adminOf {\n        ... on MetaDistrict {\n          id\n          __typename\n        }\n        ... on District {\n          id\n          __typename\n        }\n        __typename\n      }\n      activatedAt\n      canManageAdmins\n      isSuperAdmin(districtID: $districtID)\n      __typename\n    }\n    __typename\n  }\n}",
  "GetManagedPartnershipsForDistrictsRoot": "query GetManagedPartnershipsForDistrictsRoot {\n  user {\n    id\n    homepageUrl\n    userChosenRoles\n    __typename\n  }\n  getPartnerships(includeDeleted: false, onlyTeacherDirected: false) {\n    ... on MetaDistrict {\n      id\n      name\n      countryCode\n      levelHeight\n      __typename\n    }\n    ... on District {\n      id\n      name\n      isTest\n      isKmapDistrict\n      isK4dDistrict\n      countryCode\n      levelHeight\n      __typename\n    }\n    __typename\n  }\n}",
  "getTeacherAccessPermissionsData": "query getTeacherAccessPermissionsData {\n  user {\n    id\n    age\n    joined\n    isTeacher\n    isFormalTeacher\n    isK4dTeacher\n    hasAccessToAIGuideTeacher\n    isAIGuideEnabled\n    hasClasses\n    isKmapStudent\n    isK4dStudent\n    hasAccessToAIGuideDistrictClassroomTeacher\n    classrooms {\n      id\n      cacheId\n      isK4dClassroom\n      __typename\n    }\n    __typename\n  }\n}",
  "teacherAssignments": "query teacherAssignments($contentDescriptor: String!) {\n  user {\n    id\n    assignmentsForContentInClassroomsTaughtByThisUser(\n      contentDescriptor: $contentDescriptor\n    ) {\n      ...AssignmentFields\n      classroom {\n        id\n        cacheId\n        name\n        signupCode\n        descriptor\n        topics {\n          id\n          key\n          slug\n          title\n          iconPath\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AssignmentFields on Assignment {\n  id\n  studentKaids\n  isDraft\n  assignmentStatus\n  subjectSlug\n  numStudentsCompleted\n  assignedDate\n  startDate\n  dueDate\n  contentDescriptors\n  domainId\n  courseId\n  unitId\n  lessonId\n  contents {\n    id\n    title: translatedTitle\n    kind\n    defaultUrlPath\n    __typename\n  }\n  exerciseConfig {\n    itemPickerStrategy\n    __typename\n  }\n  title\n  instructions\n  configuredActivityInputs\n  __typename\n}",
  "essaySnapshotPatches": "query essaySnapshotPatches($essaySessionId: String!, $snapshotIndex: Int!) {\n  essaySession(essaySessionID: $essaySessionId) {\n    id\n    snapshot(snapshotIndex: $snapshotIndex) {\n      ... on UserEssayTextSnapshot {\n        patches {\n          priorSnapshotStart\n          currentSnapshotStart\n          removed\n          added\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtTeachersFromCursor": "query districtTeachersFromCursor($districtId: ID!, $schoolIds: [ID!], $pageSize: Int, $cursor: Int) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    schoolIds: $schoolIds\n    pageSize: $pageSize\n    cursor: $cursor\n  ) {\n    rows {\n      teacherId\n      teacherName\n      __typename\n    }\n    __typename\n  }\n}",
  "districtTeachersTotalCount": "query districtTeachersTotalCount($districtId: ID!, $schoolIds: [ID!]) {\n  activationReportByTeacher: activationReportByTeacherV2(\n    districtId: $districtId\n    schoolIds: $schoolIds\n  ) {\n    totalCount\n    __typename\n  }\n}",
  "getPreviewTeacherToolbarTools": "query getPreviewTeacherToolbarTools {\n  previewAiGuideTeacherTools(order: TEACHER_TOOLBAR) {\n    id\n    configName\n    __typename\n  }\n}",
  "getHomePageTargets": "query getHomePageTargets($districtID: ID!) {\n  districtById(districtId: $districtID) {\n    id\n    goal {\n      courseMasteryTargets {\n        course {\n          id\n          title: translatedTitle\n          __typename\n        }\n        gradeLevels\n        __typename\n      }\n      khanmigoTarget {\n        percentage\n        __typename\n      }\n      learningMinutesTarget {\n        percentage\n        __typename\n      }\n      skillsLeveledUp {\n        skillsPerWeek\n        __typename\n      }\n      skillsToProficient {\n        skillsPerWeek\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "courseEditorQuery": "query courseEditorQuery($courseId: String!) {\n  contentEditingStatus {\n    editingDisabled\n    publishDisabled\n    __typename\n  }\n  isCourseEditableByCurrentUser(courseId: $courseId)\n}",
  "GetUMIForLinking": "query GetUMIForLinking($uuid: ID!) {\n  userMetaInfoByUUID(uuid: $uuid) {\n    id\n    email\n    firstName\n    lastName\n    fullName\n    kaid\n    uuid\n    __typename\n  }\n}",
  "AssessmentSummary": "query AssessmentSummary($slug: String!) {\n  user {\n    id\n    assessmentData {\n      assessmentStatus(assessmentSlug: $slug) {\n        assessment {\n          id\n          surveySlug\n          __typename\n        }\n        summary {\n          questionsCorrect\n          questionsTotal\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "myTestDistricts": "query myTestDistricts {\n  user {\n    id\n    engTestDistricts {\n      district {\n        id\n        name\n        __typename\n      }\n      karfJson\n      __typename\n    }\n    __typename\n  }\n}",
  "findUsersByIpAndGetRestriction": "query findUsersByIpAndGetRestriction($ip: String!, $usersCursor: ID, $pageSize: Int) {\n  usersSearchByIpPage(ip: $ip, after: $usersCursor, pageSize: $pageSize) {\n    users {\n      ...UserFields\n      ...FilterFields\n      __typename\n    }\n    pageInfo {\n      nextCursor\n      __typename\n    }\n    totalCount\n    __typename\n  }\n  getIpRestrictionInfo(ip: $ip) {\n    isRestricted\n    isBlocked\n    __typename\n  }\n}\n\nfragment FilterFields on User {\n  id\n  nickname\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  joined\n  discussionBanned\n  isChild\n  points\n  __typename\n}\n\nfragment UserFields on User {\n  id\n  kaid\n  lastLogin\n  points\n  profileRoot\n  nickname\n  joined\n  authEmails\n  userId\n  username\n  coaches {\n    id\n    email\n    username\n    kaid\n    __typename\n  }\n  aiGuideAccessPlans {\n    id\n    isActive\n    enrollmentGroup\n    __typename\n  }\n  __typename\n}",
  "additionalUserPageData": "query additionalUserPageData($ip: String!, $kaid: String!) {\n  getIpRestrictionInfo(ip: $ip) {\n    isRestricted\n    isBlocked\n    __typename\n  }\n  accountDeletionRequests(targetKaid: $kaid) {\n    user {\n      id\n      __typename\n    }\n    reason\n    processOnDate\n    __typename\n  }\n  userSummary(kaid: $kaid) {\n    hellbanActions {\n      date\n      isHellban\n      moderatorNickname\n      reason\n      urlsafeKey\n      __typename\n    }\n    __typename\n  }\n}",
  "GetPartnershipDataForDashboard": "query GetPartnershipDataForDashboard($partnershipID: ID!, $kaLocale: String!) {\n  partnershipDataForDashboard(partnershipID: $partnershipID) {\n    root {\n      ... on MetaDistrict {\n        id\n        name\n        countryCode\n        levelLabel\n        levelHeight\n        treeLabels(kaLocale: $kaLocale) {\n          singular\n          generalized\n          __typename\n        }\n        isAdministered\n        hasKAD: hasKad(scopeToActor: true)\n        hasLearningPaths: hasLp(scopeToActor: true)\n        hasKhanmigo(scopeToActor: true)\n        hasCentralRostering(scopeToActor: true)\n        kaLocale\n        __typename\n      }\n      ... on District {\n        id\n        name\n        countryCode\n        levelLabel\n        levelHeight\n        treeLabels(kaLocale: $kaLocale) {\n          singular\n          generalized\n          __typename\n        }\n        isTest\n        isAdministered\n        hasKAD: isK4dDistrict(scopeToActor: true)\n        hasLearningPaths: isKmapDistrict(scopeToActor: true)\n        hasKhanmigo: hasKhanmigo(scopeToActor: true)\n        hasCentralRostering: isCentrallyRostered\n        kaLocale\n        __typename\n      }\n      __typename\n    }\n    visibleNodes {\n      ... on MetaDistrict {\n        id\n        parent {\n          id\n          __typename\n        }\n        name\n        levelLabel\n        levelHeight\n        isAdministered\n        __typename\n      }\n      ... on District {\n        id\n        parent {\n          id\n          __typename\n        }\n        name\n        schools {\n          id\n          name\n          isKADSchool\n          isKmapSchool\n          __typename\n        }\n        levelLabel\n        levelHeight\n        isK4dDistrict\n        isKmapDistrict\n        isTest\n        isAdministered\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  user {\n    id\n    hasPermission(name: \"CAN_ACT_LIKE_A_DISTRICT_ADMIN\", scope: ANY)\n    userDistrictInfos {\n      id\n      district {\n        id\n        __typename\n      }\n      partnership {\n        ... on MetaDistrict {\n          id\n          __typename\n        }\n        ... on District {\n          id\n          __typename\n        }\n        __typename\n      }\n      activatedAt\n      canSeeAllSchools\n      canManageAdmins\n      isKmap\n      isAdmin\n      __typename\n    }\n    userMetaInfos {\n      id\n      partnership {\n        id\n        __typename\n      }\n      activatedAt\n      adminOf {\n        ... on MetaDistrict {\n          id\n          __typename\n        }\n        ... on District {\n          id\n          __typename\n        }\n        __typename\n      }\n      canManageAdmins\n      __typename\n    }\n    __typename\n  }\n}",
  "ActivationByNodeHook": "query ActivationByNodeHook($selectedNodeID: ID!, $childIDs: [ID!]) {\n  activationReportByAdminAggregate(\n    selectedNodeID: $selectedNodeID\n    childIDs: $childIDs\n  ) {\n    rows {\n      adminAggregate {\n        ... on District {\n          id\n          name\n          __typename\n        }\n        ... on MetaDistrict {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      numStudentsTotal\n      numStudentsActivated\n      numStudentsStartedAnActivity\n      numTeachersTotal\n      numTeachersActivated\n      __typename\n    }\n    totalRow {\n      numStudentsTotal\n      numStudentsActivated\n      numStudentsStartedAnActivity\n      numTeachersTotal\n      numTeachersActivated\n      __typename\n    }\n    updatedAt\n    __typename\n  }\n}",
  "ExpandedDistrictQuery": "query ExpandedDistrictQuery($districtID: ID!, $districtIDStr: String!) {\n  districtById(districtId: $districtID) {\n    id\n    parent {\n      id\n      __typename\n    }\n    name\n    createdAt\n    levelLabel\n    levelHeight\n    isK4dDistrict\n    isKmapDistrict\n    isTest\n    isAdministered\n    partnership {\n      ... on MetaDistrict {\n        id\n        __typename\n      }\n      ... on District {\n        id\n        __typename\n      }\n      __typename\n    }\n    hasKhanmigo\n    isCentrallyRostered\n    rosterSource\n    region\n    activeGrades {\n      id\n      sortIndex\n      name\n      __typename\n    }\n    schools {\n      id\n      name\n      isKADSchool\n      isKmapSchool\n      __typename\n    }\n    schoolYearStart\n    schoolYearEnd\n    kaLocale\n    ancestors {\n      id\n      levelHeight\n      name\n      __typename\n    }\n    countryCode\n    goal {\n      type\n      createdBy {\n        id\n        kaid\n        __typename\n      }\n      __typename\n    }\n    schoolYearStart\n    __typename\n  }\n  user {\n    id\n    isSuperAdmin(districtID: $districtIDStr)\n    __typename\n  }\n}",
  "kadTrialDistricts": "query kadTrialDistricts {\n  kadTrialDistricts {\n    id\n    name\n    createdBy {\n      id\n      kaid\n      email\n      __typename\n    }\n    createdAt\n    isDowngraded\n    __typename\n  }\n}",
  "autoModerationResultByFeedbackKey": "query autoModerationResultByFeedbackKey($feedbackKey: String!) {\n  autoModerationResultByFeedbackKey(feedbackKey: $feedbackKey) {\n    feedback {\n      feedbackType\n      content\n      __typename\n    }\n    autoModerationResult {\n      ...ModerationResultFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ModerationResultFragment on AutoModerationResult {\n  autoModerationAction {\n    autoDelete\n    autoHide\n    __typename\n  }\n  autoHideCriteria {\n    isShortPost\n    containsLargeWords\n    containsASCIIArt\n    lowQualityScore {\n      totalScore\n      components {\n        code\n        totalScorePercentage\n        terms\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "autoModerationResultByFeedbackType": "query autoModerationResultByFeedbackType($feedbackType: FeedbackType!, $content: String!) {\n  autoModerationResultByFeedbackType(\n    feedbackType: $feedbackType\n    content: $content\n  ) {\n    ...ModerationResultFragment\n    __typename\n  }\n}\n\nfragment ModerationResultFragment on AutoModerationResult {\n  autoModerationAction {\n    autoDelete\n    autoHide\n    __typename\n  }\n  autoHideCriteria {\n    isShortPost\n    containsLargeWords\n    containsASCIIArt\n    lowQualityScore {\n      totalScore\n      components {\n        code\n        totalScorePercentage\n        terms\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "getBlooketQuestionSet": "query getBlooketQuestionSet($threadId: String!) {\n  blooketQuestionSet(threadId: $threadId) {\n    id\n    ownerKaid\n    threadId\n    title\n    description\n    questions {\n      text\n      timeLimit\n      randomizeAnswers\n      answers {\n        text\n        isCorrect\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getTrialTeacherInfos": "query getTrialTeacherInfos($schoolID: String!) {\n  getTeachersForSchool(schoolID: $schoolID) {\n    id\n    keyNameID\n    kaid\n    districtProvidedFirstName\n    districtProvidedLastName\n    districtProvidedEmail\n    cdiCount\n    activationEmailSentAt\n    __typename\n  }\n}",
  "GetKhanmigoModerators": "query GetKhanmigoModerators($partnershipID: ID!, $districtID: ID!) {\n  getKhanmigoModerators(partnershipID: $partnershipID, districtID: $districtID) {\n    id\n    keyNameID\n    displayNameForTeacher\n    kaid\n    moderatorOfSchools {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n}",
  "GetVisibleAdminUDIs": "query GetVisibleAdminUDIs($partnershipID: ID!, $districtID: ID!) {\n  getVisibleAdminUDIs(partnershipID: $partnershipID, districtID: $districtID) {\n    id\n    keyNameID\n    displayNameForTeacher\n    districtProvidedEmail\n    kaid\n    moderatorOfSchools {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminAssessmentStatus": "query devadminAssessmentStatus($kaid: String!, $assessmentSlug: String!) {\n  actor: user {\n    id\n    __typename\n  }\n  user(kaid: $kaid) {\n    id\n    nickname\n    assessmentData {\n      assessmentStatus(assessmentSlug: $assessmentSlug) {\n        status\n        assessment {\n          id\n          name\n          __typename\n        }\n        task {\n          id\n          creationTime\n          expirationTime\n          questionsCompleted\n          estimatedQuestionsRemaining\n          responses {\n            exerciseId\n            itemId\n            finalResponse\n            isCorrect\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "AssignmentsPageForContentKind": "query AssignmentsPageForContentKind($contentKind: String!, $dueAfter: DateTime, $cursor: ID, $pageSize: Int) {\n  user {\n    id\n    assignmentsPageForContentKind(\n      contentKind: $contentKind\n      dueAfter: $dueAfter\n      after: $cursor\n      pageSize: $pageSize\n    ) {\n      pageInfo {\n        nextCursor\n        __typename\n      }\n      assignments {\n        id\n        dueDate\n        title\n        itemCompletionStates {\n          studentKaid\n          completedOn\n          __typename\n        }\n        contents {\n          ... on AIGuideActivity {\n            id\n            contentId\n            slug\n            translatedTitle\n            activityType\n            defaultUrlPath\n            __typename\n          }\n          __typename\n        }\n        classroom {\n          cacheId\n          id\n          name\n          descriptor\n          coach {\n            id\n            nickname\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getExerciseTitle": "query getExerciseTitle($exerciseId: String!) {\n  exerciseById(id: $exerciseId) {\n    id\n    translatedTitle\n    __typename\n  }\n}",
  "ProgressByNodeHook": "query ProgressByNodeHook($filters: DistrictCourseProgressFilters!) {\n  districtCourseProgressByAdminAggregate(filters: $filters) {\n    dateInfo {\n      from\n      upTo\n      lastUpdatedDate\n      __typename\n    }\n    rows {\n      adminAggregate {\n        ... on District {\n          id\n          name\n          __typename\n        }\n        ... on MetaDistrict {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      info {\n        activeLearners\n        totalLearners\n        averageMinutes\n        averageSkillsLeveledToProficient\n        averageSkillsLeveledUp\n        averageSkillsWorkedOn\n        percent0\n        percent1to15\n        percent15to30\n        percent30plus\n        attemptedPercent\n        familiarPercent\n        proficientPercent\n        masteredPercent\n        minutesTargetStatus\n        skillsLeveledUpTargetStatus\n        skillsToProficientTargetStatus\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getCanAddStudentToAssignment": "query getCanAddStudentToAssignment($assignmentId: ID!, $studentKaid: String!) {\n  canAddStudentToAssignment(\n    assignmentID: $assignmentId\n    studentKaid: $studentKaid\n  ) {\n    responseCode\n    assignment {\n      ...assignmentFields\n      __typename\n    }\n    error {\n      code\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment assignmentFields on Assignment {\n  id\n  key\n  classroom {\n    id\n    cacheId\n    name\n    signupCode\n    __typename\n  }\n  contentDescriptors\n  startDate\n  dueDate\n  contents {\n    ...contentFieldsForContents\n    __typename\n  }\n  title\n  domainId\n  courseId\n  unitId\n  lessonId\n  __typename\n}\n\nfragment contentFieldsForContents on LearnableContent {\n  id\n  kind\n  title: translatedTitle\n  defaultUrlPath\n  topicPaths {\n    path {\n      id\n      kind\n      slug\n      __typename\n    }\n    __typename\n  }\n  __typename\n}",
  "exerciseEditorGetAllArticleRevisionsV2": "query exerciseEditorGetAllArticleRevisionsV2 {\n  allArticleRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "exerciseEditorGetAllExerciseRevisionsV2": "query exerciseEditorGetAllExerciseRevisionsV2 {\n  allExerciseRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "exerciseEditorGetAllVideoRevisionsV2": "query exerciseEditorGetAllVideoRevisionsV2 {\n  allVideoRevisions {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "devadminAssessmentConfig": "query devadminAssessmentConfig($assessmentSlug: String!) {\n  interimAssessment(assessmentSlug: $assessmentSlug) {\n    id\n    name\n    slug\n    enabled\n    config {\n      eytSurveySlug\n      nonEYTSurveySlug\n      steps {\n        ... on InterimAssessmentStandardQuestionStep {\n          id\n          stepNumber\n          exerciseId\n          __typename\n        }\n        ... on InterimAssessmentEYTQuestionStep {\n          id\n          stepNumber\n          exerciseId\n          conversationStarter\n          completionCriteria\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getExerciseInfo": "query getExerciseInfo($exerciseId: String!) {\n  exerciseById(id: $exerciseId) {\n    id\n    translatedTitle\n    parentTopic {\n      id\n      domainSlug\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminAssessmentConfigs": "query devadminAssessmentConfigs {\n  interimAssessments {\n    id\n    name\n    slug\n    enabled\n    __typename\n  }\n}",
  "GetDistrictTrialTOSAcceptanceByKaid": "query GetDistrictTrialTOSAcceptanceByKaid {\n  getDistrictTrialTOSAcceptanceByKaid {\n    id\n    __typename\n  }\n}",
  "districtKhanmigoTotalUsageByNode": "query districtKhanmigoTotalUsageByNode($filter: KhanmigoDistrictFilters!) {\n  districtKhanmigoUsage(filter: $filter) {\n    groupType\n    overall {\n      possibleUsers\n      usersWithUsage\n      percentUsersWithUsage\n      chats\n      avgChatsPerUsersWithUsage\n      avgChatsPerPossibleUsers\n      flaggedChats\n      avgFlaggedChatsPerUsersWithUsage\n      avgFlaggedChatsPerPossibleUsers\n      messages\n      avgMessagesPerChat\n      avgMessagesPerUserWithUsage\n      avgMessagesPerPossibleUsers\n      targetStatus\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    byAdminAggregate {\n      adminAggregate {\n        ... on District {\n          id\n          name\n          __typename\n        }\n        ... on MetaDistrict {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        targetStatus\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "districtKhanmigoTotalUsageBySchool": "query districtKhanmigoTotalUsageBySchool($filter: KhanmigoDistrictFilters!) {\n  districtKhanmigoUsage(filter: $filter) {\n    groupType\n    overall {\n      possibleUsers\n      usersWithUsage\n      percentUsersWithUsage\n      chats\n      avgChatsPerUsersWithUsage\n      avgChatsPerPossibleUsers\n      flaggedChats\n      avgFlaggedChatsPerUsersWithUsage\n      avgFlaggedChatsPerPossibleUsers\n      messages\n      avgMessagesPerChat\n      avgMessagesPerUserWithUsage\n      avgMessagesPerPossibleUsers\n      targetStatus\n      __typename\n    }\n    target {\n      percentage\n      __typename\n    }\n    bySchool {\n      school {\n        id\n        name\n        __typename\n      }\n      usage {\n        possibleUsers\n        usersWithUsage\n        percentUsersWithUsage\n        chats\n        avgChatsPerUsersWithUsage\n        avgChatsPerPossibleUsers\n        flaggedChats\n        avgFlaggedChatsPerUsersWithUsage\n        avgFlaggedChatsPerPossibleUsers\n        messages\n        avgMessagesPerChat\n        targetStatus\n        avgMessagesPerUserWithUsage\n        avgMessagesPerPossibleUsers\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassroomsAndStudents": "query getClassroomsAndStudents {\n  user {\n    id\n    isK4dTeacher\n    classrooms: coachedStudentLists {\n      id\n      cacheId\n      classroomDescriptor: descriptor\n      name\n      studentKaidsAndNicknames {\n        id\n        kaid\n        nickname: coachNickname\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminExerciseForAssessmentConfigEditor": "query devadminExerciseForAssessmentConfigEditor($id: String!) {\n  exerciseById(id: $id) {\n    id\n    slug\n    title\n    __typename\n  }\n}",
  "lookUpClassroomByCode": "query lookUpClassroomByCode($code: String!) {\n  joinByClassCodeInfo(classCode: $code) {\n    cacheId\n    id\n    name\n    __typename\n  }\n}",
  "ContentTranslationSearchQuery": "query ContentTranslationSearchQuery($query: String!, $type: QueryType!) {\n  stringSearch(query: $query, type: $type) {\n    snapshotId\n    filename\n    entry {\n      msgKey\n      msgId\n      comment\n      occurrences {\n        file\n        line\n        __typename\n      }\n      timestamp\n      deleted\n      __typename\n    }\n    translations {\n      crowdinLocale\n      msgStr\n      approved\n      lintError\n      __typename\n    }\n    __typename\n  }\n}",
  "ParentOverviewByChildReport": "query ParentOverviewByChildReport($filters: ParentOverviewReportFilters!) {\n  parentOverviewByChildReport(filters: $filters) {\n    dateInfo {\n      lastUpdatedDate\n      from\n      upTo\n      __typename\n    }\n    rows {\n      user {\n        id\n        __typename\n      }\n      info {\n        minutes\n        workedOn\n        leveledUp\n        leveledToProficient\n        attempted\n        familiar\n        proficient\n        mastered\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  parent: user {\n    id\n    children {\n      id\n      kaid\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "ParentOverviewByCourseForChildReport": "query ParentOverviewByCourseForChildReport($filters: ParentOverviewReportFilters!, $childKaid: String!) {\n  parentOverviewByCourseForChildReport(filters: $filters, childKaid: $childKaid) {\n    dateInfo {\n      lastUpdatedDate\n      from\n      upTo\n      __typename\n    }\n    rows {\n      course {\n        id\n        translatedTitle\n        __typename\n      }\n      info {\n        minutes\n        workedOn\n        leveledUp\n        leveledToProficient\n        attempted\n        familiar\n        proficient\n        mastered\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "PlatformTranslationSearchQuery": "query PlatformTranslationSearchQuery($query: String!, $type: QueryType!) {\n  platformStringSearch(query: $query, type: $type) {\n    results {\n      snapshotId\n      filename\n      entry {\n        msgKey\n        msgId\n        msgContext\n        occurrences {\n          file\n          __typename\n        }\n        timestamp\n        __typename\n      }\n      translations {\n        msgStr\n        approved\n        crowdinLocale\n        __typename\n      }\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentForAction": "query assignmentForAction($assignmentId: String!, $teacherKaid: String!) {\n  coach: user {\n    id\n    assignment: assignmentByThisUser(id: $assignmentId) {\n      id\n      contentDescriptors\n      title\n      assignedDate\n      startDate\n      dueDate\n      configuredActivityInputs\n      students {\n        id\n        kaid\n        coachNickname(teacherKaid: $teacherKaid)\n        __typename\n      }\n      classroom {\n        id\n        cacheId\n        descriptor\n        name\n        signupCode\n        __typename\n      }\n      itemCompletionStatesForAllStudents {\n        studentKaid\n        essaySession {\n          id\n          currentStage\n          __typename\n        }\n        completedOn\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentInfoForSharing": "query assignmentInfoForSharing($assignmentID: String!) {\n  user {\n    id\n    assignmentByThisUser(id: $assignmentID) {\n      id\n      classroom {\n        cacheId\n        id\n        name\n        signupCode\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "devadminAssessmentConfigsByExercise": "query devadminAssessmentConfigsByExercise($exerciseId: String!) {\n  interimAssessmentsByExercise(exerciseId: $exerciseId) {\n    id\n    name\n    slug\n    enabled\n    __typename\n  }\n}",
  "getAssessmentItemForPreviewPage": "query getAssessmentItemForPreviewPage($input: AssessmentItemInput!) {\n  assessmentItem(input: $input) {\n    item {\n      id\n      itemData\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}",
  "getClassroomStruggleStats": "query getClassroomStruggleStats($classroomDescriptor: String!) {\n  getClassroomStruggleStats(classroomDescriptor: $classroomDescriptor) {\n    classroomStruggleStats {\n      skillsByStudentsWhoHaveWorkedOnSkill {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostProblemAttempts {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostCorrectAnswers {\n        skillID\n        value\n        __typename\n      }\n      skillsWithWorstCorrectPerAttemptRatio {\n        skillID\n        value\n        total\n        __typename\n      }\n      skillsWithMostTaskRestarts {\n        skillID\n        value\n        __typename\n      }\n      skillsWithHighestSkipRate {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsLast3AttemptIncorrect {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsLast5AttemptIncorrect {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsAtLeast3AttemptIncorrectInLast7 {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsAtLeast3AttemptIncorrectInLast7Twice {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsLastTaskAtAttempted {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsLast2TasksAtAttempted {\n        skillID\n        value\n        __typename\n      }\n      skillsWithMostStudentsLast3TasksAtAttempted {\n        skillID\n        value\n        __typename\n      }\n      __typename\n    }\n    skills {\n      skillID\n      skillTitle\n      skillUrl\n      __typename\n    }\n    __typename\n  }\n}",
  "getParentTools": "query getParentTools {\n  aiGuideParentTools {\n    id\n    configName\n    __typename\n  }\n}",
  "getTeacherCourses": "query getTeacherCourses($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    teacherCourses\n    __typename\n  }\n}",
  "getTeacherGradeLevels": "query getTeacherGradeLevels($kaid: String!) {\n  user(kaid: $kaid) {\n    id\n    teacherGradeLevels\n    __typename\n  }\n}",
  "getUDIDetails": "query getUDIDetails($uuid: ID!) {\n  userDistrictInfo(uuid: $uuid, includeDeleted: true) {\n    id\n    uuid\n    kaid\n    adminOfSchools {\n      id\n      name\n      __typename\n    }\n    gracePeriod {\n      start\n      end\n      __typename\n    }\n    partnership {\n      ... on MetaDistrict {\n        id\n        name\n        __typename\n      }\n      ... on District {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    district {\n      id\n      name\n      isOldNWEA\n      kaLocale\n      ancestors {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    createdAt\n    deletedAt\n    updatedAt\n    cleverId\n    classlinkId\n    rosterSource\n    activationEmailSentAt\n    activatedAt\n    activationMethod\n    districtProvidedFullName\n    districtProvidedEmail\n    districtProvidedBirthMonth\n    districtProvidedBirthYear\n    primaryRole\n    isKmap\n    isKAD\n    gradeLevel\n    khanmigoShould\n    khanmigoStatus\n    khanmigoReason\n    udiAuditLogs {\n      kind\n      changes\n      actorKaid\n      createdAt\n      description\n      __typename\n    }\n    __typename\n  }\n}",
  "userForAuthorization": "query userForAuthorization {\n  user {\n    id\n    birthMonthYear\n    hasAccessToAIGuideLearner\n    hasAccessToWritingCoachLearner\n    hasAccessToWritingCoachTeacher\n    isAIGuideEnabled\n    isCleverLibraryTeacher\n    isFormalTeacher\n    isK4dStudent\n    isK4dTeacher\n    isKmapStudent\n    isKmapTeacher\n    isTeacher\n    __typename\n  }\n}",
  "userMayInputImages": "query userMayInputImages {\n  user {\n    id\n    includesDistrictOwnedData\n    districtEnableImageInput\n    __typename\n  }\n}",
  "KAClassroom_GetAssessmentItem": "query KAClassroom_GetAssessmentItem($input: AssessmentItemInput!) {\n  assessmentItem(input: $input) {\n    item {\n      ...assessmentItemFields\n      __typename\n    }\n    error {\n      code\n      debugMessage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment assessmentItemFields on AssessmentItem {\n  id\n  sha\n  problemType\n  itemData\n  __typename\n}",
  "ParentOverviewBySkillForChildForCourseReport": "query ParentOverviewBySkillForChildForCourseReport($filters: ParentOverviewReportFilters!, $childKaid: String!, $courseId: String!) {\n  parentOverviewBySkillForChildForCourseReport(\n    filters: $filters\n    childKaid: $childKaid\n  ) {\n    dateInfo {\n      lastUpdatedDate\n      from\n      upTo\n      __typename\n    }\n    rows {\n      skill {\n        id\n        translatedTitle\n        __typename\n      }\n      info {\n        minutes\n        workedOn\n        leveledUp\n        leveledToProficient\n        attempted\n        familiar\n        proficient\n        mastered\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  courseById(id: $courseId) {\n    id\n    unitChildren {\n      id\n      translatedTitle\n      filteredContent(kinds: [\"Exercise\"]) {\n        __typename\n        id\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "KAClassroom_GetClassroomCourses": "query KAClassroom_GetClassroomCourses($classDescriptor: String!) {\n  classroom: classroomByDescriptor(descriptor: $classDescriptor) {\n    cacheId\n    id\n    descriptor\n    courses: topics {\n      id\n      title: translatedStandaloneTitle\n      __typename\n    }\n    __typename\n  }\n}",
  "KAClassroom_GetDomains": "query KAClassroom_GetDomains($region: String!) {\n  domains: studentListTopics(region: $region) {\n    translatedTitle\n    courses: topics {\n      id\n      key\n      translatedTitle\n      __typename\n    }\n    __typename\n  }\n}",
  "allCoacheeNamesForAssessments": "query allCoacheeNamesForAssessments {\n  user {\n    id\n    coachedClassrooms {\n      descriptor\n      cacheId\n      id\n      studentKaidsAndNicknames {\n        id\n        coachNickname\n        __typename\n      }\n      __typename\n    }\n    children {\n      id\n      nickname\n      __typename\n    }\n    __typename\n  }\n}",
  "coachDetailsForAssessments": "query coachDetailsForAssessments {\n  user {\n    id\n    parents {\n      id\n      __typename\n    }\n    teachers: coaches(coachType: TEACHER) {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "assignmentInfoForRedirect": "query assignmentInfoForRedirect($assignmentId: String!) {\n  user {\n    id\n    assignmentByThisUser(id: $assignmentId) {\n      id\n      __typename\n    }\n    __typename\n  }\n}",
  "getChildAssignmentsClassrooms": "query getChildAssignmentsClassrooms($parentKaid: String!) {\n  childAssignmentsClassroomsForParent(parentKaid: $parentKaid) {\n    id\n    cacheId\n    name\n    studentKaids\n    __typename\n  }\n}",
  "getChildren": "query getChildren($targetKaid: String!) {\n  user(kaid: $targetKaid) {\n    id\n    children {\n      id\n      nickname\n      kaid\n      __typename\n    }\n    __typename\n  }\n}",
  "AssessmentsPlaytestingKaid": "query AssessmentsPlaytestingKaid {\n  user {\n    id\n    kaid\n    __typename\n  }\n}",
  "KAClassroom_GetLearnerAssignmentData": "query KAClassroom_GetLearnerAssignmentData($input: LearningDashboardQueryInput) {\n  learningDashboard(input: $input) {\n    kaid\n    classroomDescriptor\n    queue {\n      id\n      completionState\n      completedOn\n      dueDate\n      ... on ContentAssignment {\n        content {\n          id\n          translatedTitle\n          description\n          contentKind\n          contentDescriptor\n          __typename\n        }\n        assignment {\n          id\n          title\n          unit {\n            id\n            translatedTitle\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      ... on UnitPacingSuggestion {\n        content {\n          id\n          translatedTitle\n          description\n          contentKind\n          contentDescriptor\n          __typename\n        }\n        masteryAssignment {\n          id\n          unit {\n            id\n            translatedTitle\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}",
  "extraInfoQuery": "query extraInfoQuery {\n  user {\n    id\n    nickname\n    email\n    birthMonthYear\n    tosForFormalTeacherStatus\n    __typename\n  }\n}",
  "getAdminTools": "query getAdminTools {\n  aiGuideAdminTools {\n    id\n    configName\n    __typename\n  }\n}",
  "getAiGuideThreadsForMyDocuments": "query getAiGuideThreadsForMyDocuments($kaid: String!, $hasCoeditor: Boolean!, $limit: Int!) {\n  aiGuideThreads(kaid: $kaid, hasCoeditor: $hasCoeditor, limit: $limit) {\n    threads {\n      id\n      coeditingDocument(excludeArchived: true) {\n        id\n        title\n        configName\n        threadId\n        persona\n        latestSnapshot {\n          id\n          createdAt\n          __typename\n        }\n        __typename\n      }\n      blooketQuestionSet {\n        id\n        title\n        threadId\n        persona\n        lastUpdatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"
}
